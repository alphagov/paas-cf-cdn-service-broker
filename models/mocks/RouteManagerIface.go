// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-cdn-broker/models"
	"github.com/alphagov/paas-cdn-broker/utils"
)

type RouteManagerIface struct {
	CreateStub        func(string, string, string, int64, utils.Headers, bool, map[string]string) (*models.Route, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 int64
		arg5 utils.Headers
		arg6 bool
		arg7 map[string]string
	}
	createReturns struct {
		result1 *models.Route
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *models.Route
		result2 error
	}
	DeleteOrphanedCertsStub        func()
	deleteOrphanedCertsMutex       sync.RWMutex
	deleteOrphanedCertsArgsForCall []struct {
	}
	DisableStub        func(*models.Route) error
	disableMutex       sync.RWMutex
	disableArgsForCall []struct {
		arg1 *models.Route
	}
	disableReturns struct {
		result1 error
	}
	disableReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(string) (*models.Route, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 *models.Route
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *models.Route
		result2 error
	}
	GetDNSChallengesStub        func(*models.Route) ([]utils.DomainValidationChallenge, error)
	getDNSChallengesMutex       sync.RWMutex
	getDNSChallengesArgsForCall []struct {
		arg1 *models.Route
	}
	getDNSChallengesReturns struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}
	getDNSChallengesReturnsOnCall map[int]struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}
	PollStub        func(*models.Route) error
	pollMutex       sync.RWMutex
	pollArgsForCall []struct {
		arg1 *models.Route
	}
	pollReturns struct {
		result1 error
	}
	pollReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(string, *string, *int64, *utils.Headers, *bool) (bool, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 string
		arg2 *string
		arg3 *int64
		arg4 *utils.Headers
		arg5 *bool
	}
	updateReturns struct {
		result1 bool
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RouteManagerIface) Create(arg1 string, arg2 string, arg3 string, arg4 int64, arg5 utils.Headers, arg6 bool, arg7 map[string]string) (*models.Route, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 int64
		arg5 utils.Headers
		arg6 bool
		arg7 map[string]string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RouteManagerIface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *RouteManagerIface) CreateCalls(stub func(string, string, string, int64, utils.Headers, bool, map[string]string) (*models.Route, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *RouteManagerIface) CreateArgsForCall(i int) (string, string, string, int64, utils.Headers, bool, map[string]string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *RouteManagerIface) CreateReturns(result1 *models.Route, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *models.Route
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) CreateReturnsOnCall(i int, result1 *models.Route, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *models.Route
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *models.Route
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) DeleteOrphanedCerts() {
	fake.deleteOrphanedCertsMutex.Lock()
	fake.deleteOrphanedCertsArgsForCall = append(fake.deleteOrphanedCertsArgsForCall, struct {
	}{})
	stub := fake.DeleteOrphanedCertsStub
	fake.recordInvocation("DeleteOrphanedCerts", []interface{}{})
	fake.deleteOrphanedCertsMutex.Unlock()
	if stub != nil {
		fake.DeleteOrphanedCertsStub()
	}
}

func (fake *RouteManagerIface) DeleteOrphanedCertsCallCount() int {
	fake.deleteOrphanedCertsMutex.RLock()
	defer fake.deleteOrphanedCertsMutex.RUnlock()
	return len(fake.deleteOrphanedCertsArgsForCall)
}

func (fake *RouteManagerIface) DeleteOrphanedCertsCalls(stub func()) {
	fake.deleteOrphanedCertsMutex.Lock()
	defer fake.deleteOrphanedCertsMutex.Unlock()
	fake.DeleteOrphanedCertsStub = stub
}

func (fake *RouteManagerIface) Disable(arg1 *models.Route) error {
	fake.disableMutex.Lock()
	ret, specificReturn := fake.disableReturnsOnCall[len(fake.disableArgsForCall)]
	fake.disableArgsForCall = append(fake.disableArgsForCall, struct {
		arg1 *models.Route
	}{arg1})
	stub := fake.DisableStub
	fakeReturns := fake.disableReturns
	fake.recordInvocation("Disable", []interface{}{arg1})
	fake.disableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RouteManagerIface) DisableCallCount() int {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return len(fake.disableArgsForCall)
}

func (fake *RouteManagerIface) DisableCalls(stub func(*models.Route) error) {
	fake.disableMutex.Lock()
	defer fake.disableMutex.Unlock()
	fake.DisableStub = stub
}

func (fake *RouteManagerIface) DisableArgsForCall(i int) *models.Route {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	argsForCall := fake.disableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RouteManagerIface) DisableReturns(result1 error) {
	fake.disableMutex.Lock()
	defer fake.disableMutex.Unlock()
	fake.DisableStub = nil
	fake.disableReturns = struct {
		result1 error
	}{result1}
}

func (fake *RouteManagerIface) DisableReturnsOnCall(i int, result1 error) {
	fake.disableMutex.Lock()
	defer fake.disableMutex.Unlock()
	fake.DisableStub = nil
	if fake.disableReturnsOnCall == nil {
		fake.disableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RouteManagerIface) Get(arg1 string) (*models.Route, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RouteManagerIface) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *RouteManagerIface) GetCalls(stub func(string) (*models.Route, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *RouteManagerIface) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RouteManagerIface) GetReturns(result1 *models.Route, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.Route
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) GetReturnsOnCall(i int, result1 *models.Route, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.Route
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.Route
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) GetDNSChallenges(arg1 *models.Route) ([]utils.DomainValidationChallenge, error) {
	fake.getDNSChallengesMutex.Lock()
	ret, specificReturn := fake.getDNSChallengesReturnsOnCall[len(fake.getDNSChallengesArgsForCall)]
	fake.getDNSChallengesArgsForCall = append(fake.getDNSChallengesArgsForCall, struct {
		arg1 *models.Route
	}{arg1})
	stub := fake.GetDNSChallengesStub
	fakeReturns := fake.getDNSChallengesReturns
	fake.recordInvocation("GetDNSChallenges", []interface{}{arg1})
	fake.getDNSChallengesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RouteManagerIface) GetDNSChallengesCallCount() int {
	fake.getDNSChallengesMutex.RLock()
	defer fake.getDNSChallengesMutex.RUnlock()
	return len(fake.getDNSChallengesArgsForCall)
}

func (fake *RouteManagerIface) GetDNSChallengesCalls(stub func(*models.Route) ([]utils.DomainValidationChallenge, error)) {
	fake.getDNSChallengesMutex.Lock()
	defer fake.getDNSChallengesMutex.Unlock()
	fake.GetDNSChallengesStub = stub
}

func (fake *RouteManagerIface) GetDNSChallengesArgsForCall(i int) *models.Route {
	fake.getDNSChallengesMutex.RLock()
	defer fake.getDNSChallengesMutex.RUnlock()
	argsForCall := fake.getDNSChallengesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RouteManagerIface) GetDNSChallengesReturns(result1 []utils.DomainValidationChallenge, result2 error) {
	fake.getDNSChallengesMutex.Lock()
	defer fake.getDNSChallengesMutex.Unlock()
	fake.GetDNSChallengesStub = nil
	fake.getDNSChallengesReturns = struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) GetDNSChallengesReturnsOnCall(i int, result1 []utils.DomainValidationChallenge, result2 error) {
	fake.getDNSChallengesMutex.Lock()
	defer fake.getDNSChallengesMutex.Unlock()
	fake.GetDNSChallengesStub = nil
	if fake.getDNSChallengesReturnsOnCall == nil {
		fake.getDNSChallengesReturnsOnCall = make(map[int]struct {
			result1 []utils.DomainValidationChallenge
			result2 error
		})
	}
	fake.getDNSChallengesReturnsOnCall[i] = struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) Poll(arg1 *models.Route) error {
	fake.pollMutex.Lock()
	ret, specificReturn := fake.pollReturnsOnCall[len(fake.pollArgsForCall)]
	fake.pollArgsForCall = append(fake.pollArgsForCall, struct {
		arg1 *models.Route
	}{arg1})
	stub := fake.PollStub
	fakeReturns := fake.pollReturns
	fake.recordInvocation("Poll", []interface{}{arg1})
	fake.pollMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RouteManagerIface) PollCallCount() int {
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	return len(fake.pollArgsForCall)
}

func (fake *RouteManagerIface) PollCalls(stub func(*models.Route) error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = stub
}

func (fake *RouteManagerIface) PollArgsForCall(i int) *models.Route {
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	argsForCall := fake.pollArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RouteManagerIface) PollReturns(result1 error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = nil
	fake.pollReturns = struct {
		result1 error
	}{result1}
}

func (fake *RouteManagerIface) PollReturnsOnCall(i int, result1 error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = nil
	if fake.pollReturnsOnCall == nil {
		fake.pollReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pollReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RouteManagerIface) Update(arg1 string, arg2 *string, arg3 *int64, arg4 *utils.Headers, arg5 *bool) (bool, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 string
		arg2 *string
		arg3 *int64
		arg4 *utils.Headers
		arg5 *bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RouteManagerIface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *RouteManagerIface) UpdateCalls(stub func(string, *string, *int64, *utils.Headers, *bool) (bool, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *RouteManagerIface) UpdateArgsForCall(i int) (string, *string, *int64, *utils.Headers, *bool) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *RouteManagerIface) UpdateReturns(result1 bool, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) UpdateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *RouteManagerIface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteOrphanedCertsMutex.RLock()
	defer fake.deleteOrphanedCertsMutex.RUnlock()
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getDNSChallengesMutex.RLock()
	defer fake.getDNSChallengesMutex.RUnlock()
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RouteManagerIface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.RouteManagerIface = new(RouteManagerIface)
