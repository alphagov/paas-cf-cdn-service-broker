// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
)

type FakeCloudfront struct {
	CreateCachePolicyStub        func(*cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error)
	createCachePolicyMutex       sync.RWMutex
	createCachePolicyArgsForCall []struct {
		arg1 *cloudfront.CreateCachePolicyInput
	}
	createCachePolicyReturns struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}
	createCachePolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}
	CreateCachePolicyRequestStub        func(*cloudfront.CreateCachePolicyInput) (*request.Request, *cloudfront.CreateCachePolicyOutput)
	createCachePolicyRequestMutex       sync.RWMutex
	createCachePolicyRequestArgsForCall []struct {
		arg1 *cloudfront.CreateCachePolicyInput
	}
	createCachePolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateCachePolicyOutput
	}
	createCachePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateCachePolicyOutput
	}
	CreateCachePolicyWithContextStub        func(context.Context, *cloudfront.CreateCachePolicyInput, ...request.Option) (*cloudfront.CreateCachePolicyOutput, error)
	createCachePolicyWithContextMutex       sync.RWMutex
	createCachePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateCachePolicyInput
		arg3 []request.Option
	}
	createCachePolicyWithContextReturns struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}
	createCachePolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}
	CreateCloudFrontOriginAccessIdentityStub        func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	createCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}
	createCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	createCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	CreateCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	createCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}
	createCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}
	createCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}
	CreateCloudFrontOriginAccessIdentityWithContextStub        func(context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	createCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	createCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	createCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	CreateDistributionStub        func(*cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error)
	createDistributionMutex       sync.RWMutex
	createDistributionArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionInput
	}
	createDistributionReturns struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	createDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	CreateDistributionRequestStub        func(*cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput)
	createDistributionRequestMutex       sync.RWMutex
	createDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionInput
	}
	createDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}
	createDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}
	CreateDistributionWithContextStub        func(context.Context, *cloudfront.CreateDistributionInput, ...request.Option) (*cloudfront.CreateDistributionOutput, error)
	createDistributionWithContextMutex       sync.RWMutex
	createDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateDistributionInput
		arg3 []request.Option
	}
	createDistributionWithContextReturns struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	createDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	CreateDistributionWithTagsStub        func(*cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error)
	createDistributionWithTagsMutex       sync.RWMutex
	createDistributionWithTagsArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}
	createDistributionWithTagsReturns struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	createDistributionWithTagsReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	CreateDistributionWithTagsRequestStub        func(*cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput)
	createDistributionWithTagsRequestMutex       sync.RWMutex
	createDistributionWithTagsRequestArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}
	createDistributionWithTagsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}
	createDistributionWithTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}
	CreateDistributionWithTagsWithContextStub        func(context.Context, *cloudfront.CreateDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error)
	createDistributionWithTagsWithContextMutex       sync.RWMutex
	createDistributionWithTagsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateDistributionWithTagsInput
		arg3 []request.Option
	}
	createDistributionWithTagsWithContextReturns struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	createDistributionWithTagsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	CreateFieldLevelEncryptionConfigStub        func(*cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	createFieldLevelEncryptionConfigMutex       sync.RWMutex
	createFieldLevelEncryptionConfigArgsForCall []struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput
	}
	createFieldLevelEncryptionConfigReturns struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}
	createFieldLevelEncryptionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}
	CreateFieldLevelEncryptionConfigRequestStub        func(*cloudfront.CreateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionConfigOutput)
	createFieldLevelEncryptionConfigRequestMutex       sync.RWMutex
	createFieldLevelEncryptionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput
	}
	createFieldLevelEncryptionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput
	}
	createFieldLevelEncryptionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput
	}
	CreateFieldLevelEncryptionConfigWithContextStub        func(context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)
	createFieldLevelEncryptionConfigWithContextMutex       sync.RWMutex
	createFieldLevelEncryptionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}
	createFieldLevelEncryptionConfigWithContextReturns struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}
	createFieldLevelEncryptionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}
	CreateFieldLevelEncryptionProfileStub        func(*cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	createFieldLevelEncryptionProfileMutex       sync.RWMutex
	createFieldLevelEncryptionProfileArgsForCall []struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput
	}
	createFieldLevelEncryptionProfileReturns struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}
	createFieldLevelEncryptionProfileReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}
	CreateFieldLevelEncryptionProfileRequestStub        func(*cloudfront.CreateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionProfileOutput)
	createFieldLevelEncryptionProfileRequestMutex       sync.RWMutex
	createFieldLevelEncryptionProfileRequestArgsForCall []struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput
	}
	createFieldLevelEncryptionProfileRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput
	}
	createFieldLevelEncryptionProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput
	}
	CreateFieldLevelEncryptionProfileWithContextStub        func(context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)
	createFieldLevelEncryptionProfileWithContextMutex       sync.RWMutex
	createFieldLevelEncryptionProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}
	createFieldLevelEncryptionProfileWithContextReturns struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}
	createFieldLevelEncryptionProfileWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}
	CreateFunctionStub        func(*cloudfront.CreateFunctionInput) (*cloudfront.CreateFunctionOutput, error)
	createFunctionMutex       sync.RWMutex
	createFunctionArgsForCall []struct {
		arg1 *cloudfront.CreateFunctionInput
	}
	createFunctionReturns struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}
	createFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}
	CreateFunctionRequestStub        func(*cloudfront.CreateFunctionInput) (*request.Request, *cloudfront.CreateFunctionOutput)
	createFunctionRequestMutex       sync.RWMutex
	createFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateFunctionInput
	}
	createFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateFunctionOutput
	}
	createFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateFunctionOutput
	}
	CreateFunctionWithContextStub        func(context.Context, *cloudfront.CreateFunctionInput, ...request.Option) (*cloudfront.CreateFunctionOutput, error)
	createFunctionWithContextMutex       sync.RWMutex
	createFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFunctionInput
		arg3 []request.Option
	}
	createFunctionWithContextReturns struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}
	createFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}
	CreateInvalidationStub        func(*cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error)
	createInvalidationMutex       sync.RWMutex
	createInvalidationArgsForCall []struct {
		arg1 *cloudfront.CreateInvalidationInput
	}
	createInvalidationReturns struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	createInvalidationReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	CreateInvalidationRequestStub        func(*cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput)
	createInvalidationRequestMutex       sync.RWMutex
	createInvalidationRequestArgsForCall []struct {
		arg1 *cloudfront.CreateInvalidationInput
	}
	createInvalidationRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}
	createInvalidationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}
	CreateInvalidationWithContextStub        func(context.Context, *cloudfront.CreateInvalidationInput, ...request.Option) (*cloudfront.CreateInvalidationOutput, error)
	createInvalidationWithContextMutex       sync.RWMutex
	createInvalidationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateInvalidationInput
		arg3 []request.Option
	}
	createInvalidationWithContextReturns struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	createInvalidationWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	CreateKeyGroupStub        func(*cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error)
	createKeyGroupMutex       sync.RWMutex
	createKeyGroupArgsForCall []struct {
		arg1 *cloudfront.CreateKeyGroupInput
	}
	createKeyGroupReturns struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}
	createKeyGroupReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}
	CreateKeyGroupRequestStub        func(*cloudfront.CreateKeyGroupInput) (*request.Request, *cloudfront.CreateKeyGroupOutput)
	createKeyGroupRequestMutex       sync.RWMutex
	createKeyGroupRequestArgsForCall []struct {
		arg1 *cloudfront.CreateKeyGroupInput
	}
	createKeyGroupRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateKeyGroupOutput
	}
	createKeyGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateKeyGroupOutput
	}
	CreateKeyGroupWithContextStub        func(context.Context, *cloudfront.CreateKeyGroupInput, ...request.Option) (*cloudfront.CreateKeyGroupOutput, error)
	createKeyGroupWithContextMutex       sync.RWMutex
	createKeyGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateKeyGroupInput
		arg3 []request.Option
	}
	createKeyGroupWithContextReturns struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}
	createKeyGroupWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}
	CreateMonitoringSubscriptionStub        func(*cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error)
	createMonitoringSubscriptionMutex       sync.RWMutex
	createMonitoringSubscriptionArgsForCall []struct {
		arg1 *cloudfront.CreateMonitoringSubscriptionInput
	}
	createMonitoringSubscriptionReturns struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}
	createMonitoringSubscriptionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}
	CreateMonitoringSubscriptionRequestStub        func(*cloudfront.CreateMonitoringSubscriptionInput) (*request.Request, *cloudfront.CreateMonitoringSubscriptionOutput)
	createMonitoringSubscriptionRequestMutex       sync.RWMutex
	createMonitoringSubscriptionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateMonitoringSubscriptionInput
	}
	createMonitoringSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateMonitoringSubscriptionOutput
	}
	createMonitoringSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateMonitoringSubscriptionOutput
	}
	CreateMonitoringSubscriptionWithContextStub        func(context.Context, *cloudfront.CreateMonitoringSubscriptionInput, ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error)
	createMonitoringSubscriptionWithContextMutex       sync.RWMutex
	createMonitoringSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateMonitoringSubscriptionInput
		arg3 []request.Option
	}
	createMonitoringSubscriptionWithContextReturns struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}
	createMonitoringSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}
	CreateOriginRequestPolicyStub        func(*cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error)
	createOriginRequestPolicyMutex       sync.RWMutex
	createOriginRequestPolicyArgsForCall []struct {
		arg1 *cloudfront.CreateOriginRequestPolicyInput
	}
	createOriginRequestPolicyReturns struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}
	createOriginRequestPolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}
	CreateOriginRequestPolicyRequestStub        func(*cloudfront.CreateOriginRequestPolicyInput) (*request.Request, *cloudfront.CreateOriginRequestPolicyOutput)
	createOriginRequestPolicyRequestMutex       sync.RWMutex
	createOriginRequestPolicyRequestArgsForCall []struct {
		arg1 *cloudfront.CreateOriginRequestPolicyInput
	}
	createOriginRequestPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateOriginRequestPolicyOutput
	}
	createOriginRequestPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateOriginRequestPolicyOutput
	}
	CreateOriginRequestPolicyWithContextStub        func(context.Context, *cloudfront.CreateOriginRequestPolicyInput, ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error)
	createOriginRequestPolicyWithContextMutex       sync.RWMutex
	createOriginRequestPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateOriginRequestPolicyInput
		arg3 []request.Option
	}
	createOriginRequestPolicyWithContextReturns struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}
	createOriginRequestPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}
	CreatePublicKeyStub        func(*cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error)
	createPublicKeyMutex       sync.RWMutex
	createPublicKeyArgsForCall []struct {
		arg1 *cloudfront.CreatePublicKeyInput
	}
	createPublicKeyReturns struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}
	createPublicKeyReturnsOnCall map[int]struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}
	CreatePublicKeyRequestStub        func(*cloudfront.CreatePublicKeyInput) (*request.Request, *cloudfront.CreatePublicKeyOutput)
	createPublicKeyRequestMutex       sync.RWMutex
	createPublicKeyRequestArgsForCall []struct {
		arg1 *cloudfront.CreatePublicKeyInput
	}
	createPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreatePublicKeyOutput
	}
	createPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreatePublicKeyOutput
	}
	CreatePublicKeyWithContextStub        func(context.Context, *cloudfront.CreatePublicKeyInput, ...request.Option) (*cloudfront.CreatePublicKeyOutput, error)
	createPublicKeyWithContextMutex       sync.RWMutex
	createPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreatePublicKeyInput
		arg3 []request.Option
	}
	createPublicKeyWithContextReturns struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}
	createPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}
	CreateRealtimeLogConfigStub        func(*cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error)
	createRealtimeLogConfigMutex       sync.RWMutex
	createRealtimeLogConfigArgsForCall []struct {
		arg1 *cloudfront.CreateRealtimeLogConfigInput
	}
	createRealtimeLogConfigReturns struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}
	createRealtimeLogConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}
	CreateRealtimeLogConfigRequestStub        func(*cloudfront.CreateRealtimeLogConfigInput) (*request.Request, *cloudfront.CreateRealtimeLogConfigOutput)
	createRealtimeLogConfigRequestMutex       sync.RWMutex
	createRealtimeLogConfigRequestArgsForCall []struct {
		arg1 *cloudfront.CreateRealtimeLogConfigInput
	}
	createRealtimeLogConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateRealtimeLogConfigOutput
	}
	createRealtimeLogConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateRealtimeLogConfigOutput
	}
	CreateRealtimeLogConfigWithContextStub        func(context.Context, *cloudfront.CreateRealtimeLogConfigInput, ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error)
	createRealtimeLogConfigWithContextMutex       sync.RWMutex
	createRealtimeLogConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateRealtimeLogConfigInput
		arg3 []request.Option
	}
	createRealtimeLogConfigWithContextReturns struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}
	createRealtimeLogConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}
	CreateStreamingDistributionStub        func(*cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error)
	createStreamingDistributionMutex       sync.RWMutex
	createStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}
	createStreamingDistributionReturns struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	createStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	CreateStreamingDistributionRequestStub        func(*cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput)
	createStreamingDistributionRequestMutex       sync.RWMutex
	createStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}
	createStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}
	createStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}
	CreateStreamingDistributionWithContextStub        func(context.Context, *cloudfront.CreateStreamingDistributionInput, ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error)
	createStreamingDistributionWithContextMutex       sync.RWMutex
	createStreamingDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateStreamingDistributionInput
		arg3 []request.Option
	}
	createStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	createStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	CreateStreamingDistributionWithTagsStub        func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	createStreamingDistributionWithTagsMutex       sync.RWMutex
	createStreamingDistributionWithTagsArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}
	createStreamingDistributionWithTagsReturns struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	createStreamingDistributionWithTagsReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	CreateStreamingDistributionWithTagsRequestStub        func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput)
	createStreamingDistributionWithTagsRequestMutex       sync.RWMutex
	createStreamingDistributionWithTagsRequestArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}
	createStreamingDistributionWithTagsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}
	createStreamingDistributionWithTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}
	CreateStreamingDistributionWithTagsWithContextStub        func(context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	createStreamingDistributionWithTagsWithContextMutex       sync.RWMutex
	createStreamingDistributionWithTagsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.CreateStreamingDistributionWithTagsInput
		arg3 []request.Option
	}
	createStreamingDistributionWithTagsWithContextReturns struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	createStreamingDistributionWithTagsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	DeleteCachePolicyStub        func(*cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error)
	deleteCachePolicyMutex       sync.RWMutex
	deleteCachePolicyArgsForCall []struct {
		arg1 *cloudfront.DeleteCachePolicyInput
	}
	deleteCachePolicyReturns struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}
	deleteCachePolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}
	DeleteCachePolicyRequestStub        func(*cloudfront.DeleteCachePolicyInput) (*request.Request, *cloudfront.DeleteCachePolicyOutput)
	deleteCachePolicyRequestMutex       sync.RWMutex
	deleteCachePolicyRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteCachePolicyInput
	}
	deleteCachePolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCachePolicyOutput
	}
	deleteCachePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCachePolicyOutput
	}
	DeleteCachePolicyWithContextStub        func(context.Context, *cloudfront.DeleteCachePolicyInput, ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error)
	deleteCachePolicyWithContextMutex       sync.RWMutex
	deleteCachePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteCachePolicyInput
		arg3 []request.Option
	}
	deleteCachePolicyWithContextReturns struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}
	deleteCachePolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}
	DeleteCloudFrontOriginAccessIdentityStub        func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	deleteCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}
	deleteCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	deleteCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	DeleteCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	deleteCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}
	deleteCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}
	deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}
	DeleteCloudFrontOriginAccessIdentityWithContextStub        func(context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	deleteCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	deleteCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	DeleteDistributionStub        func(*cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error)
	deleteDistributionMutex       sync.RWMutex
	deleteDistributionArgsForCall []struct {
		arg1 *cloudfront.DeleteDistributionInput
	}
	deleteDistributionReturns struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	deleteDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	DeleteDistributionRequestStub        func(*cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput)
	deleteDistributionRequestMutex       sync.RWMutex
	deleteDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteDistributionInput
	}
	deleteDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}
	deleteDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}
	DeleteDistributionWithContextStub        func(context.Context, *cloudfront.DeleteDistributionInput, ...request.Option) (*cloudfront.DeleteDistributionOutput, error)
	deleteDistributionWithContextMutex       sync.RWMutex
	deleteDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteDistributionInput
		arg3 []request.Option
	}
	deleteDistributionWithContextReturns struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	deleteDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	DeleteFieldLevelEncryptionConfigStub        func(*cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	deleteFieldLevelEncryptionConfigMutex       sync.RWMutex
	deleteFieldLevelEncryptionConfigArgsForCall []struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput
	}
	deleteFieldLevelEncryptionConfigReturns struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}
	deleteFieldLevelEncryptionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}
	DeleteFieldLevelEncryptionConfigRequestStub        func(*cloudfront.DeleteFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	deleteFieldLevelEncryptionConfigRequestMutex       sync.RWMutex
	deleteFieldLevelEncryptionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput
	}
	deleteFieldLevelEncryptionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
	}
	deleteFieldLevelEncryptionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
	}
	DeleteFieldLevelEncryptionConfigWithContextStub        func(context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)
	deleteFieldLevelEncryptionConfigWithContextMutex       sync.RWMutex
	deleteFieldLevelEncryptionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}
	deleteFieldLevelEncryptionConfigWithContextReturns struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}
	deleteFieldLevelEncryptionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}
	DeleteFieldLevelEncryptionProfileStub        func(*cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	deleteFieldLevelEncryptionProfileMutex       sync.RWMutex
	deleteFieldLevelEncryptionProfileArgsForCall []struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput
	}
	deleteFieldLevelEncryptionProfileReturns struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}
	deleteFieldLevelEncryptionProfileReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}
	DeleteFieldLevelEncryptionProfileRequestStub        func(*cloudfront.DeleteFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	deleteFieldLevelEncryptionProfileRequestMutex       sync.RWMutex
	deleteFieldLevelEncryptionProfileRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput
	}
	deleteFieldLevelEncryptionProfileRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
	}
	deleteFieldLevelEncryptionProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
	}
	DeleteFieldLevelEncryptionProfileWithContextStub        func(context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)
	deleteFieldLevelEncryptionProfileWithContextMutex       sync.RWMutex
	deleteFieldLevelEncryptionProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}
	deleteFieldLevelEncryptionProfileWithContextReturns struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}
	deleteFieldLevelEncryptionProfileWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}
	DeleteFunctionStub        func(*cloudfront.DeleteFunctionInput) (*cloudfront.DeleteFunctionOutput, error)
	deleteFunctionMutex       sync.RWMutex
	deleteFunctionArgsForCall []struct {
		arg1 *cloudfront.DeleteFunctionInput
	}
	deleteFunctionReturns struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}
	deleteFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}
	DeleteFunctionRequestStub        func(*cloudfront.DeleteFunctionInput) (*request.Request, *cloudfront.DeleteFunctionOutput)
	deleteFunctionRequestMutex       sync.RWMutex
	deleteFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteFunctionInput
	}
	deleteFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFunctionOutput
	}
	deleteFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFunctionOutput
	}
	DeleteFunctionWithContextStub        func(context.Context, *cloudfront.DeleteFunctionInput, ...request.Option) (*cloudfront.DeleteFunctionOutput, error)
	deleteFunctionWithContextMutex       sync.RWMutex
	deleteFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFunctionInput
		arg3 []request.Option
	}
	deleteFunctionWithContextReturns struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}
	deleteFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}
	DeleteKeyGroupStub        func(*cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error)
	deleteKeyGroupMutex       sync.RWMutex
	deleteKeyGroupArgsForCall []struct {
		arg1 *cloudfront.DeleteKeyGroupInput
	}
	deleteKeyGroupReturns struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}
	deleteKeyGroupReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}
	DeleteKeyGroupRequestStub        func(*cloudfront.DeleteKeyGroupInput) (*request.Request, *cloudfront.DeleteKeyGroupOutput)
	deleteKeyGroupRequestMutex       sync.RWMutex
	deleteKeyGroupRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteKeyGroupInput
	}
	deleteKeyGroupRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteKeyGroupOutput
	}
	deleteKeyGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteKeyGroupOutput
	}
	DeleteKeyGroupWithContextStub        func(context.Context, *cloudfront.DeleteKeyGroupInput, ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error)
	deleteKeyGroupWithContextMutex       sync.RWMutex
	deleteKeyGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteKeyGroupInput
		arg3 []request.Option
	}
	deleteKeyGroupWithContextReturns struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}
	deleteKeyGroupWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}
	DeleteMonitoringSubscriptionStub        func(*cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)
	deleteMonitoringSubscriptionMutex       sync.RWMutex
	deleteMonitoringSubscriptionArgsForCall []struct {
		arg1 *cloudfront.DeleteMonitoringSubscriptionInput
	}
	deleteMonitoringSubscriptionReturns struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}
	deleteMonitoringSubscriptionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}
	DeleteMonitoringSubscriptionRequestStub        func(*cloudfront.DeleteMonitoringSubscriptionInput) (*request.Request, *cloudfront.DeleteMonitoringSubscriptionOutput)
	deleteMonitoringSubscriptionRequestMutex       sync.RWMutex
	deleteMonitoringSubscriptionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteMonitoringSubscriptionInput
	}
	deleteMonitoringSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteMonitoringSubscriptionOutput
	}
	deleteMonitoringSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteMonitoringSubscriptionOutput
	}
	DeleteMonitoringSubscriptionWithContextStub        func(context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)
	deleteMonitoringSubscriptionWithContextMutex       sync.RWMutex
	deleteMonitoringSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteMonitoringSubscriptionInput
		arg3 []request.Option
	}
	deleteMonitoringSubscriptionWithContextReturns struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}
	deleteMonitoringSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}
	DeleteOriginRequestPolicyStub        func(*cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error)
	deleteOriginRequestPolicyMutex       sync.RWMutex
	deleteOriginRequestPolicyArgsForCall []struct {
		arg1 *cloudfront.DeleteOriginRequestPolicyInput
	}
	deleteOriginRequestPolicyReturns struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}
	deleteOriginRequestPolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}
	DeleteOriginRequestPolicyRequestStub        func(*cloudfront.DeleteOriginRequestPolicyInput) (*request.Request, *cloudfront.DeleteOriginRequestPolicyOutput)
	deleteOriginRequestPolicyRequestMutex       sync.RWMutex
	deleteOriginRequestPolicyRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteOriginRequestPolicyInput
	}
	deleteOriginRequestPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteOriginRequestPolicyOutput
	}
	deleteOriginRequestPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteOriginRequestPolicyOutput
	}
	DeleteOriginRequestPolicyWithContextStub        func(context.Context, *cloudfront.DeleteOriginRequestPolicyInput, ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error)
	deleteOriginRequestPolicyWithContextMutex       sync.RWMutex
	deleteOriginRequestPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteOriginRequestPolicyInput
		arg3 []request.Option
	}
	deleteOriginRequestPolicyWithContextReturns struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}
	deleteOriginRequestPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}
	DeletePublicKeyStub        func(*cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error)
	deletePublicKeyMutex       sync.RWMutex
	deletePublicKeyArgsForCall []struct {
		arg1 *cloudfront.DeletePublicKeyInput
	}
	deletePublicKeyReturns struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}
	deletePublicKeyReturnsOnCall map[int]struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}
	DeletePublicKeyRequestStub        func(*cloudfront.DeletePublicKeyInput) (*request.Request, *cloudfront.DeletePublicKeyOutput)
	deletePublicKeyRequestMutex       sync.RWMutex
	deletePublicKeyRequestArgsForCall []struct {
		arg1 *cloudfront.DeletePublicKeyInput
	}
	deletePublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeletePublicKeyOutput
	}
	deletePublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeletePublicKeyOutput
	}
	DeletePublicKeyWithContextStub        func(context.Context, *cloudfront.DeletePublicKeyInput, ...request.Option) (*cloudfront.DeletePublicKeyOutput, error)
	deletePublicKeyWithContextMutex       sync.RWMutex
	deletePublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeletePublicKeyInput
		arg3 []request.Option
	}
	deletePublicKeyWithContextReturns struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}
	deletePublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}
	DeleteRealtimeLogConfigStub        func(*cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error)
	deleteRealtimeLogConfigMutex       sync.RWMutex
	deleteRealtimeLogConfigArgsForCall []struct {
		arg1 *cloudfront.DeleteRealtimeLogConfigInput
	}
	deleteRealtimeLogConfigReturns struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}
	deleteRealtimeLogConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}
	DeleteRealtimeLogConfigRequestStub        func(*cloudfront.DeleteRealtimeLogConfigInput) (*request.Request, *cloudfront.DeleteRealtimeLogConfigOutput)
	deleteRealtimeLogConfigRequestMutex       sync.RWMutex
	deleteRealtimeLogConfigRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteRealtimeLogConfigInput
	}
	deleteRealtimeLogConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteRealtimeLogConfigOutput
	}
	deleteRealtimeLogConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteRealtimeLogConfigOutput
	}
	DeleteRealtimeLogConfigWithContextStub        func(context.Context, *cloudfront.DeleteRealtimeLogConfigInput, ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error)
	deleteRealtimeLogConfigWithContextMutex       sync.RWMutex
	deleteRealtimeLogConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteRealtimeLogConfigInput
		arg3 []request.Option
	}
	deleteRealtimeLogConfigWithContextReturns struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}
	deleteRealtimeLogConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}
	DeleteStreamingDistributionStub        func(*cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error)
	deleteStreamingDistributionMutex       sync.RWMutex
	deleteStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}
	deleteStreamingDistributionReturns struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	deleteStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	DeleteStreamingDistributionRequestStub        func(*cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput)
	deleteStreamingDistributionRequestMutex       sync.RWMutex
	deleteStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}
	deleteStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}
	deleteStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}
	DeleteStreamingDistributionWithContextStub        func(context.Context, *cloudfront.DeleteStreamingDistributionInput, ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error)
	deleteStreamingDistributionWithContextMutex       sync.RWMutex
	deleteStreamingDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteStreamingDistributionInput
		arg3 []request.Option
	}
	deleteStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	deleteStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	DescribeFunctionStub        func(*cloudfront.DescribeFunctionInput) (*cloudfront.DescribeFunctionOutput, error)
	describeFunctionMutex       sync.RWMutex
	describeFunctionArgsForCall []struct {
		arg1 *cloudfront.DescribeFunctionInput
	}
	describeFunctionReturns struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}
	describeFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}
	DescribeFunctionRequestStub        func(*cloudfront.DescribeFunctionInput) (*request.Request, *cloudfront.DescribeFunctionOutput)
	describeFunctionRequestMutex       sync.RWMutex
	describeFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.DescribeFunctionInput
	}
	describeFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DescribeFunctionOutput
	}
	describeFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DescribeFunctionOutput
	}
	DescribeFunctionWithContextStub        func(context.Context, *cloudfront.DescribeFunctionInput, ...request.Option) (*cloudfront.DescribeFunctionOutput, error)
	describeFunctionWithContextMutex       sync.RWMutex
	describeFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.DescribeFunctionInput
		arg3 []request.Option
	}
	describeFunctionWithContextReturns struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}
	describeFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}
	GetCachePolicyStub        func(*cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error)
	getCachePolicyMutex       sync.RWMutex
	getCachePolicyArgsForCall []struct {
		arg1 *cloudfront.GetCachePolicyInput
	}
	getCachePolicyReturns struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}
	getCachePolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}
	GetCachePolicyConfigStub        func(*cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error)
	getCachePolicyConfigMutex       sync.RWMutex
	getCachePolicyConfigArgsForCall []struct {
		arg1 *cloudfront.GetCachePolicyConfigInput
	}
	getCachePolicyConfigReturns struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}
	getCachePolicyConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}
	GetCachePolicyConfigRequestStub        func(*cloudfront.GetCachePolicyConfigInput) (*request.Request, *cloudfront.GetCachePolicyConfigOutput)
	getCachePolicyConfigRequestMutex       sync.RWMutex
	getCachePolicyConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetCachePolicyConfigInput
	}
	getCachePolicyConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyConfigOutput
	}
	getCachePolicyConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyConfigOutput
	}
	GetCachePolicyConfigWithContextStub        func(context.Context, *cloudfront.GetCachePolicyConfigInput, ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error)
	getCachePolicyConfigWithContextMutex       sync.RWMutex
	getCachePolicyConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetCachePolicyConfigInput
		arg3 []request.Option
	}
	getCachePolicyConfigWithContextReturns struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}
	getCachePolicyConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}
	GetCachePolicyRequestStub        func(*cloudfront.GetCachePolicyInput) (*request.Request, *cloudfront.GetCachePolicyOutput)
	getCachePolicyRequestMutex       sync.RWMutex
	getCachePolicyRequestArgsForCall []struct {
		arg1 *cloudfront.GetCachePolicyInput
	}
	getCachePolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyOutput
	}
	getCachePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyOutput
	}
	GetCachePolicyWithContextStub        func(context.Context, *cloudfront.GetCachePolicyInput, ...request.Option) (*cloudfront.GetCachePolicyOutput, error)
	getCachePolicyWithContextMutex       sync.RWMutex
	getCachePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetCachePolicyInput
		arg3 []request.Option
	}
	getCachePolicyWithContextReturns struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}
	getCachePolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	getCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}
	getCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityConfigStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	getCloudFrontOriginAccessIdentityConfigMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}
	getCloudFrontOriginAccessIdentityConfigReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityConfigRequestStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	getCloudFrontOriginAccessIdentityConfigRequestMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}
	getCloudFrontOriginAccessIdentityConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}
	getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}
	GetCloudFrontOriginAccessIdentityConfigWithContextStub        func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	getCloudFrontOriginAccessIdentityConfigWithContextMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
		arg3 []request.Option
	}
	getCloudFrontOriginAccessIdentityConfigWithContextReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	getCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}
	getCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}
	getCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}
	GetCloudFrontOriginAccessIdentityWithContextStub        func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	getCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	getCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	GetDistributionStub        func(*cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error)
	getDistributionMutex       sync.RWMutex
	getDistributionArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	getDistributionReturns struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	getDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	GetDistributionConfigStub        func(*cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error)
	getDistributionConfigMutex       sync.RWMutex
	getDistributionConfigArgsForCall []struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}
	getDistributionConfigReturns struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	getDistributionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	GetDistributionConfigRequestStub        func(*cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput)
	getDistributionConfigRequestMutex       sync.RWMutex
	getDistributionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}
	getDistributionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}
	getDistributionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}
	GetDistributionConfigWithContextStub        func(context.Context, *cloudfront.GetDistributionConfigInput, ...request.Option) (*cloudfront.GetDistributionConfigOutput, error)
	getDistributionConfigWithContextMutex       sync.RWMutex
	getDistributionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionConfigInput
		arg3 []request.Option
	}
	getDistributionConfigWithContextReturns struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	getDistributionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	GetDistributionRequestStub        func(*cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput)
	getDistributionRequestMutex       sync.RWMutex
	getDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	getDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}
	getDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}
	GetDistributionWithContextStub        func(context.Context, *cloudfront.GetDistributionInput, ...request.Option) (*cloudfront.GetDistributionOutput, error)
	getDistributionWithContextMutex       sync.RWMutex
	getDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.Option
	}
	getDistributionWithContextReturns struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	getDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	GetFieldLevelEncryptionStub        func(*cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	getFieldLevelEncryptionMutex       sync.RWMutex
	getFieldLevelEncryptionArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionInput
	}
	getFieldLevelEncryptionReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}
	getFieldLevelEncryptionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}
	GetFieldLevelEncryptionConfigStub        func(*cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	getFieldLevelEncryptionConfigMutex       sync.RWMutex
	getFieldLevelEncryptionConfigArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionConfigInput
	}
	getFieldLevelEncryptionConfigReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}
	getFieldLevelEncryptionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}
	GetFieldLevelEncryptionConfigRequestStub        func(*cloudfront.GetFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionConfigOutput)
	getFieldLevelEncryptionConfigRequestMutex       sync.RWMutex
	getFieldLevelEncryptionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionConfigInput
	}
	getFieldLevelEncryptionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionConfigOutput
	}
	getFieldLevelEncryptionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionConfigOutput
	}
	GetFieldLevelEncryptionConfigWithContextStub        func(context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)
	getFieldLevelEncryptionConfigWithContextMutex       sync.RWMutex
	getFieldLevelEncryptionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}
	getFieldLevelEncryptionConfigWithContextReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}
	getFieldLevelEncryptionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}
	GetFieldLevelEncryptionProfileStub        func(*cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	getFieldLevelEncryptionProfileMutex       sync.RWMutex
	getFieldLevelEncryptionProfileArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileInput
	}
	getFieldLevelEncryptionProfileReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}
	getFieldLevelEncryptionProfileReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}
	GetFieldLevelEncryptionProfileConfigStub        func(*cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	getFieldLevelEncryptionProfileConfigMutex       sync.RWMutex
	getFieldLevelEncryptionProfileConfigArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
	}
	getFieldLevelEncryptionProfileConfigReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}
	getFieldLevelEncryptionProfileConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}
	GetFieldLevelEncryptionProfileConfigRequestStub        func(*cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	getFieldLevelEncryptionProfileConfigRequestMutex       sync.RWMutex
	getFieldLevelEncryptionProfileConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
	}
	getFieldLevelEncryptionProfileConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	}
	getFieldLevelEncryptionProfileConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	}
	GetFieldLevelEncryptionProfileConfigWithContextStub        func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)
	getFieldLevelEncryptionProfileConfigWithContextMutex       sync.RWMutex
	getFieldLevelEncryptionProfileConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
		arg3 []request.Option
	}
	getFieldLevelEncryptionProfileConfigWithContextReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}
	getFieldLevelEncryptionProfileConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}
	GetFieldLevelEncryptionProfileRequestStub        func(*cloudfront.GetFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileOutput)
	getFieldLevelEncryptionProfileRequestMutex       sync.RWMutex
	getFieldLevelEncryptionProfileRequestArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileInput
	}
	getFieldLevelEncryptionProfileRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileOutput
	}
	getFieldLevelEncryptionProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileOutput
	}
	GetFieldLevelEncryptionProfileWithContextStub        func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)
	getFieldLevelEncryptionProfileWithContextMutex       sync.RWMutex
	getFieldLevelEncryptionProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}
	getFieldLevelEncryptionProfileWithContextReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}
	getFieldLevelEncryptionProfileWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}
	GetFieldLevelEncryptionRequestStub        func(*cloudfront.GetFieldLevelEncryptionInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionOutput)
	getFieldLevelEncryptionRequestMutex       sync.RWMutex
	getFieldLevelEncryptionRequestArgsForCall []struct {
		arg1 *cloudfront.GetFieldLevelEncryptionInput
	}
	getFieldLevelEncryptionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionOutput
	}
	getFieldLevelEncryptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionOutput
	}
	GetFieldLevelEncryptionWithContextStub        func(context.Context, *cloudfront.GetFieldLevelEncryptionInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error)
	getFieldLevelEncryptionWithContextMutex       sync.RWMutex
	getFieldLevelEncryptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionInput
		arg3 []request.Option
	}
	getFieldLevelEncryptionWithContextReturns struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}
	getFieldLevelEncryptionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}
	GetFunctionStub        func(*cloudfront.GetFunctionInput) (*cloudfront.GetFunctionOutput, error)
	getFunctionMutex       sync.RWMutex
	getFunctionArgsForCall []struct {
		arg1 *cloudfront.GetFunctionInput
	}
	getFunctionReturns struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}
	getFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}
	GetFunctionRequestStub        func(*cloudfront.GetFunctionInput) (*request.Request, *cloudfront.GetFunctionOutput)
	getFunctionRequestMutex       sync.RWMutex
	getFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.GetFunctionInput
	}
	getFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetFunctionOutput
	}
	getFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetFunctionOutput
	}
	GetFunctionWithContextStub        func(context.Context, *cloudfront.GetFunctionInput, ...request.Option) (*cloudfront.GetFunctionOutput, error)
	getFunctionWithContextMutex       sync.RWMutex
	getFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetFunctionInput
		arg3 []request.Option
	}
	getFunctionWithContextReturns struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}
	getFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}
	GetInvalidationStub        func(*cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error)
	getInvalidationMutex       sync.RWMutex
	getInvalidationArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	getInvalidationReturns struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	getInvalidationReturnsOnCall map[int]struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	GetInvalidationRequestStub        func(*cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput)
	getInvalidationRequestMutex       sync.RWMutex
	getInvalidationRequestArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	getInvalidationRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}
	getInvalidationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}
	GetInvalidationWithContextStub        func(context.Context, *cloudfront.GetInvalidationInput, ...request.Option) (*cloudfront.GetInvalidationOutput, error)
	getInvalidationWithContextMutex       sync.RWMutex
	getInvalidationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.Option
	}
	getInvalidationWithContextReturns struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	getInvalidationWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	GetKeyGroupStub        func(*cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error)
	getKeyGroupMutex       sync.RWMutex
	getKeyGroupArgsForCall []struct {
		arg1 *cloudfront.GetKeyGroupInput
	}
	getKeyGroupReturns struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}
	getKeyGroupReturnsOnCall map[int]struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}
	GetKeyGroupConfigStub        func(*cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error)
	getKeyGroupConfigMutex       sync.RWMutex
	getKeyGroupConfigArgsForCall []struct {
		arg1 *cloudfront.GetKeyGroupConfigInput
	}
	getKeyGroupConfigReturns struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}
	getKeyGroupConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}
	GetKeyGroupConfigRequestStub        func(*cloudfront.GetKeyGroupConfigInput) (*request.Request, *cloudfront.GetKeyGroupConfigOutput)
	getKeyGroupConfigRequestMutex       sync.RWMutex
	getKeyGroupConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetKeyGroupConfigInput
	}
	getKeyGroupConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupConfigOutput
	}
	getKeyGroupConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupConfigOutput
	}
	GetKeyGroupConfigWithContextStub        func(context.Context, *cloudfront.GetKeyGroupConfigInput, ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error)
	getKeyGroupConfigWithContextMutex       sync.RWMutex
	getKeyGroupConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetKeyGroupConfigInput
		arg3 []request.Option
	}
	getKeyGroupConfigWithContextReturns struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}
	getKeyGroupConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}
	GetKeyGroupRequestStub        func(*cloudfront.GetKeyGroupInput) (*request.Request, *cloudfront.GetKeyGroupOutput)
	getKeyGroupRequestMutex       sync.RWMutex
	getKeyGroupRequestArgsForCall []struct {
		arg1 *cloudfront.GetKeyGroupInput
	}
	getKeyGroupRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupOutput
	}
	getKeyGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupOutput
	}
	GetKeyGroupWithContextStub        func(context.Context, *cloudfront.GetKeyGroupInput, ...request.Option) (*cloudfront.GetKeyGroupOutput, error)
	getKeyGroupWithContextMutex       sync.RWMutex
	getKeyGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetKeyGroupInput
		arg3 []request.Option
	}
	getKeyGroupWithContextReturns struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}
	getKeyGroupWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}
	GetMonitoringSubscriptionStub        func(*cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error)
	getMonitoringSubscriptionMutex       sync.RWMutex
	getMonitoringSubscriptionArgsForCall []struct {
		arg1 *cloudfront.GetMonitoringSubscriptionInput
	}
	getMonitoringSubscriptionReturns struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}
	getMonitoringSubscriptionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}
	GetMonitoringSubscriptionRequestStub        func(*cloudfront.GetMonitoringSubscriptionInput) (*request.Request, *cloudfront.GetMonitoringSubscriptionOutput)
	getMonitoringSubscriptionRequestMutex       sync.RWMutex
	getMonitoringSubscriptionRequestArgsForCall []struct {
		arg1 *cloudfront.GetMonitoringSubscriptionInput
	}
	getMonitoringSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetMonitoringSubscriptionOutput
	}
	getMonitoringSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetMonitoringSubscriptionOutput
	}
	GetMonitoringSubscriptionWithContextStub        func(context.Context, *cloudfront.GetMonitoringSubscriptionInput, ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error)
	getMonitoringSubscriptionWithContextMutex       sync.RWMutex
	getMonitoringSubscriptionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetMonitoringSubscriptionInput
		arg3 []request.Option
	}
	getMonitoringSubscriptionWithContextReturns struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}
	getMonitoringSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}
	GetOriginRequestPolicyStub        func(*cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error)
	getOriginRequestPolicyMutex       sync.RWMutex
	getOriginRequestPolicyArgsForCall []struct {
		arg1 *cloudfront.GetOriginRequestPolicyInput
	}
	getOriginRequestPolicyReturns struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}
	getOriginRequestPolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}
	GetOriginRequestPolicyConfigStub        func(*cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)
	getOriginRequestPolicyConfigMutex       sync.RWMutex
	getOriginRequestPolicyConfigArgsForCall []struct {
		arg1 *cloudfront.GetOriginRequestPolicyConfigInput
	}
	getOriginRequestPolicyConfigReturns struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}
	getOriginRequestPolicyConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}
	GetOriginRequestPolicyConfigRequestStub        func(*cloudfront.GetOriginRequestPolicyConfigInput) (*request.Request, *cloudfront.GetOriginRequestPolicyConfigOutput)
	getOriginRequestPolicyConfigRequestMutex       sync.RWMutex
	getOriginRequestPolicyConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetOriginRequestPolicyConfigInput
	}
	getOriginRequestPolicyConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyConfigOutput
	}
	getOriginRequestPolicyConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyConfigOutput
	}
	GetOriginRequestPolicyConfigWithContextStub        func(context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)
	getOriginRequestPolicyConfigWithContextMutex       sync.RWMutex
	getOriginRequestPolicyConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetOriginRequestPolicyConfigInput
		arg3 []request.Option
	}
	getOriginRequestPolicyConfigWithContextReturns struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}
	getOriginRequestPolicyConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}
	GetOriginRequestPolicyRequestStub        func(*cloudfront.GetOriginRequestPolicyInput) (*request.Request, *cloudfront.GetOriginRequestPolicyOutput)
	getOriginRequestPolicyRequestMutex       sync.RWMutex
	getOriginRequestPolicyRequestArgsForCall []struct {
		arg1 *cloudfront.GetOriginRequestPolicyInput
	}
	getOriginRequestPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyOutput
	}
	getOriginRequestPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyOutput
	}
	GetOriginRequestPolicyWithContextStub        func(context.Context, *cloudfront.GetOriginRequestPolicyInput, ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error)
	getOriginRequestPolicyWithContextMutex       sync.RWMutex
	getOriginRequestPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetOriginRequestPolicyInput
		arg3 []request.Option
	}
	getOriginRequestPolicyWithContextReturns struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}
	getOriginRequestPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}
	GetPublicKeyStub        func(*cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error)
	getPublicKeyMutex       sync.RWMutex
	getPublicKeyArgsForCall []struct {
		arg1 *cloudfront.GetPublicKeyInput
	}
	getPublicKeyReturns struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}
	getPublicKeyReturnsOnCall map[int]struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}
	GetPublicKeyConfigStub        func(*cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error)
	getPublicKeyConfigMutex       sync.RWMutex
	getPublicKeyConfigArgsForCall []struct {
		arg1 *cloudfront.GetPublicKeyConfigInput
	}
	getPublicKeyConfigReturns struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}
	getPublicKeyConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}
	GetPublicKeyConfigRequestStub        func(*cloudfront.GetPublicKeyConfigInput) (*request.Request, *cloudfront.GetPublicKeyConfigOutput)
	getPublicKeyConfigRequestMutex       sync.RWMutex
	getPublicKeyConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetPublicKeyConfigInput
	}
	getPublicKeyConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyConfigOutput
	}
	getPublicKeyConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyConfigOutput
	}
	GetPublicKeyConfigWithContextStub        func(context.Context, *cloudfront.GetPublicKeyConfigInput, ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error)
	getPublicKeyConfigWithContextMutex       sync.RWMutex
	getPublicKeyConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetPublicKeyConfigInput
		arg3 []request.Option
	}
	getPublicKeyConfigWithContextReturns struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}
	getPublicKeyConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}
	GetPublicKeyRequestStub        func(*cloudfront.GetPublicKeyInput) (*request.Request, *cloudfront.GetPublicKeyOutput)
	getPublicKeyRequestMutex       sync.RWMutex
	getPublicKeyRequestArgsForCall []struct {
		arg1 *cloudfront.GetPublicKeyInput
	}
	getPublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyOutput
	}
	getPublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyOutput
	}
	GetPublicKeyWithContextStub        func(context.Context, *cloudfront.GetPublicKeyInput, ...request.Option) (*cloudfront.GetPublicKeyOutput, error)
	getPublicKeyWithContextMutex       sync.RWMutex
	getPublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetPublicKeyInput
		arg3 []request.Option
	}
	getPublicKeyWithContextReturns struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}
	getPublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}
	GetRealtimeLogConfigStub        func(*cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error)
	getRealtimeLogConfigMutex       sync.RWMutex
	getRealtimeLogConfigArgsForCall []struct {
		arg1 *cloudfront.GetRealtimeLogConfigInput
	}
	getRealtimeLogConfigReturns struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}
	getRealtimeLogConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}
	GetRealtimeLogConfigRequestStub        func(*cloudfront.GetRealtimeLogConfigInput) (*request.Request, *cloudfront.GetRealtimeLogConfigOutput)
	getRealtimeLogConfigRequestMutex       sync.RWMutex
	getRealtimeLogConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetRealtimeLogConfigInput
	}
	getRealtimeLogConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetRealtimeLogConfigOutput
	}
	getRealtimeLogConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetRealtimeLogConfigOutput
	}
	GetRealtimeLogConfigWithContextStub        func(context.Context, *cloudfront.GetRealtimeLogConfigInput, ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error)
	getRealtimeLogConfigWithContextMutex       sync.RWMutex
	getRealtimeLogConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetRealtimeLogConfigInput
		arg3 []request.Option
	}
	getRealtimeLogConfigWithContextReturns struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}
	getRealtimeLogConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}
	GetStreamingDistributionStub        func(*cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error)
	getStreamingDistributionMutex       sync.RWMutex
	getStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	getStreamingDistributionReturns struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	getStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	GetStreamingDistributionConfigStub        func(*cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	getStreamingDistributionConfigMutex       sync.RWMutex
	getStreamingDistributionConfigArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}
	getStreamingDistributionConfigReturns struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	getStreamingDistributionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	GetStreamingDistributionConfigRequestStub        func(*cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput)
	getStreamingDistributionConfigRequestMutex       sync.RWMutex
	getStreamingDistributionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}
	getStreamingDistributionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}
	getStreamingDistributionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}
	GetStreamingDistributionConfigWithContextStub        func(context.Context, *cloudfront.GetStreamingDistributionConfigInput, ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	getStreamingDistributionConfigWithContextMutex       sync.RWMutex
	getStreamingDistributionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionConfigInput
		arg3 []request.Option
	}
	getStreamingDistributionConfigWithContextReturns struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	getStreamingDistributionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	GetStreamingDistributionRequestStub        func(*cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput)
	getStreamingDistributionRequestMutex       sync.RWMutex
	getStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	getStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}
	getStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}
	GetStreamingDistributionWithContextStub        func(context.Context, *cloudfront.GetStreamingDistributionInput, ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error)
	getStreamingDistributionWithContextMutex       sync.RWMutex
	getStreamingDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.Option
	}
	getStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	getStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	ListCachePoliciesStub        func(*cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error)
	listCachePoliciesMutex       sync.RWMutex
	listCachePoliciesArgsForCall []struct {
		arg1 *cloudfront.ListCachePoliciesInput
	}
	listCachePoliciesReturns struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}
	listCachePoliciesReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}
	ListCachePoliciesRequestStub        func(*cloudfront.ListCachePoliciesInput) (*request.Request, *cloudfront.ListCachePoliciesOutput)
	listCachePoliciesRequestMutex       sync.RWMutex
	listCachePoliciesRequestArgsForCall []struct {
		arg1 *cloudfront.ListCachePoliciesInput
	}
	listCachePoliciesRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListCachePoliciesOutput
	}
	listCachePoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListCachePoliciesOutput
	}
	ListCachePoliciesWithContextStub        func(context.Context, *cloudfront.ListCachePoliciesInput, ...request.Option) (*cloudfront.ListCachePoliciesOutput, error)
	listCachePoliciesWithContextMutex       sync.RWMutex
	listCachePoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListCachePoliciesInput
		arg3 []request.Option
	}
	listCachePoliciesWithContextReturns struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}
	listCachePoliciesWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}
	ListCloudFrontOriginAccessIdentitiesStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	listCloudFrontOriginAccessIdentitiesMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}
	listCloudFrontOriginAccessIdentitiesReturns struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	listCloudFrontOriginAccessIdentitiesReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	ListCloudFrontOriginAccessIdentitiesPagesStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error
	listCloudFrontOriginAccessIdentitiesPagesMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesPagesArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
	}
	listCloudFrontOriginAccessIdentitiesPagesReturns struct {
		result1 error
	}
	listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListCloudFrontOriginAccessIdentitiesPagesWithContextStub        func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, ...request.Option) error
	listCloudFrontOriginAccessIdentitiesPagesWithContextMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
		arg4 []request.Option
	}
	listCloudFrontOriginAccessIdentitiesPagesWithContextReturns struct {
		result1 error
	}
	listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListCloudFrontOriginAccessIdentitiesRequestStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	listCloudFrontOriginAccessIdentitiesRequestMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesRequestArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}
	listCloudFrontOriginAccessIdentitiesRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}
	listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}
	ListCloudFrontOriginAccessIdentitiesWithContextStub        func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	listCloudFrontOriginAccessIdentitiesWithContextMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 []request.Option
	}
	listCloudFrontOriginAccessIdentitiesWithContextReturns struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	ListDistributionsStub        func(*cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error)
	listDistributionsMutex       sync.RWMutex
	listDistributionsArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
	}
	listDistributionsReturns struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	listDistributionsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	ListDistributionsByCachePolicyIdStub        func(*cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)
	listDistributionsByCachePolicyIdMutex       sync.RWMutex
	listDistributionsByCachePolicyIdArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByCachePolicyIdInput
	}
	listDistributionsByCachePolicyIdReturns struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}
	listDistributionsByCachePolicyIdReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}
	ListDistributionsByCachePolicyIdRequestStub        func(*cloudfront.ListDistributionsByCachePolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByCachePolicyIdOutput)
	listDistributionsByCachePolicyIdRequestMutex       sync.RWMutex
	listDistributionsByCachePolicyIdRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByCachePolicyIdInput
	}
	listDistributionsByCachePolicyIdRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByCachePolicyIdOutput
	}
	listDistributionsByCachePolicyIdRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByCachePolicyIdOutput
	}
	ListDistributionsByCachePolicyIdWithContextStub        func(context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)
	listDistributionsByCachePolicyIdWithContextMutex       sync.RWMutex
	listDistributionsByCachePolicyIdWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByCachePolicyIdInput
		arg3 []request.Option
	}
	listDistributionsByCachePolicyIdWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}
	listDistributionsByCachePolicyIdWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}
	ListDistributionsByKeyGroupStub        func(*cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error)
	listDistributionsByKeyGroupMutex       sync.RWMutex
	listDistributionsByKeyGroupArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByKeyGroupInput
	}
	listDistributionsByKeyGroupReturns struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}
	listDistributionsByKeyGroupReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}
	ListDistributionsByKeyGroupRequestStub        func(*cloudfront.ListDistributionsByKeyGroupInput) (*request.Request, *cloudfront.ListDistributionsByKeyGroupOutput)
	listDistributionsByKeyGroupRequestMutex       sync.RWMutex
	listDistributionsByKeyGroupRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByKeyGroupInput
	}
	listDistributionsByKeyGroupRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByKeyGroupOutput
	}
	listDistributionsByKeyGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByKeyGroupOutput
	}
	ListDistributionsByKeyGroupWithContextStub        func(context.Context, *cloudfront.ListDistributionsByKeyGroupInput, ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error)
	listDistributionsByKeyGroupWithContextMutex       sync.RWMutex
	listDistributionsByKeyGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByKeyGroupInput
		arg3 []request.Option
	}
	listDistributionsByKeyGroupWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}
	listDistributionsByKeyGroupWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}
	ListDistributionsByOriginRequestPolicyIdStub        func(*cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)
	listDistributionsByOriginRequestPolicyIdMutex       sync.RWMutex
	listDistributionsByOriginRequestPolicyIdArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
	}
	listDistributionsByOriginRequestPolicyIdReturns struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}
	listDistributionsByOriginRequestPolicyIdReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}
	ListDistributionsByOriginRequestPolicyIdRequestStub        func(*cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
	listDistributionsByOriginRequestPolicyIdRequestMutex       sync.RWMutex
	listDistributionsByOriginRequestPolicyIdRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
	}
	listDistributionsByOriginRequestPolicyIdRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	}
	listDistributionsByOriginRequestPolicyIdRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	}
	ListDistributionsByOriginRequestPolicyIdWithContextStub        func(context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)
	listDistributionsByOriginRequestPolicyIdWithContextMutex       sync.RWMutex
	listDistributionsByOriginRequestPolicyIdWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
		arg3 []request.Option
	}
	listDistributionsByOriginRequestPolicyIdWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}
	listDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}
	ListDistributionsByRealtimeLogConfigStub        func(*cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)
	listDistributionsByRealtimeLogConfigMutex       sync.RWMutex
	listDistributionsByRealtimeLogConfigArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput
	}
	listDistributionsByRealtimeLogConfigReturns struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}
	listDistributionsByRealtimeLogConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}
	ListDistributionsByRealtimeLogConfigRequestStub        func(*cloudfront.ListDistributionsByRealtimeLogConfigInput) (*request.Request, *cloudfront.ListDistributionsByRealtimeLogConfigOutput)
	listDistributionsByRealtimeLogConfigRequestMutex       sync.RWMutex
	listDistributionsByRealtimeLogConfigRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput
	}
	listDistributionsByRealtimeLogConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
	}
	listDistributionsByRealtimeLogConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
	}
	ListDistributionsByRealtimeLogConfigWithContextStub        func(context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)
	listDistributionsByRealtimeLogConfigWithContextMutex       sync.RWMutex
	listDistributionsByRealtimeLogConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByRealtimeLogConfigInput
		arg3 []request.Option
	}
	listDistributionsByRealtimeLogConfigWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}
	listDistributionsByRealtimeLogConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}
	ListDistributionsByWebACLIdStub        func(*cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	listDistributionsByWebACLIdMutex       sync.RWMutex
	listDistributionsByWebACLIdArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}
	listDistributionsByWebACLIdReturns struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	listDistributionsByWebACLIdReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	ListDistributionsByWebACLIdRequestStub        func(*cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput)
	listDistributionsByWebACLIdRequestMutex       sync.RWMutex
	listDistributionsByWebACLIdRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}
	listDistributionsByWebACLIdRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}
	listDistributionsByWebACLIdRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}
	ListDistributionsByWebACLIdWithContextStub        func(context.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	listDistributionsByWebACLIdWithContextMutex       sync.RWMutex
	listDistributionsByWebACLIdWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByWebACLIdInput
		arg3 []request.Option
	}
	listDistributionsByWebACLIdWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	listDistributionsByWebACLIdWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	ListDistributionsPagesStub        func(*cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool) error
	listDistributionsPagesMutex       sync.RWMutex
	listDistributionsPagesArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
		arg2 func(*cloudfront.ListDistributionsOutput, bool) bool
	}
	listDistributionsPagesReturns struct {
		result1 error
	}
	listDistributionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListDistributionsPagesWithContextStub        func(context.Context, *cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool, ...request.Option) error
	listDistributionsPagesWithContextMutex       sync.RWMutex
	listDistributionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 func(*cloudfront.ListDistributionsOutput, bool) bool
		arg4 []request.Option
	}
	listDistributionsPagesWithContextReturns struct {
		result1 error
	}
	listDistributionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDistributionsRequestStub        func(*cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput)
	listDistributionsRequestMutex       sync.RWMutex
	listDistributionsRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
	}
	listDistributionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}
	listDistributionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}
	ListDistributionsWithContextStub        func(context.Context, *cloudfront.ListDistributionsInput, ...request.Option) (*cloudfront.ListDistributionsOutput, error)
	listDistributionsWithContextMutex       sync.RWMutex
	listDistributionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 []request.Option
	}
	listDistributionsWithContextReturns struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	listDistributionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	ListFieldLevelEncryptionConfigsStub        func(*cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	listFieldLevelEncryptionConfigsMutex       sync.RWMutex
	listFieldLevelEncryptionConfigsArgsForCall []struct {
		arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput
	}
	listFieldLevelEncryptionConfigsReturns struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}
	listFieldLevelEncryptionConfigsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}
	ListFieldLevelEncryptionConfigsRequestStub        func(*cloudfront.ListFieldLevelEncryptionConfigsInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionConfigsOutput)
	listFieldLevelEncryptionConfigsRequestMutex       sync.RWMutex
	listFieldLevelEncryptionConfigsRequestArgsForCall []struct {
		arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput
	}
	listFieldLevelEncryptionConfigsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput
	}
	listFieldLevelEncryptionConfigsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput
	}
	ListFieldLevelEncryptionConfigsWithContextStub        func(context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)
	listFieldLevelEncryptionConfigsWithContextMutex       sync.RWMutex
	listFieldLevelEncryptionConfigsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListFieldLevelEncryptionConfigsInput
		arg3 []request.Option
	}
	listFieldLevelEncryptionConfigsWithContextReturns struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}
	listFieldLevelEncryptionConfigsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}
	ListFieldLevelEncryptionProfilesStub        func(*cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	listFieldLevelEncryptionProfilesMutex       sync.RWMutex
	listFieldLevelEncryptionProfilesArgsForCall []struct {
		arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput
	}
	listFieldLevelEncryptionProfilesReturns struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}
	listFieldLevelEncryptionProfilesReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}
	ListFieldLevelEncryptionProfilesRequestStub        func(*cloudfront.ListFieldLevelEncryptionProfilesInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionProfilesOutput)
	listFieldLevelEncryptionProfilesRequestMutex       sync.RWMutex
	listFieldLevelEncryptionProfilesRequestArgsForCall []struct {
		arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput
	}
	listFieldLevelEncryptionProfilesRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput
	}
	listFieldLevelEncryptionProfilesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput
	}
	ListFieldLevelEncryptionProfilesWithContextStub        func(context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)
	listFieldLevelEncryptionProfilesWithContextMutex       sync.RWMutex
	listFieldLevelEncryptionProfilesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListFieldLevelEncryptionProfilesInput
		arg3 []request.Option
	}
	listFieldLevelEncryptionProfilesWithContextReturns struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}
	listFieldLevelEncryptionProfilesWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}
	ListFunctionsStub        func(*cloudfront.ListFunctionsInput) (*cloudfront.ListFunctionsOutput, error)
	listFunctionsMutex       sync.RWMutex
	listFunctionsArgsForCall []struct {
		arg1 *cloudfront.ListFunctionsInput
	}
	listFunctionsReturns struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}
	listFunctionsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}
	ListFunctionsRequestStub        func(*cloudfront.ListFunctionsInput) (*request.Request, *cloudfront.ListFunctionsOutput)
	listFunctionsRequestMutex       sync.RWMutex
	listFunctionsRequestArgsForCall []struct {
		arg1 *cloudfront.ListFunctionsInput
	}
	listFunctionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListFunctionsOutput
	}
	listFunctionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListFunctionsOutput
	}
	ListFunctionsWithContextStub        func(context.Context, *cloudfront.ListFunctionsInput, ...request.Option) (*cloudfront.ListFunctionsOutput, error)
	listFunctionsWithContextMutex       sync.RWMutex
	listFunctionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListFunctionsInput
		arg3 []request.Option
	}
	listFunctionsWithContextReturns struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}
	listFunctionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}
	ListInvalidationsStub        func(*cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error)
	listInvalidationsMutex       sync.RWMutex
	listInvalidationsArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
	}
	listInvalidationsReturns struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	listInvalidationsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	ListInvalidationsPagesStub        func(*cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool) error
	listInvalidationsPagesMutex       sync.RWMutex
	listInvalidationsPagesArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
		arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool
	}
	listInvalidationsPagesReturns struct {
		result1 error
	}
	listInvalidationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListInvalidationsPagesWithContextStub        func(context.Context, *cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool, ...request.Option) error
	listInvalidationsPagesWithContextMutex       sync.RWMutex
	listInvalidationsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool
		arg4 []request.Option
	}
	listInvalidationsPagesWithContextReturns struct {
		result1 error
	}
	listInvalidationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListInvalidationsRequestStub        func(*cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput)
	listInvalidationsRequestMutex       sync.RWMutex
	listInvalidationsRequestArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
	}
	listInvalidationsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}
	listInvalidationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}
	ListInvalidationsWithContextStub        func(context.Context, *cloudfront.ListInvalidationsInput, ...request.Option) (*cloudfront.ListInvalidationsOutput, error)
	listInvalidationsWithContextMutex       sync.RWMutex
	listInvalidationsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 []request.Option
	}
	listInvalidationsWithContextReturns struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	listInvalidationsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	ListKeyGroupsStub        func(*cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error)
	listKeyGroupsMutex       sync.RWMutex
	listKeyGroupsArgsForCall []struct {
		arg1 *cloudfront.ListKeyGroupsInput
	}
	listKeyGroupsReturns struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}
	listKeyGroupsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}
	ListKeyGroupsRequestStub        func(*cloudfront.ListKeyGroupsInput) (*request.Request, *cloudfront.ListKeyGroupsOutput)
	listKeyGroupsRequestMutex       sync.RWMutex
	listKeyGroupsRequestArgsForCall []struct {
		arg1 *cloudfront.ListKeyGroupsInput
	}
	listKeyGroupsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListKeyGroupsOutput
	}
	listKeyGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListKeyGroupsOutput
	}
	ListKeyGroupsWithContextStub        func(context.Context, *cloudfront.ListKeyGroupsInput, ...request.Option) (*cloudfront.ListKeyGroupsOutput, error)
	listKeyGroupsWithContextMutex       sync.RWMutex
	listKeyGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListKeyGroupsInput
		arg3 []request.Option
	}
	listKeyGroupsWithContextReturns struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}
	listKeyGroupsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}
	ListOriginRequestPoliciesStub        func(*cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error)
	listOriginRequestPoliciesMutex       sync.RWMutex
	listOriginRequestPoliciesArgsForCall []struct {
		arg1 *cloudfront.ListOriginRequestPoliciesInput
	}
	listOriginRequestPoliciesReturns struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}
	listOriginRequestPoliciesReturnsOnCall map[int]struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}
	ListOriginRequestPoliciesRequestStub        func(*cloudfront.ListOriginRequestPoliciesInput) (*request.Request, *cloudfront.ListOriginRequestPoliciesOutput)
	listOriginRequestPoliciesRequestMutex       sync.RWMutex
	listOriginRequestPoliciesRequestArgsForCall []struct {
		arg1 *cloudfront.ListOriginRequestPoliciesInput
	}
	listOriginRequestPoliciesRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListOriginRequestPoliciesOutput
	}
	listOriginRequestPoliciesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListOriginRequestPoliciesOutput
	}
	ListOriginRequestPoliciesWithContextStub        func(context.Context, *cloudfront.ListOriginRequestPoliciesInput, ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error)
	listOriginRequestPoliciesWithContextMutex       sync.RWMutex
	listOriginRequestPoliciesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListOriginRequestPoliciesInput
		arg3 []request.Option
	}
	listOriginRequestPoliciesWithContextReturns struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}
	listOriginRequestPoliciesWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}
	ListPublicKeysStub        func(*cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error)
	listPublicKeysMutex       sync.RWMutex
	listPublicKeysArgsForCall []struct {
		arg1 *cloudfront.ListPublicKeysInput
	}
	listPublicKeysReturns struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}
	listPublicKeysReturnsOnCall map[int]struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}
	ListPublicKeysRequestStub        func(*cloudfront.ListPublicKeysInput) (*request.Request, *cloudfront.ListPublicKeysOutput)
	listPublicKeysRequestMutex       sync.RWMutex
	listPublicKeysRequestArgsForCall []struct {
		arg1 *cloudfront.ListPublicKeysInput
	}
	listPublicKeysRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListPublicKeysOutput
	}
	listPublicKeysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListPublicKeysOutput
	}
	ListPublicKeysWithContextStub        func(context.Context, *cloudfront.ListPublicKeysInput, ...request.Option) (*cloudfront.ListPublicKeysOutput, error)
	listPublicKeysWithContextMutex       sync.RWMutex
	listPublicKeysWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListPublicKeysInput
		arg3 []request.Option
	}
	listPublicKeysWithContextReturns struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}
	listPublicKeysWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}
	ListRealtimeLogConfigsStub        func(*cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error)
	listRealtimeLogConfigsMutex       sync.RWMutex
	listRealtimeLogConfigsArgsForCall []struct {
		arg1 *cloudfront.ListRealtimeLogConfigsInput
	}
	listRealtimeLogConfigsReturns struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}
	listRealtimeLogConfigsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}
	ListRealtimeLogConfigsRequestStub        func(*cloudfront.ListRealtimeLogConfigsInput) (*request.Request, *cloudfront.ListRealtimeLogConfigsOutput)
	listRealtimeLogConfigsRequestMutex       sync.RWMutex
	listRealtimeLogConfigsRequestArgsForCall []struct {
		arg1 *cloudfront.ListRealtimeLogConfigsInput
	}
	listRealtimeLogConfigsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListRealtimeLogConfigsOutput
	}
	listRealtimeLogConfigsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListRealtimeLogConfigsOutput
	}
	ListRealtimeLogConfigsWithContextStub        func(context.Context, *cloudfront.ListRealtimeLogConfigsInput, ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error)
	listRealtimeLogConfigsWithContextMutex       sync.RWMutex
	listRealtimeLogConfigsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListRealtimeLogConfigsInput
		arg3 []request.Option
	}
	listRealtimeLogConfigsWithContextReturns struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}
	listRealtimeLogConfigsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}
	ListStreamingDistributionsStub        func(*cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error)
	listStreamingDistributionsMutex       sync.RWMutex
	listStreamingDistributionsArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}
	listStreamingDistributionsReturns struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	listStreamingDistributionsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	ListStreamingDistributionsPagesStub        func(*cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error
	listStreamingDistributionsPagesMutex       sync.RWMutex
	listStreamingDistributionsPagesArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
		arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
	}
	listStreamingDistributionsPagesReturns struct {
		result1 error
	}
	listStreamingDistributionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListStreamingDistributionsPagesWithContextStub        func(context.Context, *cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, ...request.Option) error
	listStreamingDistributionsPagesWithContextMutex       sync.RWMutex
	listStreamingDistributionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
		arg4 []request.Option
	}
	listStreamingDistributionsPagesWithContextReturns struct {
		result1 error
	}
	listStreamingDistributionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListStreamingDistributionsRequestStub        func(*cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput)
	listStreamingDistributionsRequestMutex       sync.RWMutex
	listStreamingDistributionsRequestArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}
	listStreamingDistributionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}
	listStreamingDistributionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}
	ListStreamingDistributionsWithContextStub        func(context.Context, *cloudfront.ListStreamingDistributionsInput, ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error)
	listStreamingDistributionsWithContextMutex       sync.RWMutex
	listStreamingDistributionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 []request.Option
	}
	listStreamingDistributionsWithContextReturns struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	listStreamingDistributionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	ListTagsForResourceStub        func(*cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *cloudfront.ListTagsForResourceInput, ...request.Option) (*cloudfront.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	PublishFunctionStub        func(*cloudfront.PublishFunctionInput) (*cloudfront.PublishFunctionOutput, error)
	publishFunctionMutex       sync.RWMutex
	publishFunctionArgsForCall []struct {
		arg1 *cloudfront.PublishFunctionInput
	}
	publishFunctionReturns struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}
	publishFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}
	PublishFunctionRequestStub        func(*cloudfront.PublishFunctionInput) (*request.Request, *cloudfront.PublishFunctionOutput)
	publishFunctionRequestMutex       sync.RWMutex
	publishFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.PublishFunctionInput
	}
	publishFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.PublishFunctionOutput
	}
	publishFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.PublishFunctionOutput
	}
	PublishFunctionWithContextStub        func(context.Context, *cloudfront.PublishFunctionInput, ...request.Option) (*cloudfront.PublishFunctionOutput, error)
	publishFunctionWithContextMutex       sync.RWMutex
	publishFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.PublishFunctionInput
		arg3 []request.Option
	}
	publishFunctionWithContextReturns struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}
	publishFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}
	TagResourceStub        func(*cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *cloudfront.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *cloudfront.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}
	TagResourceWithContextStub        func(context.Context, *cloudfront.TagResourceInput, ...request.Option) (*cloudfront.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	TestFunctionStub        func(*cloudfront.TestFunctionInput) (*cloudfront.TestFunctionOutput, error)
	testFunctionMutex       sync.RWMutex
	testFunctionArgsForCall []struct {
		arg1 *cloudfront.TestFunctionInput
	}
	testFunctionReturns struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}
	testFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}
	TestFunctionRequestStub        func(*cloudfront.TestFunctionInput) (*request.Request, *cloudfront.TestFunctionOutput)
	testFunctionRequestMutex       sync.RWMutex
	testFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.TestFunctionInput
	}
	testFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.TestFunctionOutput
	}
	testFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.TestFunctionOutput
	}
	TestFunctionWithContextStub        func(context.Context, *cloudfront.TestFunctionInput, ...request.Option) (*cloudfront.TestFunctionOutput, error)
	testFunctionWithContextMutex       sync.RWMutex
	testFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.TestFunctionInput
		arg3 []request.Option
	}
	testFunctionWithContextReturns struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}
	testFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}
	UntagResourceStub        func(*cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *cloudfront.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *cloudfront.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}
	UntagResourceWithContextStub        func(context.Context, *cloudfront.UntagResourceInput, ...request.Option) (*cloudfront.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	UpdateCachePolicyStub        func(*cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error)
	updateCachePolicyMutex       sync.RWMutex
	updateCachePolicyArgsForCall []struct {
		arg1 *cloudfront.UpdateCachePolicyInput
	}
	updateCachePolicyReturns struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}
	updateCachePolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}
	UpdateCachePolicyRequestStub        func(*cloudfront.UpdateCachePolicyInput) (*request.Request, *cloudfront.UpdateCachePolicyOutput)
	updateCachePolicyRequestMutex       sync.RWMutex
	updateCachePolicyRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateCachePolicyInput
	}
	updateCachePolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCachePolicyOutput
	}
	updateCachePolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCachePolicyOutput
	}
	UpdateCachePolicyWithContextStub        func(context.Context, *cloudfront.UpdateCachePolicyInput, ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error)
	updateCachePolicyWithContextMutex       sync.RWMutex
	updateCachePolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateCachePolicyInput
		arg3 []request.Option
	}
	updateCachePolicyWithContextReturns struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}
	updateCachePolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}
	UpdateCloudFrontOriginAccessIdentityStub        func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	updateCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}
	updateCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	updateCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	UpdateCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	updateCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}
	updateCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}
	updateCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}
	UpdateCloudFrontOriginAccessIdentityWithContextStub        func(context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	updateCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	updateCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	UpdateDistributionStub        func(*cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error)
	updateDistributionMutex       sync.RWMutex
	updateDistributionArgsForCall []struct {
		arg1 *cloudfront.UpdateDistributionInput
	}
	updateDistributionReturns struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	updateDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	UpdateDistributionRequestStub        func(*cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput)
	updateDistributionRequestMutex       sync.RWMutex
	updateDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateDistributionInput
	}
	updateDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}
	updateDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}
	UpdateDistributionWithContextStub        func(context.Context, *cloudfront.UpdateDistributionInput, ...request.Option) (*cloudfront.UpdateDistributionOutput, error)
	updateDistributionWithContextMutex       sync.RWMutex
	updateDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateDistributionInput
		arg3 []request.Option
	}
	updateDistributionWithContextReturns struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	updateDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	UpdateFieldLevelEncryptionConfigStub        func(*cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	updateFieldLevelEncryptionConfigMutex       sync.RWMutex
	updateFieldLevelEncryptionConfigArgsForCall []struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput
	}
	updateFieldLevelEncryptionConfigReturns struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}
	updateFieldLevelEncryptionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}
	UpdateFieldLevelEncryptionConfigRequestStub        func(*cloudfront.UpdateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	updateFieldLevelEncryptionConfigRequestMutex       sync.RWMutex
	updateFieldLevelEncryptionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput
	}
	updateFieldLevelEncryptionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
	}
	updateFieldLevelEncryptionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
	}
	UpdateFieldLevelEncryptionConfigWithContextStub        func(context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)
	updateFieldLevelEncryptionConfigWithContextMutex       sync.RWMutex
	updateFieldLevelEncryptionConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}
	updateFieldLevelEncryptionConfigWithContextReturns struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}
	updateFieldLevelEncryptionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}
	UpdateFieldLevelEncryptionProfileStub        func(*cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	updateFieldLevelEncryptionProfileMutex       sync.RWMutex
	updateFieldLevelEncryptionProfileArgsForCall []struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput
	}
	updateFieldLevelEncryptionProfileReturns struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}
	updateFieldLevelEncryptionProfileReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}
	UpdateFieldLevelEncryptionProfileRequestStub        func(*cloudfront.UpdateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	updateFieldLevelEncryptionProfileRequestMutex       sync.RWMutex
	updateFieldLevelEncryptionProfileRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput
	}
	updateFieldLevelEncryptionProfileRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
	}
	updateFieldLevelEncryptionProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
	}
	UpdateFieldLevelEncryptionProfileWithContextStub        func(context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)
	updateFieldLevelEncryptionProfileWithContextMutex       sync.RWMutex
	updateFieldLevelEncryptionProfileWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}
	updateFieldLevelEncryptionProfileWithContextReturns struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}
	updateFieldLevelEncryptionProfileWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}
	UpdateFunctionStub        func(*cloudfront.UpdateFunctionInput) (*cloudfront.UpdateFunctionOutput, error)
	updateFunctionMutex       sync.RWMutex
	updateFunctionArgsForCall []struct {
		arg1 *cloudfront.UpdateFunctionInput
	}
	updateFunctionReturns struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}
	updateFunctionReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}
	UpdateFunctionRequestStub        func(*cloudfront.UpdateFunctionInput) (*request.Request, *cloudfront.UpdateFunctionOutput)
	updateFunctionRequestMutex       sync.RWMutex
	updateFunctionRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateFunctionInput
	}
	updateFunctionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFunctionOutput
	}
	updateFunctionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFunctionOutput
	}
	UpdateFunctionWithContextStub        func(context.Context, *cloudfront.UpdateFunctionInput, ...request.Option) (*cloudfront.UpdateFunctionOutput, error)
	updateFunctionWithContextMutex       sync.RWMutex
	updateFunctionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFunctionInput
		arg3 []request.Option
	}
	updateFunctionWithContextReturns struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}
	updateFunctionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}
	UpdateKeyGroupStub        func(*cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error)
	updateKeyGroupMutex       sync.RWMutex
	updateKeyGroupArgsForCall []struct {
		arg1 *cloudfront.UpdateKeyGroupInput
	}
	updateKeyGroupReturns struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}
	updateKeyGroupReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}
	UpdateKeyGroupRequestStub        func(*cloudfront.UpdateKeyGroupInput) (*request.Request, *cloudfront.UpdateKeyGroupOutput)
	updateKeyGroupRequestMutex       sync.RWMutex
	updateKeyGroupRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateKeyGroupInput
	}
	updateKeyGroupRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateKeyGroupOutput
	}
	updateKeyGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateKeyGroupOutput
	}
	UpdateKeyGroupWithContextStub        func(context.Context, *cloudfront.UpdateKeyGroupInput, ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error)
	updateKeyGroupWithContextMutex       sync.RWMutex
	updateKeyGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateKeyGroupInput
		arg3 []request.Option
	}
	updateKeyGroupWithContextReturns struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}
	updateKeyGroupWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}
	UpdateOriginRequestPolicyStub        func(*cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error)
	updateOriginRequestPolicyMutex       sync.RWMutex
	updateOriginRequestPolicyArgsForCall []struct {
		arg1 *cloudfront.UpdateOriginRequestPolicyInput
	}
	updateOriginRequestPolicyReturns struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}
	updateOriginRequestPolicyReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}
	UpdateOriginRequestPolicyRequestStub        func(*cloudfront.UpdateOriginRequestPolicyInput) (*request.Request, *cloudfront.UpdateOriginRequestPolicyOutput)
	updateOriginRequestPolicyRequestMutex       sync.RWMutex
	updateOriginRequestPolicyRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateOriginRequestPolicyInput
	}
	updateOriginRequestPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateOriginRequestPolicyOutput
	}
	updateOriginRequestPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateOriginRequestPolicyOutput
	}
	UpdateOriginRequestPolicyWithContextStub        func(context.Context, *cloudfront.UpdateOriginRequestPolicyInput, ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error)
	updateOriginRequestPolicyWithContextMutex       sync.RWMutex
	updateOriginRequestPolicyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateOriginRequestPolicyInput
		arg3 []request.Option
	}
	updateOriginRequestPolicyWithContextReturns struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}
	updateOriginRequestPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}
	UpdatePublicKeyStub        func(*cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error)
	updatePublicKeyMutex       sync.RWMutex
	updatePublicKeyArgsForCall []struct {
		arg1 *cloudfront.UpdatePublicKeyInput
	}
	updatePublicKeyReturns struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}
	updatePublicKeyReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}
	UpdatePublicKeyRequestStub        func(*cloudfront.UpdatePublicKeyInput) (*request.Request, *cloudfront.UpdatePublicKeyOutput)
	updatePublicKeyRequestMutex       sync.RWMutex
	updatePublicKeyRequestArgsForCall []struct {
		arg1 *cloudfront.UpdatePublicKeyInput
	}
	updatePublicKeyRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdatePublicKeyOutput
	}
	updatePublicKeyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdatePublicKeyOutput
	}
	UpdatePublicKeyWithContextStub        func(context.Context, *cloudfront.UpdatePublicKeyInput, ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error)
	updatePublicKeyWithContextMutex       sync.RWMutex
	updatePublicKeyWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdatePublicKeyInput
		arg3 []request.Option
	}
	updatePublicKeyWithContextReturns struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}
	updatePublicKeyWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}
	UpdateRealtimeLogConfigStub        func(*cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error)
	updateRealtimeLogConfigMutex       sync.RWMutex
	updateRealtimeLogConfigArgsForCall []struct {
		arg1 *cloudfront.UpdateRealtimeLogConfigInput
	}
	updateRealtimeLogConfigReturns struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}
	updateRealtimeLogConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}
	UpdateRealtimeLogConfigRequestStub        func(*cloudfront.UpdateRealtimeLogConfigInput) (*request.Request, *cloudfront.UpdateRealtimeLogConfigOutput)
	updateRealtimeLogConfigRequestMutex       sync.RWMutex
	updateRealtimeLogConfigRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateRealtimeLogConfigInput
	}
	updateRealtimeLogConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateRealtimeLogConfigOutput
	}
	updateRealtimeLogConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateRealtimeLogConfigOutput
	}
	UpdateRealtimeLogConfigWithContextStub        func(context.Context, *cloudfront.UpdateRealtimeLogConfigInput, ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error)
	updateRealtimeLogConfigWithContextMutex       sync.RWMutex
	updateRealtimeLogConfigWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateRealtimeLogConfigInput
		arg3 []request.Option
	}
	updateRealtimeLogConfigWithContextReturns struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}
	updateRealtimeLogConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}
	UpdateStreamingDistributionStub        func(*cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error)
	updateStreamingDistributionMutex       sync.RWMutex
	updateStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}
	updateStreamingDistributionReturns struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	updateStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	UpdateStreamingDistributionRequestStub        func(*cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput)
	updateStreamingDistributionRequestMutex       sync.RWMutex
	updateStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}
	updateStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}
	updateStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}
	UpdateStreamingDistributionWithContextStub        func(context.Context, *cloudfront.UpdateStreamingDistributionInput, ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error)
	updateStreamingDistributionWithContextMutex       sync.RWMutex
	updateStreamingDistributionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateStreamingDistributionInput
		arg3 []request.Option
	}
	updateStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	updateStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	WaitUntilDistributionDeployedStub        func(*cloudfront.GetDistributionInput) error
	waitUntilDistributionDeployedMutex       sync.RWMutex
	waitUntilDistributionDeployedArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	waitUntilDistributionDeployedReturns struct {
		result1 error
	}
	waitUntilDistributionDeployedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDistributionDeployedWithContextStub        func(context.Context, *cloudfront.GetDistributionInput, ...request.WaiterOption) error
	waitUntilDistributionDeployedWithContextMutex       sync.RWMutex
	waitUntilDistributionDeployedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.WaiterOption
	}
	waitUntilDistributionDeployedWithContextReturns struct {
		result1 error
	}
	waitUntilDistributionDeployedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInvalidationCompletedStub        func(*cloudfront.GetInvalidationInput) error
	waitUntilInvalidationCompletedMutex       sync.RWMutex
	waitUntilInvalidationCompletedArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	waitUntilInvalidationCompletedReturns struct {
		result1 error
	}
	waitUntilInvalidationCompletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInvalidationCompletedWithContextStub        func(context.Context, *cloudfront.GetInvalidationInput, ...request.WaiterOption) error
	waitUntilInvalidationCompletedWithContextMutex       sync.RWMutex
	waitUntilInvalidationCompletedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.WaiterOption
	}
	waitUntilInvalidationCompletedWithContextReturns struct {
		result1 error
	}
	waitUntilInvalidationCompletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStreamingDistributionDeployedStub        func(*cloudfront.GetStreamingDistributionInput) error
	waitUntilStreamingDistributionDeployedMutex       sync.RWMutex
	waitUntilStreamingDistributionDeployedArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	waitUntilStreamingDistributionDeployedReturns struct {
		result1 error
	}
	waitUntilStreamingDistributionDeployedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStreamingDistributionDeployedWithContextStub        func(context.Context, *cloudfront.GetStreamingDistributionInput, ...request.WaiterOption) error
	waitUntilStreamingDistributionDeployedWithContextMutex       sync.RWMutex
	waitUntilStreamingDistributionDeployedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.WaiterOption
	}
	waitUntilStreamingDistributionDeployedWithContextReturns struct {
		result1 error
	}
	waitUntilStreamingDistributionDeployedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudfront) CreateCachePolicy(arg1 *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	fake.createCachePolicyMutex.Lock()
	ret, specificReturn := fake.createCachePolicyReturnsOnCall[len(fake.createCachePolicyArgsForCall)]
	fake.createCachePolicyArgsForCall = append(fake.createCachePolicyArgsForCall, struct {
		arg1 *cloudfront.CreateCachePolicyInput
	}{arg1})
	stub := fake.CreateCachePolicyStub
	fakeReturns := fake.createCachePolicyReturns
	fake.recordInvocation("CreateCachePolicy", []interface{}{arg1})
	fake.createCachePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCachePolicyCallCount() int {
	fake.createCachePolicyMutex.RLock()
	defer fake.createCachePolicyMutex.RUnlock()
	return len(fake.createCachePolicyArgsForCall)
}

func (fake *FakeCloudfront) CreateCachePolicyCalls(stub func(*cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error)) {
	fake.createCachePolicyMutex.Lock()
	defer fake.createCachePolicyMutex.Unlock()
	fake.CreateCachePolicyStub = stub
}

func (fake *FakeCloudfront) CreateCachePolicyArgsForCall(i int) *cloudfront.CreateCachePolicyInput {
	fake.createCachePolicyMutex.RLock()
	defer fake.createCachePolicyMutex.RUnlock()
	argsForCall := fake.createCachePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateCachePolicyReturns(result1 *cloudfront.CreateCachePolicyOutput, result2 error) {
	fake.createCachePolicyMutex.Lock()
	defer fake.createCachePolicyMutex.Unlock()
	fake.CreateCachePolicyStub = nil
	fake.createCachePolicyReturns = struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCachePolicyReturnsOnCall(i int, result1 *cloudfront.CreateCachePolicyOutput, result2 error) {
	fake.createCachePolicyMutex.Lock()
	defer fake.createCachePolicyMutex.Unlock()
	fake.CreateCachePolicyStub = nil
	if fake.createCachePolicyReturnsOnCall == nil {
		fake.createCachePolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCachePolicyOutput
			result2 error
		})
	}
	fake.createCachePolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCachePolicyRequest(arg1 *cloudfront.CreateCachePolicyInput) (*request.Request, *cloudfront.CreateCachePolicyOutput) {
	fake.createCachePolicyRequestMutex.Lock()
	ret, specificReturn := fake.createCachePolicyRequestReturnsOnCall[len(fake.createCachePolicyRequestArgsForCall)]
	fake.createCachePolicyRequestArgsForCall = append(fake.createCachePolicyRequestArgsForCall, struct {
		arg1 *cloudfront.CreateCachePolicyInput
	}{arg1})
	stub := fake.CreateCachePolicyRequestStub
	fakeReturns := fake.createCachePolicyRequestReturns
	fake.recordInvocation("CreateCachePolicyRequest", []interface{}{arg1})
	fake.createCachePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCachePolicyRequestCallCount() int {
	fake.createCachePolicyRequestMutex.RLock()
	defer fake.createCachePolicyRequestMutex.RUnlock()
	return len(fake.createCachePolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateCachePolicyRequestCalls(stub func(*cloudfront.CreateCachePolicyInput) (*request.Request, *cloudfront.CreateCachePolicyOutput)) {
	fake.createCachePolicyRequestMutex.Lock()
	defer fake.createCachePolicyRequestMutex.Unlock()
	fake.CreateCachePolicyRequestStub = stub
}

func (fake *FakeCloudfront) CreateCachePolicyRequestArgsForCall(i int) *cloudfront.CreateCachePolicyInput {
	fake.createCachePolicyRequestMutex.RLock()
	defer fake.createCachePolicyRequestMutex.RUnlock()
	argsForCall := fake.createCachePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateCachePolicyRequestReturns(result1 *request.Request, result2 *cloudfront.CreateCachePolicyOutput) {
	fake.createCachePolicyRequestMutex.Lock()
	defer fake.createCachePolicyRequestMutex.Unlock()
	fake.CreateCachePolicyRequestStub = nil
	fake.createCachePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCachePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateCachePolicyOutput) {
	fake.createCachePolicyRequestMutex.Lock()
	defer fake.createCachePolicyRequestMutex.Unlock()
	fake.CreateCachePolicyRequestStub = nil
	if fake.createCachePolicyRequestReturnsOnCall == nil {
		fake.createCachePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateCachePolicyOutput
		})
	}
	fake.createCachePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCachePolicyWithContext(arg1 context.Context, arg2 *cloudfront.CreateCachePolicyInput, arg3 ...request.Option) (*cloudfront.CreateCachePolicyOutput, error) {
	fake.createCachePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.createCachePolicyWithContextReturnsOnCall[len(fake.createCachePolicyWithContextArgsForCall)]
	fake.createCachePolicyWithContextArgsForCall = append(fake.createCachePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateCachePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCachePolicyWithContextStub
	fakeReturns := fake.createCachePolicyWithContextReturns
	fake.recordInvocation("CreateCachePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCachePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCachePolicyWithContextCallCount() int {
	fake.createCachePolicyWithContextMutex.RLock()
	defer fake.createCachePolicyWithContextMutex.RUnlock()
	return len(fake.createCachePolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateCachePolicyWithContextCalls(stub func(context.Context, *cloudfront.CreateCachePolicyInput, ...request.Option) (*cloudfront.CreateCachePolicyOutput, error)) {
	fake.createCachePolicyWithContextMutex.Lock()
	defer fake.createCachePolicyWithContextMutex.Unlock()
	fake.CreateCachePolicyWithContextStub = stub
}

func (fake *FakeCloudfront) CreateCachePolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateCachePolicyInput, []request.Option) {
	fake.createCachePolicyWithContextMutex.RLock()
	defer fake.createCachePolicyWithContextMutex.RUnlock()
	argsForCall := fake.createCachePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateCachePolicyWithContextReturns(result1 *cloudfront.CreateCachePolicyOutput, result2 error) {
	fake.createCachePolicyWithContextMutex.Lock()
	defer fake.createCachePolicyWithContextMutex.Unlock()
	fake.CreateCachePolicyWithContextStub = nil
	fake.createCachePolicyWithContextReturns = struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCachePolicyWithContextReturnsOnCall(i int, result1 *cloudfront.CreateCachePolicyOutput, result2 error) {
	fake.createCachePolicyWithContextMutex.Lock()
	defer fake.createCachePolicyWithContextMutex.Unlock()
	fake.CreateCachePolicyWithContextStub = nil
	if fake.createCachePolicyWithContextReturnsOnCall == nil {
		fake.createCachePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCachePolicyOutput
			result2 error
		})
	}
	fake.createCachePolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentity(arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	fake.createCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityArgsForCall = append(fake.createCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.CreateCloudFrontOriginAccessIdentityStub
	fakeReturns := fake.createCloudFrontOriginAccessIdentityReturns
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.createCloudFrontOriginAccessIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityCallCount() int {
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityCalls(stub func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)) {
	fake.createCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityStub = stub
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.CreateCloudFrontOriginAccessIdentityInput {
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	argsForCall := fake.createCloudFrontOriginAccessIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.createCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityStub = nil
	fake.createCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.createCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityStub = nil
	if fake.createCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.createCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.CreateCloudFrontOriginAccessIdentityRequestStub
	fakeReturns := fake.createCloudFrontOriginAccessIdentityRequestReturns
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequestCalls(stub func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput)) {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityRequestStub = stub
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.CreateCloudFrontOriginAccessIdentityInput {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	argsForCall := fake.createCloudFrontOriginAccessIdentityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityRequestStub = nil
	fake.createCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContext(arg1 context.Context, arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCloudFrontOriginAccessIdentityWithContextStub
	fakeReturns := fake.createCloudFrontOriginAccessIdentityWithContextReturns
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContextCalls(stub func(context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityWithContextStub = stub
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	argsForCall := fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.createCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.CreateCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistribution(arg1 *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	fake.createDistributionMutex.Lock()
	ret, specificReturn := fake.createDistributionReturnsOnCall[len(fake.createDistributionArgsForCall)]
	fake.createDistributionArgsForCall = append(fake.createDistributionArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionInput
	}{arg1})
	stub := fake.CreateDistributionStub
	fakeReturns := fake.createDistributionReturns
	fake.recordInvocation("CreateDistribution", []interface{}{arg1})
	fake.createDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionCallCount() int {
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	return len(fake.createDistributionArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionCalls(stub func(*cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error)) {
	fake.createDistributionMutex.Lock()
	defer fake.createDistributionMutex.Unlock()
	fake.CreateDistributionStub = stub
}

func (fake *FakeCloudfront) CreateDistributionArgsForCall(i int) *cloudfront.CreateDistributionInput {
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	argsForCall := fake.createDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateDistributionReturns(result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.createDistributionMutex.Lock()
	defer fake.createDistributionMutex.Unlock()
	fake.CreateDistributionStub = nil
	fake.createDistributionReturns = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionReturnsOnCall(i int, result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.createDistributionMutex.Lock()
	defer fake.createDistributionMutex.Unlock()
	fake.CreateDistributionStub = nil
	if fake.createDistributionReturnsOnCall == nil {
		fake.createDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionOutput
			result2 error
		})
	}
	fake.createDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionRequest(arg1 *cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput) {
	fake.createDistributionRequestMutex.Lock()
	ret, specificReturn := fake.createDistributionRequestReturnsOnCall[len(fake.createDistributionRequestArgsForCall)]
	fake.createDistributionRequestArgsForCall = append(fake.createDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionInput
	}{arg1})
	stub := fake.CreateDistributionRequestStub
	fakeReturns := fake.createDistributionRequestReturns
	fake.recordInvocation("CreateDistributionRequest", []interface{}{arg1})
	fake.createDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionRequestCallCount() int {
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	return len(fake.createDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionRequestCalls(stub func(*cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput)) {
	fake.createDistributionRequestMutex.Lock()
	defer fake.createDistributionRequestMutex.Unlock()
	fake.CreateDistributionRequestStub = stub
}

func (fake *FakeCloudfront) CreateDistributionRequestArgsForCall(i int) *cloudfront.CreateDistributionInput {
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	argsForCall := fake.createDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateDistributionOutput) {
	fake.createDistributionRequestMutex.Lock()
	defer fake.createDistributionRequestMutex.Unlock()
	fake.CreateDistributionRequestStub = nil
	fake.createDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateDistributionOutput) {
	fake.createDistributionRequestMutex.Lock()
	defer fake.createDistributionRequestMutex.Unlock()
	fake.CreateDistributionRequestStub = nil
	if fake.createDistributionRequestReturnsOnCall == nil {
		fake.createDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateDistributionOutput
		})
	}
	fake.createDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithContext(arg1 context.Context, arg2 *cloudfront.CreateDistributionInput, arg3 ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	fake.createDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.createDistributionWithContextReturnsOnCall[len(fake.createDistributionWithContextArgsForCall)]
	fake.createDistributionWithContextArgsForCall = append(fake.createDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDistributionWithContextStub
	fakeReturns := fake.createDistributionWithContextReturns
	fake.recordInvocation("CreateDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionWithContextCallCount() int {
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	return len(fake.createDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionWithContextCalls(stub func(context.Context, *cloudfront.CreateDistributionInput, ...request.Option) (*cloudfront.CreateDistributionOutput, error)) {
	fake.createDistributionWithContextMutex.Lock()
	defer fake.createDistributionWithContextMutex.Unlock()
	fake.CreateDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) CreateDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateDistributionInput, []request.Option) {
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	argsForCall := fake.createDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateDistributionWithContextReturns(result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.createDistributionWithContextMutex.Lock()
	defer fake.createDistributionWithContextMutex.Unlock()
	fake.CreateDistributionWithContextStub = nil
	fake.createDistributionWithContextReturns = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.createDistributionWithContextMutex.Lock()
	defer fake.createDistributionWithContextMutex.Unlock()
	fake.CreateDistributionWithContextStub = nil
	if fake.createDistributionWithContextReturnsOnCall == nil {
		fake.createDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionOutput
			result2 error
		})
	}
	fake.createDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTags(arg1 *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	fake.createDistributionWithTagsMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsReturnsOnCall[len(fake.createDistributionWithTagsArgsForCall)]
	fake.createDistributionWithTagsArgsForCall = append(fake.createDistributionWithTagsArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}{arg1})
	stub := fake.CreateDistributionWithTagsStub
	fakeReturns := fake.createDistributionWithTagsReturns
	fake.recordInvocation("CreateDistributionWithTags", []interface{}{arg1})
	fake.createDistributionWithTagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionWithTagsCallCount() int {
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	return len(fake.createDistributionWithTagsArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionWithTagsCalls(stub func(*cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error)) {
	fake.createDistributionWithTagsMutex.Lock()
	defer fake.createDistributionWithTagsMutex.Unlock()
	fake.CreateDistributionWithTagsStub = stub
}

func (fake *FakeCloudfront) CreateDistributionWithTagsArgsForCall(i int) *cloudfront.CreateDistributionWithTagsInput {
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	argsForCall := fake.createDistributionWithTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateDistributionWithTagsReturns(result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.createDistributionWithTagsMutex.Lock()
	defer fake.createDistributionWithTagsMutex.Unlock()
	fake.CreateDistributionWithTagsStub = nil
	fake.createDistributionWithTagsReturns = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTagsReturnsOnCall(i int, result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.createDistributionWithTagsMutex.Lock()
	defer fake.createDistributionWithTagsMutex.Unlock()
	fake.CreateDistributionWithTagsStub = nil
	if fake.createDistributionWithTagsReturnsOnCall == nil {
		fake.createDistributionWithTagsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createDistributionWithTagsReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequest(arg1 *cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput) {
	fake.createDistributionWithTagsRequestMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsRequestReturnsOnCall[len(fake.createDistributionWithTagsRequestArgsForCall)]
	fake.createDistributionWithTagsRequestArgsForCall = append(fake.createDistributionWithTagsRequestArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}{arg1})
	stub := fake.CreateDistributionWithTagsRequestStub
	fakeReturns := fake.createDistributionWithTagsRequestReturns
	fake.recordInvocation("CreateDistributionWithTagsRequest", []interface{}{arg1})
	fake.createDistributionWithTagsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequestCallCount() int {
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	return len(fake.createDistributionWithTagsRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequestCalls(stub func(*cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput)) {
	fake.createDistributionWithTagsRequestMutex.Lock()
	defer fake.createDistributionWithTagsRequestMutex.Unlock()
	fake.CreateDistributionWithTagsRequestStub = stub
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequestArgsForCall(i int) *cloudfront.CreateDistributionWithTagsInput {
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	argsForCall := fake.createDistributionWithTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequestReturns(result1 *request.Request, result2 *cloudfront.CreateDistributionWithTagsOutput) {
	fake.createDistributionWithTagsRequestMutex.Lock()
	defer fake.createDistributionWithTagsRequestMutex.Unlock()
	fake.CreateDistributionWithTagsRequestStub = nil
	fake.createDistributionWithTagsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateDistributionWithTagsOutput) {
	fake.createDistributionWithTagsRequestMutex.Lock()
	defer fake.createDistributionWithTagsRequestMutex.Unlock()
	fake.CreateDistributionWithTagsRequestStub = nil
	if fake.createDistributionWithTagsRequestReturnsOnCall == nil {
		fake.createDistributionWithTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateDistributionWithTagsOutput
		})
	}
	fake.createDistributionWithTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContext(arg1 context.Context, arg2 *cloudfront.CreateDistributionWithTagsInput, arg3 ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	fake.createDistributionWithTagsWithContextMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsWithContextReturnsOnCall[len(fake.createDistributionWithTagsWithContextArgsForCall)]
	fake.createDistributionWithTagsWithContextArgsForCall = append(fake.createDistributionWithTagsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateDistributionWithTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateDistributionWithTagsWithContextStub
	fakeReturns := fake.createDistributionWithTagsWithContextReturns
	fake.recordInvocation("CreateDistributionWithTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDistributionWithTagsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContextCallCount() int {
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	return len(fake.createDistributionWithTagsWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContextCalls(stub func(context.Context, *cloudfront.CreateDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error)) {
	fake.createDistributionWithTagsWithContextMutex.Lock()
	defer fake.createDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateDistributionWithTagsWithContextStub = stub
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateDistributionWithTagsInput, []request.Option) {
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	argsForCall := fake.createDistributionWithTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContextReturns(result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.createDistributionWithTagsWithContextMutex.Lock()
	defer fake.createDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateDistributionWithTagsWithContextStub = nil
	fake.createDistributionWithTagsWithContextReturns = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateDistributionWithTagsWithContextReturnsOnCall(i int, result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.createDistributionWithTagsWithContextMutex.Lock()
	defer fake.createDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateDistributionWithTagsWithContextStub = nil
	if fake.createDistributionWithTagsWithContextReturnsOnCall == nil {
		fake.createDistributionWithTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createDistributionWithTagsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfig(arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	fake.createFieldLevelEncryptionConfigMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionConfigReturnsOnCall[len(fake.createFieldLevelEncryptionConfigArgsForCall)]
	fake.createFieldLevelEncryptionConfigArgsForCall = append(fake.createFieldLevelEncryptionConfigArgsForCall, struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.CreateFieldLevelEncryptionConfigStub
	fakeReturns := fake.createFieldLevelEncryptionConfigReturns
	fake.recordInvocation("CreateFieldLevelEncryptionConfig", []interface{}{arg1})
	fake.createFieldLevelEncryptionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigCallCount() int {
	fake.createFieldLevelEncryptionConfigMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionConfigArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigCalls(stub func(*cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)) {
	fake.createFieldLevelEncryptionConfigMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigArgsForCall(i int) *cloudfront.CreateFieldLevelEncryptionConfigInput {
	fake.createFieldLevelEncryptionConfigMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigReturns(result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.createFieldLevelEncryptionConfigMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigStub = nil
	fake.createFieldLevelEncryptionConfigReturns = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigReturnsOnCall(i int, result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.createFieldLevelEncryptionConfigMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigStub = nil
	if fake.createFieldLevelEncryptionConfigReturnsOnCall == nil {
		fake.createFieldLevelEncryptionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.createFieldLevelEncryptionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequest(arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	fake.createFieldLevelEncryptionConfigRequestMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionConfigRequestReturnsOnCall[len(fake.createFieldLevelEncryptionConfigRequestArgsForCall)]
	fake.createFieldLevelEncryptionConfigRequestArgsForCall = append(fake.createFieldLevelEncryptionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.CreateFieldLevelEncryptionConfigRequestStub
	fakeReturns := fake.createFieldLevelEncryptionConfigRequestReturns
	fake.recordInvocation("CreateFieldLevelEncryptionConfigRequest", []interface{}{arg1})
	fake.createFieldLevelEncryptionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequestCallCount() int {
	fake.createFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequestCalls(stub func(*cloudfront.CreateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionConfigOutput)) {
	fake.createFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigRequestStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequestArgsForCall(i int) *cloudfront.CreateFieldLevelEncryptionConfigInput {
	fake.createFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	fake.createFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigRequestStub = nil
	fake.createFieldLevelEncryptionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	fake.createFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigRequestStub = nil
	if fake.createFieldLevelEncryptionConfigRequestReturnsOnCall == nil {
		fake.createFieldLevelEncryptionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		})
	}
	fake.createFieldLevelEncryptionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContext(arg1 context.Context, arg2 *cloudfront.CreateFieldLevelEncryptionConfigInput, arg3 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	fake.createFieldLevelEncryptionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionConfigWithContextReturnsOnCall[len(fake.createFieldLevelEncryptionConfigWithContextArgsForCall)]
	fake.createFieldLevelEncryptionConfigWithContextArgsForCall = append(fake.createFieldLevelEncryptionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateFieldLevelEncryptionConfigWithContextStub
	fakeReturns := fake.createFieldLevelEncryptionConfigWithContextReturns
	fake.recordInvocation("CreateFieldLevelEncryptionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFieldLevelEncryptionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContextCallCount() int {
	fake.createFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContextCalls(stub func(context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)) {
	fake.createFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, []request.Option) {
	fake.createFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContextReturns(result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.createFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigWithContextStub = nil
	fake.createFieldLevelEncryptionConfigWithContextReturns = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.createFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionConfigWithContextStub = nil
	if fake.createFieldLevelEncryptionConfigWithContextReturnsOnCall == nil {
		fake.createFieldLevelEncryptionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.createFieldLevelEncryptionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfile(arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	fake.createFieldLevelEncryptionProfileMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionProfileReturnsOnCall[len(fake.createFieldLevelEncryptionProfileArgsForCall)]
	fake.createFieldLevelEncryptionProfileArgsForCall = append(fake.createFieldLevelEncryptionProfileArgsForCall, struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.CreateFieldLevelEncryptionProfileStub
	fakeReturns := fake.createFieldLevelEncryptionProfileReturns
	fake.recordInvocation("CreateFieldLevelEncryptionProfile", []interface{}{arg1})
	fake.createFieldLevelEncryptionProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileCallCount() int {
	fake.createFieldLevelEncryptionProfileMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionProfileArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileCalls(stub func(*cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)) {
	fake.createFieldLevelEncryptionProfileMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileArgsForCall(i int) *cloudfront.CreateFieldLevelEncryptionProfileInput {
	fake.createFieldLevelEncryptionProfileMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileReturns(result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.createFieldLevelEncryptionProfileMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileStub = nil
	fake.createFieldLevelEncryptionProfileReturns = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileReturnsOnCall(i int, result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.createFieldLevelEncryptionProfileMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileStub = nil
	if fake.createFieldLevelEncryptionProfileReturnsOnCall == nil {
		fake.createFieldLevelEncryptionProfileReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.createFieldLevelEncryptionProfileReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequest(arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	fake.createFieldLevelEncryptionProfileRequestMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionProfileRequestReturnsOnCall[len(fake.createFieldLevelEncryptionProfileRequestArgsForCall)]
	fake.createFieldLevelEncryptionProfileRequestArgsForCall = append(fake.createFieldLevelEncryptionProfileRequestArgsForCall, struct {
		arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.CreateFieldLevelEncryptionProfileRequestStub
	fakeReturns := fake.createFieldLevelEncryptionProfileRequestReturns
	fake.recordInvocation("CreateFieldLevelEncryptionProfileRequest", []interface{}{arg1})
	fake.createFieldLevelEncryptionProfileRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequestCallCount() int {
	fake.createFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionProfileRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequestCalls(stub func(*cloudfront.CreateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionProfileOutput)) {
	fake.createFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileRequestStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequestArgsForCall(i int) *cloudfront.CreateFieldLevelEncryptionProfileInput {
	fake.createFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequestReturns(result1 *request.Request, result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	fake.createFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileRequestStub = nil
	fake.createFieldLevelEncryptionProfileRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	fake.createFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileRequestStub = nil
	if fake.createFieldLevelEncryptionProfileRequestReturnsOnCall == nil {
		fake.createFieldLevelEncryptionProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		})
	}
	fake.createFieldLevelEncryptionProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContext(arg1 context.Context, arg2 *cloudfront.CreateFieldLevelEncryptionProfileInput, arg3 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	fake.createFieldLevelEncryptionProfileWithContextMutex.Lock()
	ret, specificReturn := fake.createFieldLevelEncryptionProfileWithContextReturnsOnCall[len(fake.createFieldLevelEncryptionProfileWithContextArgsForCall)]
	fake.createFieldLevelEncryptionProfileWithContextArgsForCall = append(fake.createFieldLevelEncryptionProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateFieldLevelEncryptionProfileWithContextStub
	fakeReturns := fake.createFieldLevelEncryptionProfileWithContextReturns
	fake.recordInvocation("CreateFieldLevelEncryptionProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFieldLevelEncryptionProfileWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContextCallCount() int {
	fake.createFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	return len(fake.createFieldLevelEncryptionProfileWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContextCalls(stub func(context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)) {
	fake.createFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileWithContextStub = stub
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, []request.Option) {
	fake.createFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	argsForCall := fake.createFieldLevelEncryptionProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContextReturns(result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.createFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileWithContextStub = nil
	fake.createFieldLevelEncryptionProfileWithContextReturns = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFieldLevelEncryptionProfileWithContextReturnsOnCall(i int, result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.createFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.CreateFieldLevelEncryptionProfileWithContextStub = nil
	if fake.createFieldLevelEncryptionProfileWithContextReturnsOnCall == nil {
		fake.createFieldLevelEncryptionProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.createFieldLevelEncryptionProfileWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunction(arg1 *cloudfront.CreateFunctionInput) (*cloudfront.CreateFunctionOutput, error) {
	fake.createFunctionMutex.Lock()
	ret, specificReturn := fake.createFunctionReturnsOnCall[len(fake.createFunctionArgsForCall)]
	fake.createFunctionArgsForCall = append(fake.createFunctionArgsForCall, struct {
		arg1 *cloudfront.CreateFunctionInput
	}{arg1})
	stub := fake.CreateFunctionStub
	fakeReturns := fake.createFunctionReturns
	fake.recordInvocation("CreateFunction", []interface{}{arg1})
	fake.createFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFunctionCallCount() int {
	fake.createFunctionMutex.RLock()
	defer fake.createFunctionMutex.RUnlock()
	return len(fake.createFunctionArgsForCall)
}

func (fake *FakeCloudfront) CreateFunctionCalls(stub func(*cloudfront.CreateFunctionInput) (*cloudfront.CreateFunctionOutput, error)) {
	fake.createFunctionMutex.Lock()
	defer fake.createFunctionMutex.Unlock()
	fake.CreateFunctionStub = stub
}

func (fake *FakeCloudfront) CreateFunctionArgsForCall(i int) *cloudfront.CreateFunctionInput {
	fake.createFunctionMutex.RLock()
	defer fake.createFunctionMutex.RUnlock()
	argsForCall := fake.createFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFunctionReturns(result1 *cloudfront.CreateFunctionOutput, result2 error) {
	fake.createFunctionMutex.Lock()
	defer fake.createFunctionMutex.Unlock()
	fake.CreateFunctionStub = nil
	fake.createFunctionReturns = struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunctionReturnsOnCall(i int, result1 *cloudfront.CreateFunctionOutput, result2 error) {
	fake.createFunctionMutex.Lock()
	defer fake.createFunctionMutex.Unlock()
	fake.CreateFunctionStub = nil
	if fake.createFunctionReturnsOnCall == nil {
		fake.createFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFunctionOutput
			result2 error
		})
	}
	fake.createFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunctionRequest(arg1 *cloudfront.CreateFunctionInput) (*request.Request, *cloudfront.CreateFunctionOutput) {
	fake.createFunctionRequestMutex.Lock()
	ret, specificReturn := fake.createFunctionRequestReturnsOnCall[len(fake.createFunctionRequestArgsForCall)]
	fake.createFunctionRequestArgsForCall = append(fake.createFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateFunctionInput
	}{arg1})
	stub := fake.CreateFunctionRequestStub
	fakeReturns := fake.createFunctionRequestReturns
	fake.recordInvocation("CreateFunctionRequest", []interface{}{arg1})
	fake.createFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFunctionRequestCallCount() int {
	fake.createFunctionRequestMutex.RLock()
	defer fake.createFunctionRequestMutex.RUnlock()
	return len(fake.createFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateFunctionRequestCalls(stub func(*cloudfront.CreateFunctionInput) (*request.Request, *cloudfront.CreateFunctionOutput)) {
	fake.createFunctionRequestMutex.Lock()
	defer fake.createFunctionRequestMutex.Unlock()
	fake.CreateFunctionRequestStub = stub
}

func (fake *FakeCloudfront) CreateFunctionRequestArgsForCall(i int) *cloudfront.CreateFunctionInput {
	fake.createFunctionRequestMutex.RLock()
	defer fake.createFunctionRequestMutex.RUnlock()
	argsForCall := fake.createFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateFunctionOutput) {
	fake.createFunctionRequestMutex.Lock()
	defer fake.createFunctionRequestMutex.Unlock()
	fake.CreateFunctionRequestStub = nil
	fake.createFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateFunctionOutput) {
	fake.createFunctionRequestMutex.Lock()
	defer fake.createFunctionRequestMutex.Unlock()
	fake.CreateFunctionRequestStub = nil
	if fake.createFunctionRequestReturnsOnCall == nil {
		fake.createFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateFunctionOutput
		})
	}
	fake.createFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunctionWithContext(arg1 context.Context, arg2 *cloudfront.CreateFunctionInput, arg3 ...request.Option) (*cloudfront.CreateFunctionOutput, error) {
	fake.createFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.createFunctionWithContextReturnsOnCall[len(fake.createFunctionWithContextArgsForCall)]
	fake.createFunctionWithContextArgsForCall = append(fake.createFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateFunctionWithContextStub
	fakeReturns := fake.createFunctionWithContextReturns
	fake.recordInvocation("CreateFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateFunctionWithContextCallCount() int {
	fake.createFunctionWithContextMutex.RLock()
	defer fake.createFunctionWithContextMutex.RUnlock()
	return len(fake.createFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateFunctionWithContextCalls(stub func(context.Context, *cloudfront.CreateFunctionInput, ...request.Option) (*cloudfront.CreateFunctionOutput, error)) {
	fake.createFunctionWithContextMutex.Lock()
	defer fake.createFunctionWithContextMutex.Unlock()
	fake.CreateFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) CreateFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateFunctionInput, []request.Option) {
	fake.createFunctionWithContextMutex.RLock()
	defer fake.createFunctionWithContextMutex.RUnlock()
	argsForCall := fake.createFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateFunctionWithContextReturns(result1 *cloudfront.CreateFunctionOutput, result2 error) {
	fake.createFunctionWithContextMutex.Lock()
	defer fake.createFunctionWithContextMutex.Unlock()
	fake.CreateFunctionWithContextStub = nil
	fake.createFunctionWithContextReturns = struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateFunctionOutput, result2 error) {
	fake.createFunctionWithContextMutex.Lock()
	defer fake.createFunctionWithContextMutex.Unlock()
	fake.CreateFunctionWithContextStub = nil
	if fake.createFunctionWithContextReturnsOnCall == nil {
		fake.createFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateFunctionOutput
			result2 error
		})
	}
	fake.createFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidation(arg1 *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	fake.createInvalidationMutex.Lock()
	ret, specificReturn := fake.createInvalidationReturnsOnCall[len(fake.createInvalidationArgsForCall)]
	fake.createInvalidationArgsForCall = append(fake.createInvalidationArgsForCall, struct {
		arg1 *cloudfront.CreateInvalidationInput
	}{arg1})
	stub := fake.CreateInvalidationStub
	fakeReturns := fake.createInvalidationReturns
	fake.recordInvocation("CreateInvalidation", []interface{}{arg1})
	fake.createInvalidationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateInvalidationCallCount() int {
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	return len(fake.createInvalidationArgsForCall)
}

func (fake *FakeCloudfront) CreateInvalidationCalls(stub func(*cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error)) {
	fake.createInvalidationMutex.Lock()
	defer fake.createInvalidationMutex.Unlock()
	fake.CreateInvalidationStub = stub
}

func (fake *FakeCloudfront) CreateInvalidationArgsForCall(i int) *cloudfront.CreateInvalidationInput {
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	argsForCall := fake.createInvalidationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateInvalidationReturns(result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.createInvalidationMutex.Lock()
	defer fake.createInvalidationMutex.Unlock()
	fake.CreateInvalidationStub = nil
	fake.createInvalidationReturns = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidationReturnsOnCall(i int, result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.createInvalidationMutex.Lock()
	defer fake.createInvalidationMutex.Unlock()
	fake.CreateInvalidationStub = nil
	if fake.createInvalidationReturnsOnCall == nil {
		fake.createInvalidationReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateInvalidationOutput
			result2 error
		})
	}
	fake.createInvalidationReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidationRequest(arg1 *cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput) {
	fake.createInvalidationRequestMutex.Lock()
	ret, specificReturn := fake.createInvalidationRequestReturnsOnCall[len(fake.createInvalidationRequestArgsForCall)]
	fake.createInvalidationRequestArgsForCall = append(fake.createInvalidationRequestArgsForCall, struct {
		arg1 *cloudfront.CreateInvalidationInput
	}{arg1})
	stub := fake.CreateInvalidationRequestStub
	fakeReturns := fake.createInvalidationRequestReturns
	fake.recordInvocation("CreateInvalidationRequest", []interface{}{arg1})
	fake.createInvalidationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateInvalidationRequestCallCount() int {
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	return len(fake.createInvalidationRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateInvalidationRequestCalls(stub func(*cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput)) {
	fake.createInvalidationRequestMutex.Lock()
	defer fake.createInvalidationRequestMutex.Unlock()
	fake.CreateInvalidationRequestStub = stub
}

func (fake *FakeCloudfront) CreateInvalidationRequestArgsForCall(i int) *cloudfront.CreateInvalidationInput {
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	argsForCall := fake.createInvalidationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateInvalidationRequestReturns(result1 *request.Request, result2 *cloudfront.CreateInvalidationOutput) {
	fake.createInvalidationRequestMutex.Lock()
	defer fake.createInvalidationRequestMutex.Unlock()
	fake.CreateInvalidationRequestStub = nil
	fake.createInvalidationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateInvalidationOutput) {
	fake.createInvalidationRequestMutex.Lock()
	defer fake.createInvalidationRequestMutex.Unlock()
	fake.CreateInvalidationRequestStub = nil
	if fake.createInvalidationRequestReturnsOnCall == nil {
		fake.createInvalidationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateInvalidationOutput
		})
	}
	fake.createInvalidationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidationWithContext(arg1 context.Context, arg2 *cloudfront.CreateInvalidationInput, arg3 ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	fake.createInvalidationWithContextMutex.Lock()
	ret, specificReturn := fake.createInvalidationWithContextReturnsOnCall[len(fake.createInvalidationWithContextArgsForCall)]
	fake.createInvalidationWithContextArgsForCall = append(fake.createInvalidationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateInvalidationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateInvalidationWithContextStub
	fakeReturns := fake.createInvalidationWithContextReturns
	fake.recordInvocation("CreateInvalidationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createInvalidationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateInvalidationWithContextCallCount() int {
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	return len(fake.createInvalidationWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateInvalidationWithContextCalls(stub func(context.Context, *cloudfront.CreateInvalidationInput, ...request.Option) (*cloudfront.CreateInvalidationOutput, error)) {
	fake.createInvalidationWithContextMutex.Lock()
	defer fake.createInvalidationWithContextMutex.Unlock()
	fake.CreateInvalidationWithContextStub = stub
}

func (fake *FakeCloudfront) CreateInvalidationWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateInvalidationInput, []request.Option) {
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	argsForCall := fake.createInvalidationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateInvalidationWithContextReturns(result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.createInvalidationWithContextMutex.Lock()
	defer fake.createInvalidationWithContextMutex.Unlock()
	fake.CreateInvalidationWithContextStub = nil
	fake.createInvalidationWithContextReturns = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateInvalidationWithContextReturnsOnCall(i int, result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.createInvalidationWithContextMutex.Lock()
	defer fake.createInvalidationWithContextMutex.Unlock()
	fake.CreateInvalidationWithContextStub = nil
	if fake.createInvalidationWithContextReturnsOnCall == nil {
		fake.createInvalidationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateInvalidationOutput
			result2 error
		})
	}
	fake.createInvalidationWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroup(arg1 *cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error) {
	fake.createKeyGroupMutex.Lock()
	ret, specificReturn := fake.createKeyGroupReturnsOnCall[len(fake.createKeyGroupArgsForCall)]
	fake.createKeyGroupArgsForCall = append(fake.createKeyGroupArgsForCall, struct {
		arg1 *cloudfront.CreateKeyGroupInput
	}{arg1})
	stub := fake.CreateKeyGroupStub
	fakeReturns := fake.createKeyGroupReturns
	fake.recordInvocation("CreateKeyGroup", []interface{}{arg1})
	fake.createKeyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateKeyGroupCallCount() int {
	fake.createKeyGroupMutex.RLock()
	defer fake.createKeyGroupMutex.RUnlock()
	return len(fake.createKeyGroupArgsForCall)
}

func (fake *FakeCloudfront) CreateKeyGroupCalls(stub func(*cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error)) {
	fake.createKeyGroupMutex.Lock()
	defer fake.createKeyGroupMutex.Unlock()
	fake.CreateKeyGroupStub = stub
}

func (fake *FakeCloudfront) CreateKeyGroupArgsForCall(i int) *cloudfront.CreateKeyGroupInput {
	fake.createKeyGroupMutex.RLock()
	defer fake.createKeyGroupMutex.RUnlock()
	argsForCall := fake.createKeyGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateKeyGroupReturns(result1 *cloudfront.CreateKeyGroupOutput, result2 error) {
	fake.createKeyGroupMutex.Lock()
	defer fake.createKeyGroupMutex.Unlock()
	fake.CreateKeyGroupStub = nil
	fake.createKeyGroupReturns = struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroupReturnsOnCall(i int, result1 *cloudfront.CreateKeyGroupOutput, result2 error) {
	fake.createKeyGroupMutex.Lock()
	defer fake.createKeyGroupMutex.Unlock()
	fake.CreateKeyGroupStub = nil
	if fake.createKeyGroupReturnsOnCall == nil {
		fake.createKeyGroupReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateKeyGroupOutput
			result2 error
		})
	}
	fake.createKeyGroupReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroupRequest(arg1 *cloudfront.CreateKeyGroupInput) (*request.Request, *cloudfront.CreateKeyGroupOutput) {
	fake.createKeyGroupRequestMutex.Lock()
	ret, specificReturn := fake.createKeyGroupRequestReturnsOnCall[len(fake.createKeyGroupRequestArgsForCall)]
	fake.createKeyGroupRequestArgsForCall = append(fake.createKeyGroupRequestArgsForCall, struct {
		arg1 *cloudfront.CreateKeyGroupInput
	}{arg1})
	stub := fake.CreateKeyGroupRequestStub
	fakeReturns := fake.createKeyGroupRequestReturns
	fake.recordInvocation("CreateKeyGroupRequest", []interface{}{arg1})
	fake.createKeyGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateKeyGroupRequestCallCount() int {
	fake.createKeyGroupRequestMutex.RLock()
	defer fake.createKeyGroupRequestMutex.RUnlock()
	return len(fake.createKeyGroupRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateKeyGroupRequestCalls(stub func(*cloudfront.CreateKeyGroupInput) (*request.Request, *cloudfront.CreateKeyGroupOutput)) {
	fake.createKeyGroupRequestMutex.Lock()
	defer fake.createKeyGroupRequestMutex.Unlock()
	fake.CreateKeyGroupRequestStub = stub
}

func (fake *FakeCloudfront) CreateKeyGroupRequestArgsForCall(i int) *cloudfront.CreateKeyGroupInput {
	fake.createKeyGroupRequestMutex.RLock()
	defer fake.createKeyGroupRequestMutex.RUnlock()
	argsForCall := fake.createKeyGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateKeyGroupRequestReturns(result1 *request.Request, result2 *cloudfront.CreateKeyGroupOutput) {
	fake.createKeyGroupRequestMutex.Lock()
	defer fake.createKeyGroupRequestMutex.Unlock()
	fake.CreateKeyGroupRequestStub = nil
	fake.createKeyGroupRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateKeyGroupOutput) {
	fake.createKeyGroupRequestMutex.Lock()
	defer fake.createKeyGroupRequestMutex.Unlock()
	fake.CreateKeyGroupRequestStub = nil
	if fake.createKeyGroupRequestReturnsOnCall == nil {
		fake.createKeyGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateKeyGroupOutput
		})
	}
	fake.createKeyGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroupWithContext(arg1 context.Context, arg2 *cloudfront.CreateKeyGroupInput, arg3 ...request.Option) (*cloudfront.CreateKeyGroupOutput, error) {
	fake.createKeyGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createKeyGroupWithContextReturnsOnCall[len(fake.createKeyGroupWithContextArgsForCall)]
	fake.createKeyGroupWithContextArgsForCall = append(fake.createKeyGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateKeyGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateKeyGroupWithContextStub
	fakeReturns := fake.createKeyGroupWithContextReturns
	fake.recordInvocation("CreateKeyGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createKeyGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateKeyGroupWithContextCallCount() int {
	fake.createKeyGroupWithContextMutex.RLock()
	defer fake.createKeyGroupWithContextMutex.RUnlock()
	return len(fake.createKeyGroupWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateKeyGroupWithContextCalls(stub func(context.Context, *cloudfront.CreateKeyGroupInput, ...request.Option) (*cloudfront.CreateKeyGroupOutput, error)) {
	fake.createKeyGroupWithContextMutex.Lock()
	defer fake.createKeyGroupWithContextMutex.Unlock()
	fake.CreateKeyGroupWithContextStub = stub
}

func (fake *FakeCloudfront) CreateKeyGroupWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateKeyGroupInput, []request.Option) {
	fake.createKeyGroupWithContextMutex.RLock()
	defer fake.createKeyGroupWithContextMutex.RUnlock()
	argsForCall := fake.createKeyGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateKeyGroupWithContextReturns(result1 *cloudfront.CreateKeyGroupOutput, result2 error) {
	fake.createKeyGroupWithContextMutex.Lock()
	defer fake.createKeyGroupWithContextMutex.Unlock()
	fake.CreateKeyGroupWithContextStub = nil
	fake.createKeyGroupWithContextReturns = struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateKeyGroupWithContextReturnsOnCall(i int, result1 *cloudfront.CreateKeyGroupOutput, result2 error) {
	fake.createKeyGroupWithContextMutex.Lock()
	defer fake.createKeyGroupWithContextMutex.Unlock()
	fake.CreateKeyGroupWithContextStub = nil
	if fake.createKeyGroupWithContextReturnsOnCall == nil {
		fake.createKeyGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateKeyGroupOutput
			result2 error
		})
	}
	fake.createKeyGroupWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscription(arg1 *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	fake.createMonitoringSubscriptionMutex.Lock()
	ret, specificReturn := fake.createMonitoringSubscriptionReturnsOnCall[len(fake.createMonitoringSubscriptionArgsForCall)]
	fake.createMonitoringSubscriptionArgsForCall = append(fake.createMonitoringSubscriptionArgsForCall, struct {
		arg1 *cloudfront.CreateMonitoringSubscriptionInput
	}{arg1})
	stub := fake.CreateMonitoringSubscriptionStub
	fakeReturns := fake.createMonitoringSubscriptionReturns
	fake.recordInvocation("CreateMonitoringSubscription", []interface{}{arg1})
	fake.createMonitoringSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionCallCount() int {
	fake.createMonitoringSubscriptionMutex.RLock()
	defer fake.createMonitoringSubscriptionMutex.RUnlock()
	return len(fake.createMonitoringSubscriptionArgsForCall)
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionCalls(stub func(*cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error)) {
	fake.createMonitoringSubscriptionMutex.Lock()
	defer fake.createMonitoringSubscriptionMutex.Unlock()
	fake.CreateMonitoringSubscriptionStub = stub
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionArgsForCall(i int) *cloudfront.CreateMonitoringSubscriptionInput {
	fake.createMonitoringSubscriptionMutex.RLock()
	defer fake.createMonitoringSubscriptionMutex.RUnlock()
	argsForCall := fake.createMonitoringSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionReturns(result1 *cloudfront.CreateMonitoringSubscriptionOutput, result2 error) {
	fake.createMonitoringSubscriptionMutex.Lock()
	defer fake.createMonitoringSubscriptionMutex.Unlock()
	fake.CreateMonitoringSubscriptionStub = nil
	fake.createMonitoringSubscriptionReturns = struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionReturnsOnCall(i int, result1 *cloudfront.CreateMonitoringSubscriptionOutput, result2 error) {
	fake.createMonitoringSubscriptionMutex.Lock()
	defer fake.createMonitoringSubscriptionMutex.Unlock()
	fake.CreateMonitoringSubscriptionStub = nil
	if fake.createMonitoringSubscriptionReturnsOnCall == nil {
		fake.createMonitoringSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.createMonitoringSubscriptionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequest(arg1 *cloudfront.CreateMonitoringSubscriptionInput) (*request.Request, *cloudfront.CreateMonitoringSubscriptionOutput) {
	fake.createMonitoringSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.createMonitoringSubscriptionRequestReturnsOnCall[len(fake.createMonitoringSubscriptionRequestArgsForCall)]
	fake.createMonitoringSubscriptionRequestArgsForCall = append(fake.createMonitoringSubscriptionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateMonitoringSubscriptionInput
	}{arg1})
	stub := fake.CreateMonitoringSubscriptionRequestStub
	fakeReturns := fake.createMonitoringSubscriptionRequestReturns
	fake.recordInvocation("CreateMonitoringSubscriptionRequest", []interface{}{arg1})
	fake.createMonitoringSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequestCallCount() int {
	fake.createMonitoringSubscriptionRequestMutex.RLock()
	defer fake.createMonitoringSubscriptionRequestMutex.RUnlock()
	return len(fake.createMonitoringSubscriptionRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequestCalls(stub func(*cloudfront.CreateMonitoringSubscriptionInput) (*request.Request, *cloudfront.CreateMonitoringSubscriptionOutput)) {
	fake.createMonitoringSubscriptionRequestMutex.Lock()
	defer fake.createMonitoringSubscriptionRequestMutex.Unlock()
	fake.CreateMonitoringSubscriptionRequestStub = stub
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequestArgsForCall(i int) *cloudfront.CreateMonitoringSubscriptionInput {
	fake.createMonitoringSubscriptionRequestMutex.RLock()
	defer fake.createMonitoringSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.createMonitoringSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateMonitoringSubscriptionOutput) {
	fake.createMonitoringSubscriptionRequestMutex.Lock()
	defer fake.createMonitoringSubscriptionRequestMutex.Unlock()
	fake.CreateMonitoringSubscriptionRequestStub = nil
	fake.createMonitoringSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateMonitoringSubscriptionOutput) {
	fake.createMonitoringSubscriptionRequestMutex.Lock()
	defer fake.createMonitoringSubscriptionRequestMutex.Unlock()
	fake.CreateMonitoringSubscriptionRequestStub = nil
	if fake.createMonitoringSubscriptionRequestReturnsOnCall == nil {
		fake.createMonitoringSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateMonitoringSubscriptionOutput
		})
	}
	fake.createMonitoringSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContext(arg1 context.Context, arg2 *cloudfront.CreateMonitoringSubscriptionInput, arg3 ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	fake.createMonitoringSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.createMonitoringSubscriptionWithContextReturnsOnCall[len(fake.createMonitoringSubscriptionWithContextArgsForCall)]
	fake.createMonitoringSubscriptionWithContextArgsForCall = append(fake.createMonitoringSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateMonitoringSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateMonitoringSubscriptionWithContextStub
	fakeReturns := fake.createMonitoringSubscriptionWithContextReturns
	fake.recordInvocation("CreateMonitoringSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createMonitoringSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContextCallCount() int {
	fake.createMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.createMonitoringSubscriptionWithContextMutex.RUnlock()
	return len(fake.createMonitoringSubscriptionWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContextCalls(stub func(context.Context, *cloudfront.CreateMonitoringSubscriptionInput, ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error)) {
	fake.createMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.createMonitoringSubscriptionWithContextMutex.Unlock()
	fake.CreateMonitoringSubscriptionWithContextStub = stub
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateMonitoringSubscriptionInput, []request.Option) {
	fake.createMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.createMonitoringSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.createMonitoringSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContextReturns(result1 *cloudfront.CreateMonitoringSubscriptionOutput, result2 error) {
	fake.createMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.createMonitoringSubscriptionWithContextMutex.Unlock()
	fake.CreateMonitoringSubscriptionWithContextStub = nil
	fake.createMonitoringSubscriptionWithContextReturns = struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateMonitoringSubscriptionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateMonitoringSubscriptionOutput, result2 error) {
	fake.createMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.createMonitoringSubscriptionWithContextMutex.Unlock()
	fake.CreateMonitoringSubscriptionWithContextStub = nil
	if fake.createMonitoringSubscriptionWithContextReturnsOnCall == nil {
		fake.createMonitoringSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.createMonitoringSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicy(arg1 *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	fake.createOriginRequestPolicyMutex.Lock()
	ret, specificReturn := fake.createOriginRequestPolicyReturnsOnCall[len(fake.createOriginRequestPolicyArgsForCall)]
	fake.createOriginRequestPolicyArgsForCall = append(fake.createOriginRequestPolicyArgsForCall, struct {
		arg1 *cloudfront.CreateOriginRequestPolicyInput
	}{arg1})
	stub := fake.CreateOriginRequestPolicyStub
	fakeReturns := fake.createOriginRequestPolicyReturns
	fake.recordInvocation("CreateOriginRequestPolicy", []interface{}{arg1})
	fake.createOriginRequestPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyCallCount() int {
	fake.createOriginRequestPolicyMutex.RLock()
	defer fake.createOriginRequestPolicyMutex.RUnlock()
	return len(fake.createOriginRequestPolicyArgsForCall)
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyCalls(stub func(*cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error)) {
	fake.createOriginRequestPolicyMutex.Lock()
	defer fake.createOriginRequestPolicyMutex.Unlock()
	fake.CreateOriginRequestPolicyStub = stub
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyArgsForCall(i int) *cloudfront.CreateOriginRequestPolicyInput {
	fake.createOriginRequestPolicyMutex.RLock()
	defer fake.createOriginRequestPolicyMutex.RUnlock()
	argsForCall := fake.createOriginRequestPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyReturns(result1 *cloudfront.CreateOriginRequestPolicyOutput, result2 error) {
	fake.createOriginRequestPolicyMutex.Lock()
	defer fake.createOriginRequestPolicyMutex.Unlock()
	fake.CreateOriginRequestPolicyStub = nil
	fake.createOriginRequestPolicyReturns = struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyReturnsOnCall(i int, result1 *cloudfront.CreateOriginRequestPolicyOutput, result2 error) {
	fake.createOriginRequestPolicyMutex.Lock()
	defer fake.createOriginRequestPolicyMutex.Unlock()
	fake.CreateOriginRequestPolicyStub = nil
	if fake.createOriginRequestPolicyReturnsOnCall == nil {
		fake.createOriginRequestPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.createOriginRequestPolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequest(arg1 *cloudfront.CreateOriginRequestPolicyInput) (*request.Request, *cloudfront.CreateOriginRequestPolicyOutput) {
	fake.createOriginRequestPolicyRequestMutex.Lock()
	ret, specificReturn := fake.createOriginRequestPolicyRequestReturnsOnCall[len(fake.createOriginRequestPolicyRequestArgsForCall)]
	fake.createOriginRequestPolicyRequestArgsForCall = append(fake.createOriginRequestPolicyRequestArgsForCall, struct {
		arg1 *cloudfront.CreateOriginRequestPolicyInput
	}{arg1})
	stub := fake.CreateOriginRequestPolicyRequestStub
	fakeReturns := fake.createOriginRequestPolicyRequestReturns
	fake.recordInvocation("CreateOriginRequestPolicyRequest", []interface{}{arg1})
	fake.createOriginRequestPolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequestCallCount() int {
	fake.createOriginRequestPolicyRequestMutex.RLock()
	defer fake.createOriginRequestPolicyRequestMutex.RUnlock()
	return len(fake.createOriginRequestPolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequestCalls(stub func(*cloudfront.CreateOriginRequestPolicyInput) (*request.Request, *cloudfront.CreateOriginRequestPolicyOutput)) {
	fake.createOriginRequestPolicyRequestMutex.Lock()
	defer fake.createOriginRequestPolicyRequestMutex.Unlock()
	fake.CreateOriginRequestPolicyRequestStub = stub
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequestArgsForCall(i int) *cloudfront.CreateOriginRequestPolicyInput {
	fake.createOriginRequestPolicyRequestMutex.RLock()
	defer fake.createOriginRequestPolicyRequestMutex.RUnlock()
	argsForCall := fake.createOriginRequestPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequestReturns(result1 *request.Request, result2 *cloudfront.CreateOriginRequestPolicyOutput) {
	fake.createOriginRequestPolicyRequestMutex.Lock()
	defer fake.createOriginRequestPolicyRequestMutex.Unlock()
	fake.CreateOriginRequestPolicyRequestStub = nil
	fake.createOriginRequestPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateOriginRequestPolicyOutput) {
	fake.createOriginRequestPolicyRequestMutex.Lock()
	defer fake.createOriginRequestPolicyRequestMutex.Unlock()
	fake.CreateOriginRequestPolicyRequestStub = nil
	if fake.createOriginRequestPolicyRequestReturnsOnCall == nil {
		fake.createOriginRequestPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateOriginRequestPolicyOutput
		})
	}
	fake.createOriginRequestPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContext(arg1 context.Context, arg2 *cloudfront.CreateOriginRequestPolicyInput, arg3 ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	fake.createOriginRequestPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.createOriginRequestPolicyWithContextReturnsOnCall[len(fake.createOriginRequestPolicyWithContextArgsForCall)]
	fake.createOriginRequestPolicyWithContextArgsForCall = append(fake.createOriginRequestPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateOriginRequestPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateOriginRequestPolicyWithContextStub
	fakeReturns := fake.createOriginRequestPolicyWithContextReturns
	fake.recordInvocation("CreateOriginRequestPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createOriginRequestPolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContextCallCount() int {
	fake.createOriginRequestPolicyWithContextMutex.RLock()
	defer fake.createOriginRequestPolicyWithContextMutex.RUnlock()
	return len(fake.createOriginRequestPolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContextCalls(stub func(context.Context, *cloudfront.CreateOriginRequestPolicyInput, ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error)) {
	fake.createOriginRequestPolicyWithContextMutex.Lock()
	defer fake.createOriginRequestPolicyWithContextMutex.Unlock()
	fake.CreateOriginRequestPolicyWithContextStub = stub
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateOriginRequestPolicyInput, []request.Option) {
	fake.createOriginRequestPolicyWithContextMutex.RLock()
	defer fake.createOriginRequestPolicyWithContextMutex.RUnlock()
	argsForCall := fake.createOriginRequestPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContextReturns(result1 *cloudfront.CreateOriginRequestPolicyOutput, result2 error) {
	fake.createOriginRequestPolicyWithContextMutex.Lock()
	defer fake.createOriginRequestPolicyWithContextMutex.Unlock()
	fake.CreateOriginRequestPolicyWithContextStub = nil
	fake.createOriginRequestPolicyWithContextReturns = struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateOriginRequestPolicyWithContextReturnsOnCall(i int, result1 *cloudfront.CreateOriginRequestPolicyOutput, result2 error) {
	fake.createOriginRequestPolicyWithContextMutex.Lock()
	defer fake.createOriginRequestPolicyWithContextMutex.Unlock()
	fake.CreateOriginRequestPolicyWithContextStub = nil
	if fake.createOriginRequestPolicyWithContextReturnsOnCall == nil {
		fake.createOriginRequestPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.createOriginRequestPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKey(arg1 *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	fake.createPublicKeyMutex.Lock()
	ret, specificReturn := fake.createPublicKeyReturnsOnCall[len(fake.createPublicKeyArgsForCall)]
	fake.createPublicKeyArgsForCall = append(fake.createPublicKeyArgsForCall, struct {
		arg1 *cloudfront.CreatePublicKeyInput
	}{arg1})
	stub := fake.CreatePublicKeyStub
	fakeReturns := fake.createPublicKeyReturns
	fake.recordInvocation("CreatePublicKey", []interface{}{arg1})
	fake.createPublicKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreatePublicKeyCallCount() int {
	fake.createPublicKeyMutex.RLock()
	defer fake.createPublicKeyMutex.RUnlock()
	return len(fake.createPublicKeyArgsForCall)
}

func (fake *FakeCloudfront) CreatePublicKeyCalls(stub func(*cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error)) {
	fake.createPublicKeyMutex.Lock()
	defer fake.createPublicKeyMutex.Unlock()
	fake.CreatePublicKeyStub = stub
}

func (fake *FakeCloudfront) CreatePublicKeyArgsForCall(i int) *cloudfront.CreatePublicKeyInput {
	fake.createPublicKeyMutex.RLock()
	defer fake.createPublicKeyMutex.RUnlock()
	argsForCall := fake.createPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreatePublicKeyReturns(result1 *cloudfront.CreatePublicKeyOutput, result2 error) {
	fake.createPublicKeyMutex.Lock()
	defer fake.createPublicKeyMutex.Unlock()
	fake.CreatePublicKeyStub = nil
	fake.createPublicKeyReturns = struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKeyReturnsOnCall(i int, result1 *cloudfront.CreatePublicKeyOutput, result2 error) {
	fake.createPublicKeyMutex.Lock()
	defer fake.createPublicKeyMutex.Unlock()
	fake.CreatePublicKeyStub = nil
	if fake.createPublicKeyReturnsOnCall == nil {
		fake.createPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreatePublicKeyOutput
			result2 error
		})
	}
	fake.createPublicKeyReturnsOnCall[i] = struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKeyRequest(arg1 *cloudfront.CreatePublicKeyInput) (*request.Request, *cloudfront.CreatePublicKeyOutput) {
	fake.createPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.createPublicKeyRequestReturnsOnCall[len(fake.createPublicKeyRequestArgsForCall)]
	fake.createPublicKeyRequestArgsForCall = append(fake.createPublicKeyRequestArgsForCall, struct {
		arg1 *cloudfront.CreatePublicKeyInput
	}{arg1})
	stub := fake.CreatePublicKeyRequestStub
	fakeReturns := fake.createPublicKeyRequestReturns
	fake.recordInvocation("CreatePublicKeyRequest", []interface{}{arg1})
	fake.createPublicKeyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreatePublicKeyRequestCallCount() int {
	fake.createPublicKeyRequestMutex.RLock()
	defer fake.createPublicKeyRequestMutex.RUnlock()
	return len(fake.createPublicKeyRequestArgsForCall)
}

func (fake *FakeCloudfront) CreatePublicKeyRequestCalls(stub func(*cloudfront.CreatePublicKeyInput) (*request.Request, *cloudfront.CreatePublicKeyOutput)) {
	fake.createPublicKeyRequestMutex.Lock()
	defer fake.createPublicKeyRequestMutex.Unlock()
	fake.CreatePublicKeyRequestStub = stub
}

func (fake *FakeCloudfront) CreatePublicKeyRequestArgsForCall(i int) *cloudfront.CreatePublicKeyInput {
	fake.createPublicKeyRequestMutex.RLock()
	defer fake.createPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.createPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreatePublicKeyRequestReturns(result1 *request.Request, result2 *cloudfront.CreatePublicKeyOutput) {
	fake.createPublicKeyRequestMutex.Lock()
	defer fake.createPublicKeyRequestMutex.Unlock()
	fake.CreatePublicKeyRequestStub = nil
	fake.createPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreatePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreatePublicKeyOutput) {
	fake.createPublicKeyRequestMutex.Lock()
	defer fake.createPublicKeyRequestMutex.Unlock()
	fake.CreatePublicKeyRequestStub = nil
	if fake.createPublicKeyRequestReturnsOnCall == nil {
		fake.createPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreatePublicKeyOutput
		})
	}
	fake.createPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreatePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKeyWithContext(arg1 context.Context, arg2 *cloudfront.CreatePublicKeyInput, arg3 ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {
	fake.createPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.createPublicKeyWithContextReturnsOnCall[len(fake.createPublicKeyWithContextArgsForCall)]
	fake.createPublicKeyWithContextArgsForCall = append(fake.createPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreatePublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreatePublicKeyWithContextStub
	fakeReturns := fake.createPublicKeyWithContextReturns
	fake.recordInvocation("CreatePublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPublicKeyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreatePublicKeyWithContextCallCount() int {
	fake.createPublicKeyWithContextMutex.RLock()
	defer fake.createPublicKeyWithContextMutex.RUnlock()
	return len(fake.createPublicKeyWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreatePublicKeyWithContextCalls(stub func(context.Context, *cloudfront.CreatePublicKeyInput, ...request.Option) (*cloudfront.CreatePublicKeyOutput, error)) {
	fake.createPublicKeyWithContextMutex.Lock()
	defer fake.createPublicKeyWithContextMutex.Unlock()
	fake.CreatePublicKeyWithContextStub = stub
}

func (fake *FakeCloudfront) CreatePublicKeyWithContextArgsForCall(i int) (context.Context, *cloudfront.CreatePublicKeyInput, []request.Option) {
	fake.createPublicKeyWithContextMutex.RLock()
	defer fake.createPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.createPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreatePublicKeyWithContextReturns(result1 *cloudfront.CreatePublicKeyOutput, result2 error) {
	fake.createPublicKeyWithContextMutex.Lock()
	defer fake.createPublicKeyWithContextMutex.Unlock()
	fake.CreatePublicKeyWithContextStub = nil
	fake.createPublicKeyWithContextReturns = struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreatePublicKeyWithContextReturnsOnCall(i int, result1 *cloudfront.CreatePublicKeyOutput, result2 error) {
	fake.createPublicKeyWithContextMutex.Lock()
	defer fake.createPublicKeyWithContextMutex.Unlock()
	fake.CreatePublicKeyWithContextStub = nil
	if fake.createPublicKeyWithContextReturnsOnCall == nil {
		fake.createPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreatePublicKeyOutput
			result2 error
		})
	}
	fake.createPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfig(arg1 *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	fake.createRealtimeLogConfigMutex.Lock()
	ret, specificReturn := fake.createRealtimeLogConfigReturnsOnCall[len(fake.createRealtimeLogConfigArgsForCall)]
	fake.createRealtimeLogConfigArgsForCall = append(fake.createRealtimeLogConfigArgsForCall, struct {
		arg1 *cloudfront.CreateRealtimeLogConfigInput
	}{arg1})
	stub := fake.CreateRealtimeLogConfigStub
	fakeReturns := fake.createRealtimeLogConfigReturns
	fake.recordInvocation("CreateRealtimeLogConfig", []interface{}{arg1})
	fake.createRealtimeLogConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigCallCount() int {
	fake.createRealtimeLogConfigMutex.RLock()
	defer fake.createRealtimeLogConfigMutex.RUnlock()
	return len(fake.createRealtimeLogConfigArgsForCall)
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigCalls(stub func(*cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error)) {
	fake.createRealtimeLogConfigMutex.Lock()
	defer fake.createRealtimeLogConfigMutex.Unlock()
	fake.CreateRealtimeLogConfigStub = stub
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigArgsForCall(i int) *cloudfront.CreateRealtimeLogConfigInput {
	fake.createRealtimeLogConfigMutex.RLock()
	defer fake.createRealtimeLogConfigMutex.RUnlock()
	argsForCall := fake.createRealtimeLogConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigReturns(result1 *cloudfront.CreateRealtimeLogConfigOutput, result2 error) {
	fake.createRealtimeLogConfigMutex.Lock()
	defer fake.createRealtimeLogConfigMutex.Unlock()
	fake.CreateRealtimeLogConfigStub = nil
	fake.createRealtimeLogConfigReturns = struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigReturnsOnCall(i int, result1 *cloudfront.CreateRealtimeLogConfigOutput, result2 error) {
	fake.createRealtimeLogConfigMutex.Lock()
	defer fake.createRealtimeLogConfigMutex.Unlock()
	fake.CreateRealtimeLogConfigStub = nil
	if fake.createRealtimeLogConfigReturnsOnCall == nil {
		fake.createRealtimeLogConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.createRealtimeLogConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequest(arg1 *cloudfront.CreateRealtimeLogConfigInput) (*request.Request, *cloudfront.CreateRealtimeLogConfigOutput) {
	fake.createRealtimeLogConfigRequestMutex.Lock()
	ret, specificReturn := fake.createRealtimeLogConfigRequestReturnsOnCall[len(fake.createRealtimeLogConfigRequestArgsForCall)]
	fake.createRealtimeLogConfigRequestArgsForCall = append(fake.createRealtimeLogConfigRequestArgsForCall, struct {
		arg1 *cloudfront.CreateRealtimeLogConfigInput
	}{arg1})
	stub := fake.CreateRealtimeLogConfigRequestStub
	fakeReturns := fake.createRealtimeLogConfigRequestReturns
	fake.recordInvocation("CreateRealtimeLogConfigRequest", []interface{}{arg1})
	fake.createRealtimeLogConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequestCallCount() int {
	fake.createRealtimeLogConfigRequestMutex.RLock()
	defer fake.createRealtimeLogConfigRequestMutex.RUnlock()
	return len(fake.createRealtimeLogConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequestCalls(stub func(*cloudfront.CreateRealtimeLogConfigInput) (*request.Request, *cloudfront.CreateRealtimeLogConfigOutput)) {
	fake.createRealtimeLogConfigRequestMutex.Lock()
	defer fake.createRealtimeLogConfigRequestMutex.Unlock()
	fake.CreateRealtimeLogConfigRequestStub = stub
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequestArgsForCall(i int) *cloudfront.CreateRealtimeLogConfigInput {
	fake.createRealtimeLogConfigRequestMutex.RLock()
	defer fake.createRealtimeLogConfigRequestMutex.RUnlock()
	argsForCall := fake.createRealtimeLogConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequestReturns(result1 *request.Request, result2 *cloudfront.CreateRealtimeLogConfigOutput) {
	fake.createRealtimeLogConfigRequestMutex.Lock()
	defer fake.createRealtimeLogConfigRequestMutex.Unlock()
	fake.CreateRealtimeLogConfigRequestStub = nil
	fake.createRealtimeLogConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateRealtimeLogConfigOutput) {
	fake.createRealtimeLogConfigRequestMutex.Lock()
	defer fake.createRealtimeLogConfigRequestMutex.Unlock()
	fake.CreateRealtimeLogConfigRequestStub = nil
	if fake.createRealtimeLogConfigRequestReturnsOnCall == nil {
		fake.createRealtimeLogConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateRealtimeLogConfigOutput
		})
	}
	fake.createRealtimeLogConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContext(arg1 context.Context, arg2 *cloudfront.CreateRealtimeLogConfigInput, arg3 ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	fake.createRealtimeLogConfigWithContextMutex.Lock()
	ret, specificReturn := fake.createRealtimeLogConfigWithContextReturnsOnCall[len(fake.createRealtimeLogConfigWithContextArgsForCall)]
	fake.createRealtimeLogConfigWithContextArgsForCall = append(fake.createRealtimeLogConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateRealtimeLogConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateRealtimeLogConfigWithContextStub
	fakeReturns := fake.createRealtimeLogConfigWithContextReturns
	fake.recordInvocation("CreateRealtimeLogConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.createRealtimeLogConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContextCallCount() int {
	fake.createRealtimeLogConfigWithContextMutex.RLock()
	defer fake.createRealtimeLogConfigWithContextMutex.RUnlock()
	return len(fake.createRealtimeLogConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContextCalls(stub func(context.Context, *cloudfront.CreateRealtimeLogConfigInput, ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error)) {
	fake.createRealtimeLogConfigWithContextMutex.Lock()
	defer fake.createRealtimeLogConfigWithContextMutex.Unlock()
	fake.CreateRealtimeLogConfigWithContextStub = stub
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateRealtimeLogConfigInput, []request.Option) {
	fake.createRealtimeLogConfigWithContextMutex.RLock()
	defer fake.createRealtimeLogConfigWithContextMutex.RUnlock()
	argsForCall := fake.createRealtimeLogConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContextReturns(result1 *cloudfront.CreateRealtimeLogConfigOutput, result2 error) {
	fake.createRealtimeLogConfigWithContextMutex.Lock()
	defer fake.createRealtimeLogConfigWithContextMutex.Unlock()
	fake.CreateRealtimeLogConfigWithContextStub = nil
	fake.createRealtimeLogConfigWithContextReturns = struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateRealtimeLogConfigWithContextReturnsOnCall(i int, result1 *cloudfront.CreateRealtimeLogConfigOutput, result2 error) {
	fake.createRealtimeLogConfigWithContextMutex.Lock()
	defer fake.createRealtimeLogConfigWithContextMutex.Unlock()
	fake.CreateRealtimeLogConfigWithContextStub = nil
	if fake.createRealtimeLogConfigWithContextReturnsOnCall == nil {
		fake.createRealtimeLogConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.createRealtimeLogConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistribution(arg1 *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	fake.createStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionReturnsOnCall[len(fake.createStreamingDistributionArgsForCall)]
	fake.createStreamingDistributionArgsForCall = append(fake.createStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}{arg1})
	stub := fake.CreateStreamingDistributionStub
	fakeReturns := fake.createStreamingDistributionReturns
	fake.recordInvocation("CreateStreamingDistribution", []interface{}{arg1})
	fake.createStreamingDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionCallCount() int {
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	return len(fake.createStreamingDistributionArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionCalls(stub func(*cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error)) {
	fake.createStreamingDistributionMutex.Lock()
	defer fake.createStreamingDistributionMutex.Unlock()
	fake.CreateStreamingDistributionStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionArgsForCall(i int) *cloudfront.CreateStreamingDistributionInput {
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateStreamingDistributionReturns(result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.createStreamingDistributionMutex.Lock()
	defer fake.createStreamingDistributionMutex.Unlock()
	fake.CreateStreamingDistributionStub = nil
	fake.createStreamingDistributionReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.createStreamingDistributionMutex.Lock()
	defer fake.createStreamingDistributionMutex.Unlock()
	fake.CreateStreamingDistributionStub = nil
	if fake.createStreamingDistributionReturnsOnCall == nil {
		fake.createStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionOutput
			result2 error
		})
	}
	fake.createStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequest(arg1 *cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput) {
	fake.createStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionRequestReturnsOnCall[len(fake.createStreamingDistributionRequestArgsForCall)]
	fake.createStreamingDistributionRequestArgsForCall = append(fake.createStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}{arg1})
	stub := fake.CreateStreamingDistributionRequestStub
	fakeReturns := fake.createStreamingDistributionRequestReturns
	fake.recordInvocation("CreateStreamingDistributionRequest", []interface{}{arg1})
	fake.createStreamingDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequestCallCount() int {
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	return len(fake.createStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequestCalls(stub func(*cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput)) {
	fake.createStreamingDistributionRequestMutex.Lock()
	defer fake.createStreamingDistributionRequestMutex.Unlock()
	fake.CreateStreamingDistributionRequestStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequestArgsForCall(i int) *cloudfront.CreateStreamingDistributionInput {
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionOutput) {
	fake.createStreamingDistributionRequestMutex.Lock()
	defer fake.createStreamingDistributionRequestMutex.Unlock()
	fake.CreateStreamingDistributionRequestStub = nil
	fake.createStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionOutput) {
	fake.createStreamingDistributionRequestMutex.Lock()
	defer fake.createStreamingDistributionRequestMutex.Unlock()
	fake.CreateStreamingDistributionRequestStub = nil
	if fake.createStreamingDistributionRequestReturnsOnCall == nil {
		fake.createStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateStreamingDistributionOutput
		})
	}
	fake.createStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContext(arg1 context.Context, arg2 *cloudfront.CreateStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	fake.createStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithContextReturnsOnCall[len(fake.createStreamingDistributionWithContextArgsForCall)]
	fake.createStreamingDistributionWithContextArgsForCall = append(fake.createStreamingDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateStreamingDistributionWithContextStub
	fakeReturns := fake.createStreamingDistributionWithContextReturns
	fake.recordInvocation("CreateStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStreamingDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContextCallCount() int {
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.createStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContextCalls(stub func(context.Context, *cloudfront.CreateStreamingDistributionInput, ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error)) {
	fake.createStreamingDistributionWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateStreamingDistributionInput, []request.Option) {
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContextReturns(result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.createStreamingDistributionWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithContextStub = nil
	fake.createStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.createStreamingDistributionWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithContextStub = nil
	if fake.createStreamingDistributionWithContextReturnsOnCall == nil {
		fake.createStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTags(arg1 *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	fake.createStreamingDistributionWithTagsMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsReturnsOnCall[len(fake.createStreamingDistributionWithTagsArgsForCall)]
	fake.createStreamingDistributionWithTagsArgsForCall = append(fake.createStreamingDistributionWithTagsArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}{arg1})
	stub := fake.CreateStreamingDistributionWithTagsStub
	fakeReturns := fake.createStreamingDistributionWithTagsReturns
	fake.recordInvocation("CreateStreamingDistributionWithTags", []interface{}{arg1})
	fake.createStreamingDistributionWithTagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsCallCount() int {
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsCalls(stub func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)) {
	fake.createStreamingDistributionWithTagsMutex.Lock()
	defer fake.createStreamingDistributionWithTagsMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsArgsForCall(i int) *cloudfront.CreateStreamingDistributionWithTagsInput {
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionWithTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsReturns(result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.createStreamingDistributionWithTagsMutex.Lock()
	defer fake.createStreamingDistributionWithTagsMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsStub = nil
	fake.createStreamingDistributionWithTagsReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.createStreamingDistributionWithTagsMutex.Lock()
	defer fake.createStreamingDistributionWithTagsMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsStub = nil
	if fake.createStreamingDistributionWithTagsReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithTagsReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequest(arg1 *cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.createStreamingDistributionWithTagsRequestMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsRequestReturnsOnCall[len(fake.createStreamingDistributionWithTagsRequestArgsForCall)]
	fake.createStreamingDistributionWithTagsRequestArgsForCall = append(fake.createStreamingDistributionWithTagsRequestArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}{arg1})
	stub := fake.CreateStreamingDistributionWithTagsRequestStub
	fakeReturns := fake.createStreamingDistributionWithTagsRequestReturns
	fake.recordInvocation("CreateStreamingDistributionWithTagsRequest", []interface{}{arg1})
	fake.createStreamingDistributionWithTagsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequestCallCount() int {
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsRequestArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequestCalls(stub func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput)) {
	fake.createStreamingDistributionWithTagsRequestMutex.Lock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsRequestStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequestArgsForCall(i int) *cloudfront.CreateStreamingDistributionWithTagsInput {
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionWithTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequestReturns(result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.createStreamingDistributionWithTagsRequestMutex.Lock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsRequestStub = nil
	fake.createStreamingDistributionWithTagsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.createStreamingDistributionWithTagsRequestMutex.Lock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsRequestStub = nil
	if fake.createStreamingDistributionWithTagsRequestReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
		})
	}
	fake.createStreamingDistributionWithTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContext(arg1 context.Context, arg2 *cloudfront.CreateStreamingDistributionWithTagsInput, arg3 ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	fake.createStreamingDistributionWithTagsWithContextMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsWithContextReturnsOnCall[len(fake.createStreamingDistributionWithTagsWithContextArgsForCall)]
	fake.createStreamingDistributionWithTagsWithContextArgsForCall = append(fake.createStreamingDistributionWithTagsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.CreateStreamingDistributionWithTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateStreamingDistributionWithTagsWithContextStub
	fakeReturns := fake.createStreamingDistributionWithTagsWithContextReturns
	fake.recordInvocation("CreateStreamingDistributionWithTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStreamingDistributionWithTagsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContextCallCount() int {
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsWithContextArgsForCall)
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContextCalls(stub func(context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)) {
	fake.createStreamingDistributionWithTagsWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsWithContextStub = stub
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContextArgsForCall(i int) (context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, []request.Option) {
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	argsForCall := fake.createStreamingDistributionWithTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContextReturns(result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.createStreamingDistributionWithTagsWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsWithContextStub = nil
	fake.createStreamingDistributionWithTagsWithContextReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) CreateStreamingDistributionWithTagsWithContextReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.createStreamingDistributionWithTagsWithContextMutex.Lock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.Unlock()
	fake.CreateStreamingDistributionWithTagsWithContextStub = nil
	if fake.createStreamingDistributionWithTagsWithContextReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithTagsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicy(arg1 *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	fake.deleteCachePolicyMutex.Lock()
	ret, specificReturn := fake.deleteCachePolicyReturnsOnCall[len(fake.deleteCachePolicyArgsForCall)]
	fake.deleteCachePolicyArgsForCall = append(fake.deleteCachePolicyArgsForCall, struct {
		arg1 *cloudfront.DeleteCachePolicyInput
	}{arg1})
	stub := fake.DeleteCachePolicyStub
	fakeReturns := fake.deleteCachePolicyReturns
	fake.recordInvocation("DeleteCachePolicy", []interface{}{arg1})
	fake.deleteCachePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCachePolicyCallCount() int {
	fake.deleteCachePolicyMutex.RLock()
	defer fake.deleteCachePolicyMutex.RUnlock()
	return len(fake.deleteCachePolicyArgsForCall)
}

func (fake *FakeCloudfront) DeleteCachePolicyCalls(stub func(*cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error)) {
	fake.deleteCachePolicyMutex.Lock()
	defer fake.deleteCachePolicyMutex.Unlock()
	fake.DeleteCachePolicyStub = stub
}

func (fake *FakeCloudfront) DeleteCachePolicyArgsForCall(i int) *cloudfront.DeleteCachePolicyInput {
	fake.deleteCachePolicyMutex.RLock()
	defer fake.deleteCachePolicyMutex.RUnlock()
	argsForCall := fake.deleteCachePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteCachePolicyReturns(result1 *cloudfront.DeleteCachePolicyOutput, result2 error) {
	fake.deleteCachePolicyMutex.Lock()
	defer fake.deleteCachePolicyMutex.Unlock()
	fake.DeleteCachePolicyStub = nil
	fake.deleteCachePolicyReturns = struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicyReturnsOnCall(i int, result1 *cloudfront.DeleteCachePolicyOutput, result2 error) {
	fake.deleteCachePolicyMutex.Lock()
	defer fake.deleteCachePolicyMutex.Unlock()
	fake.DeleteCachePolicyStub = nil
	if fake.deleteCachePolicyReturnsOnCall == nil {
		fake.deleteCachePolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCachePolicyOutput
			result2 error
		})
	}
	fake.deleteCachePolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicyRequest(arg1 *cloudfront.DeleteCachePolicyInput) (*request.Request, *cloudfront.DeleteCachePolicyOutput) {
	fake.deleteCachePolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteCachePolicyRequestReturnsOnCall[len(fake.deleteCachePolicyRequestArgsForCall)]
	fake.deleteCachePolicyRequestArgsForCall = append(fake.deleteCachePolicyRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteCachePolicyInput
	}{arg1})
	stub := fake.DeleteCachePolicyRequestStub
	fakeReturns := fake.deleteCachePolicyRequestReturns
	fake.recordInvocation("DeleteCachePolicyRequest", []interface{}{arg1})
	fake.deleteCachePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCachePolicyRequestCallCount() int {
	fake.deleteCachePolicyRequestMutex.RLock()
	defer fake.deleteCachePolicyRequestMutex.RUnlock()
	return len(fake.deleteCachePolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteCachePolicyRequestCalls(stub func(*cloudfront.DeleteCachePolicyInput) (*request.Request, *cloudfront.DeleteCachePolicyOutput)) {
	fake.deleteCachePolicyRequestMutex.Lock()
	defer fake.deleteCachePolicyRequestMutex.Unlock()
	fake.DeleteCachePolicyRequestStub = stub
}

func (fake *FakeCloudfront) DeleteCachePolicyRequestArgsForCall(i int) *cloudfront.DeleteCachePolicyInput {
	fake.deleteCachePolicyRequestMutex.RLock()
	defer fake.deleteCachePolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteCachePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteCachePolicyRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteCachePolicyOutput) {
	fake.deleteCachePolicyRequestMutex.Lock()
	defer fake.deleteCachePolicyRequestMutex.Unlock()
	fake.DeleteCachePolicyRequestStub = nil
	fake.deleteCachePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteCachePolicyOutput) {
	fake.deleteCachePolicyRequestMutex.Lock()
	defer fake.deleteCachePolicyRequestMutex.Unlock()
	fake.DeleteCachePolicyRequestStub = nil
	if fake.deleteCachePolicyRequestReturnsOnCall == nil {
		fake.deleteCachePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteCachePolicyOutput
		})
	}
	fake.deleteCachePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContext(arg1 context.Context, arg2 *cloudfront.DeleteCachePolicyInput, arg3 ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error) {
	fake.deleteCachePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCachePolicyWithContextReturnsOnCall[len(fake.deleteCachePolicyWithContextArgsForCall)]
	fake.deleteCachePolicyWithContextArgsForCall = append(fake.deleteCachePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteCachePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCachePolicyWithContextStub
	fakeReturns := fake.deleteCachePolicyWithContextReturns
	fake.recordInvocation("DeleteCachePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCachePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContextCallCount() int {
	fake.deleteCachePolicyWithContextMutex.RLock()
	defer fake.deleteCachePolicyWithContextMutex.RUnlock()
	return len(fake.deleteCachePolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContextCalls(stub func(context.Context, *cloudfront.DeleteCachePolicyInput, ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error)) {
	fake.deleteCachePolicyWithContextMutex.Lock()
	defer fake.deleteCachePolicyWithContextMutex.Unlock()
	fake.DeleteCachePolicyWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteCachePolicyInput, []request.Option) {
	fake.deleteCachePolicyWithContextMutex.RLock()
	defer fake.deleteCachePolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteCachePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContextReturns(result1 *cloudfront.DeleteCachePolicyOutput, result2 error) {
	fake.deleteCachePolicyWithContextMutex.Lock()
	defer fake.deleteCachePolicyWithContextMutex.Unlock()
	fake.DeleteCachePolicyWithContextStub = nil
	fake.deleteCachePolicyWithContextReturns = struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCachePolicyWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteCachePolicyOutput, result2 error) {
	fake.deleteCachePolicyWithContextMutex.Lock()
	defer fake.deleteCachePolicyWithContextMutex.Unlock()
	fake.DeleteCachePolicyWithContextStub = nil
	if fake.deleteCachePolicyWithContextReturnsOnCall == nil {
		fake.deleteCachePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCachePolicyOutput
			result2 error
		})
	}
	fake.deleteCachePolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentity(arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	fake.deleteCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.DeleteCloudFrontOriginAccessIdentityStub
	fakeReturns := fake.deleteCloudFrontOriginAccessIdentityReturns
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.deleteCloudFrontOriginAccessIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityCalls(stub func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)) {
	fake.deleteCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityStub = stub
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.DeleteCloudFrontOriginAccessIdentityInput {
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	argsForCall := fake.deleteCloudFrontOriginAccessIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.deleteCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityStub = nil
	fake.deleteCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.deleteCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.DeleteCloudFrontOriginAccessIdentityRequestStub
	fakeReturns := fake.deleteCloudFrontOriginAccessIdentityRequestReturns
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequestCalls(stub func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)) {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityRequestStub = stub
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.DeleteCloudFrontOriginAccessIdentityInput {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	argsForCall := fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityRequestStub = nil
	fake.deleteCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContext(arg1 context.Context, arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCloudFrontOriginAccessIdentityWithContextStub
	fakeReturns := fake.deleteCloudFrontOriginAccessIdentityWithContextReturns
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContextCalls(stub func(context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	argsForCall := fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.deleteCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.DeleteCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistribution(arg1 *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	fake.deleteDistributionMutex.Lock()
	ret, specificReturn := fake.deleteDistributionReturnsOnCall[len(fake.deleteDistributionArgsForCall)]
	fake.deleteDistributionArgsForCall = append(fake.deleteDistributionArgsForCall, struct {
		arg1 *cloudfront.DeleteDistributionInput
	}{arg1})
	stub := fake.DeleteDistributionStub
	fakeReturns := fake.deleteDistributionReturns
	fake.recordInvocation("DeleteDistribution", []interface{}{arg1})
	fake.deleteDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteDistributionCallCount() int {
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	return len(fake.deleteDistributionArgsForCall)
}

func (fake *FakeCloudfront) DeleteDistributionCalls(stub func(*cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error)) {
	fake.deleteDistributionMutex.Lock()
	defer fake.deleteDistributionMutex.Unlock()
	fake.DeleteDistributionStub = stub
}

func (fake *FakeCloudfront) DeleteDistributionArgsForCall(i int) *cloudfront.DeleteDistributionInput {
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	argsForCall := fake.deleteDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteDistributionReturns(result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.deleteDistributionMutex.Lock()
	defer fake.deleteDistributionMutex.Unlock()
	fake.DeleteDistributionStub = nil
	fake.deleteDistributionReturns = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistributionReturnsOnCall(i int, result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.deleteDistributionMutex.Lock()
	defer fake.deleteDistributionMutex.Unlock()
	fake.DeleteDistributionStub = nil
	if fake.deleteDistributionReturnsOnCall == nil {
		fake.deleteDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteDistributionOutput
			result2 error
		})
	}
	fake.deleteDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistributionRequest(arg1 *cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput) {
	fake.deleteDistributionRequestMutex.Lock()
	ret, specificReturn := fake.deleteDistributionRequestReturnsOnCall[len(fake.deleteDistributionRequestArgsForCall)]
	fake.deleteDistributionRequestArgsForCall = append(fake.deleteDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteDistributionInput
	}{arg1})
	stub := fake.DeleteDistributionRequestStub
	fakeReturns := fake.deleteDistributionRequestReturns
	fake.recordInvocation("DeleteDistributionRequest", []interface{}{arg1})
	fake.deleteDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteDistributionRequestCallCount() int {
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	return len(fake.deleteDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteDistributionRequestCalls(stub func(*cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput)) {
	fake.deleteDistributionRequestMutex.Lock()
	defer fake.deleteDistributionRequestMutex.Unlock()
	fake.DeleteDistributionRequestStub = stub
}

func (fake *FakeCloudfront) DeleteDistributionRequestArgsForCall(i int) *cloudfront.DeleteDistributionInput {
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	argsForCall := fake.deleteDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteDistributionOutput) {
	fake.deleteDistributionRequestMutex.Lock()
	defer fake.deleteDistributionRequestMutex.Unlock()
	fake.DeleteDistributionRequestStub = nil
	fake.deleteDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteDistributionOutput) {
	fake.deleteDistributionRequestMutex.Lock()
	defer fake.deleteDistributionRequestMutex.Unlock()
	fake.DeleteDistributionRequestStub = nil
	if fake.deleteDistributionRequestReturnsOnCall == nil {
		fake.deleteDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteDistributionOutput
		})
	}
	fake.deleteDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistributionWithContext(arg1 context.Context, arg2 *cloudfront.DeleteDistributionInput, arg3 ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	fake.deleteDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDistributionWithContextReturnsOnCall[len(fake.deleteDistributionWithContextArgsForCall)]
	fake.deleteDistributionWithContextArgsForCall = append(fake.deleteDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteDistributionWithContextStub
	fakeReturns := fake.deleteDistributionWithContextReturns
	fake.recordInvocation("DeleteDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteDistributionWithContextCallCount() int {
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	return len(fake.deleteDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteDistributionWithContextCalls(stub func(context.Context, *cloudfront.DeleteDistributionInput, ...request.Option) (*cloudfront.DeleteDistributionOutput, error)) {
	fake.deleteDistributionWithContextMutex.Lock()
	defer fake.deleteDistributionWithContextMutex.Unlock()
	fake.DeleteDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteDistributionInput, []request.Option) {
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	argsForCall := fake.deleteDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteDistributionWithContextReturns(result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.deleteDistributionWithContextMutex.Lock()
	defer fake.deleteDistributionWithContextMutex.Unlock()
	fake.DeleteDistributionWithContextStub = nil
	fake.deleteDistributionWithContextReturns = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.deleteDistributionWithContextMutex.Lock()
	defer fake.deleteDistributionWithContextMutex.Unlock()
	fake.DeleteDistributionWithContextStub = nil
	if fake.deleteDistributionWithContextReturnsOnCall == nil {
		fake.deleteDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteDistributionOutput
			result2 error
		})
	}
	fake.deleteDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfig(arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	fake.deleteFieldLevelEncryptionConfigMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionConfigReturnsOnCall[len(fake.deleteFieldLevelEncryptionConfigArgsForCall)]
	fake.deleteFieldLevelEncryptionConfigArgsForCall = append(fake.deleteFieldLevelEncryptionConfigArgsForCall, struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.DeleteFieldLevelEncryptionConfigStub
	fakeReturns := fake.deleteFieldLevelEncryptionConfigReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionConfig", []interface{}{arg1})
	fake.deleteFieldLevelEncryptionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigCallCount() int {
	fake.deleteFieldLevelEncryptionConfigMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionConfigArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigCalls(stub func(*cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)) {
	fake.deleteFieldLevelEncryptionConfigMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigArgsForCall(i int) *cloudfront.DeleteFieldLevelEncryptionConfigInput {
	fake.deleteFieldLevelEncryptionConfigMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigReturns(result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, result2 error) {
	fake.deleteFieldLevelEncryptionConfigMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigStub = nil
	fake.deleteFieldLevelEncryptionConfigReturns = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigReturnsOnCall(i int, result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, result2 error) {
	fake.deleteFieldLevelEncryptionConfigMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigStub = nil
	if fake.deleteFieldLevelEncryptionConfigReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.deleteFieldLevelEncryptionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequest(arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionConfigRequestReturnsOnCall[len(fake.deleteFieldLevelEncryptionConfigRequestArgsForCall)]
	fake.deleteFieldLevelEncryptionConfigRequestArgsForCall = append(fake.deleteFieldLevelEncryptionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.DeleteFieldLevelEncryptionConfigRequestStub
	fakeReturns := fake.deleteFieldLevelEncryptionConfigRequestReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionConfigRequest", []interface{}{arg1})
	fake.deleteFieldLevelEncryptionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequestCallCount() int {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequestCalls(stub func(*cloudfront.DeleteFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionConfigOutput)) {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigRequestStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequestArgsForCall(i int) *cloudfront.DeleteFieldLevelEncryptionConfigInput {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigRequestStub = nil
	fake.deleteFieldLevelEncryptionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	fake.deleteFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigRequestStub = nil
	if fake.deleteFieldLevelEncryptionConfigRequestReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		})
	}
	fake.deleteFieldLevelEncryptionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContext(arg1 context.Context, arg2 *cloudfront.DeleteFieldLevelEncryptionConfigInput, arg3 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionConfigWithContextReturnsOnCall[len(fake.deleteFieldLevelEncryptionConfigWithContextArgsForCall)]
	fake.deleteFieldLevelEncryptionConfigWithContextArgsForCall = append(fake.deleteFieldLevelEncryptionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteFieldLevelEncryptionConfigWithContextStub
	fakeReturns := fake.deleteFieldLevelEncryptionConfigWithContextReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContextCallCount() int {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContextCalls(stub func(context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)) {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, []request.Option) {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContextReturns(result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, result2 error) {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigWithContextStub = nil
	fake.deleteFieldLevelEncryptionConfigWithContextReturns = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput, result2 error) {
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionConfigWithContextStub = nil
	if fake.deleteFieldLevelEncryptionConfigWithContextReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.deleteFieldLevelEncryptionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfile(arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	fake.deleteFieldLevelEncryptionProfileMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionProfileReturnsOnCall[len(fake.deleteFieldLevelEncryptionProfileArgsForCall)]
	fake.deleteFieldLevelEncryptionProfileArgsForCall = append(fake.deleteFieldLevelEncryptionProfileArgsForCall, struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.DeleteFieldLevelEncryptionProfileStub
	fakeReturns := fake.deleteFieldLevelEncryptionProfileReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionProfile", []interface{}{arg1})
	fake.deleteFieldLevelEncryptionProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileCallCount() int {
	fake.deleteFieldLevelEncryptionProfileMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionProfileArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileCalls(stub func(*cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)) {
	fake.deleteFieldLevelEncryptionProfileMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileArgsForCall(i int) *cloudfront.DeleteFieldLevelEncryptionProfileInput {
	fake.deleteFieldLevelEncryptionProfileMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileReturns(result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, result2 error) {
	fake.deleteFieldLevelEncryptionProfileMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileStub = nil
	fake.deleteFieldLevelEncryptionProfileReturns = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileReturnsOnCall(i int, result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, result2 error) {
	fake.deleteFieldLevelEncryptionProfileMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileStub = nil
	if fake.deleteFieldLevelEncryptionProfileReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionProfileReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.deleteFieldLevelEncryptionProfileReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequest(arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionProfileRequestReturnsOnCall[len(fake.deleteFieldLevelEncryptionProfileRequestArgsForCall)]
	fake.deleteFieldLevelEncryptionProfileRequestArgsForCall = append(fake.deleteFieldLevelEncryptionProfileRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.DeleteFieldLevelEncryptionProfileRequestStub
	fakeReturns := fake.deleteFieldLevelEncryptionProfileRequestReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionProfileRequest", []interface{}{arg1})
	fake.deleteFieldLevelEncryptionProfileRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequestCallCount() int {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionProfileRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequestCalls(stub func(*cloudfront.DeleteFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionProfileOutput)) {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileRequestStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequestArgsForCall(i int) *cloudfront.DeleteFieldLevelEncryptionProfileInput {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileRequestStub = nil
	fake.deleteFieldLevelEncryptionProfileRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	fake.deleteFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileRequestStub = nil
	if fake.deleteFieldLevelEncryptionProfileRequestReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		})
	}
	fake.deleteFieldLevelEncryptionProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContext(arg1 context.Context, arg2 *cloudfront.DeleteFieldLevelEncryptionProfileInput, arg3 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFieldLevelEncryptionProfileWithContextReturnsOnCall[len(fake.deleteFieldLevelEncryptionProfileWithContextArgsForCall)]
	fake.deleteFieldLevelEncryptionProfileWithContextArgsForCall = append(fake.deleteFieldLevelEncryptionProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteFieldLevelEncryptionProfileWithContextStub
	fakeReturns := fake.deleteFieldLevelEncryptionProfileWithContextReturns
	fake.recordInvocation("DeleteFieldLevelEncryptionProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContextCallCount() int {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	return len(fake.deleteFieldLevelEncryptionProfileWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContextCalls(stub func(context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)) {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, []request.Option) {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	argsForCall := fake.deleteFieldLevelEncryptionProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContextReturns(result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, result2 error) {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileWithContextStub = nil
	fake.deleteFieldLevelEncryptionProfileWithContextReturns = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFieldLevelEncryptionProfileWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput, result2 error) {
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.DeleteFieldLevelEncryptionProfileWithContextStub = nil
	if fake.deleteFieldLevelEncryptionProfileWithContextReturnsOnCall == nil {
		fake.deleteFieldLevelEncryptionProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.deleteFieldLevelEncryptionProfileWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunction(arg1 *cloudfront.DeleteFunctionInput) (*cloudfront.DeleteFunctionOutput, error) {
	fake.deleteFunctionMutex.Lock()
	ret, specificReturn := fake.deleteFunctionReturnsOnCall[len(fake.deleteFunctionArgsForCall)]
	fake.deleteFunctionArgsForCall = append(fake.deleteFunctionArgsForCall, struct {
		arg1 *cloudfront.DeleteFunctionInput
	}{arg1})
	stub := fake.DeleteFunctionStub
	fakeReturns := fake.deleteFunctionReturns
	fake.recordInvocation("DeleteFunction", []interface{}{arg1})
	fake.deleteFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFunctionCallCount() int {
	fake.deleteFunctionMutex.RLock()
	defer fake.deleteFunctionMutex.RUnlock()
	return len(fake.deleteFunctionArgsForCall)
}

func (fake *FakeCloudfront) DeleteFunctionCalls(stub func(*cloudfront.DeleteFunctionInput) (*cloudfront.DeleteFunctionOutput, error)) {
	fake.deleteFunctionMutex.Lock()
	defer fake.deleteFunctionMutex.Unlock()
	fake.DeleteFunctionStub = stub
}

func (fake *FakeCloudfront) DeleteFunctionArgsForCall(i int) *cloudfront.DeleteFunctionInput {
	fake.deleteFunctionMutex.RLock()
	defer fake.deleteFunctionMutex.RUnlock()
	argsForCall := fake.deleteFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFunctionReturns(result1 *cloudfront.DeleteFunctionOutput, result2 error) {
	fake.deleteFunctionMutex.Lock()
	defer fake.deleteFunctionMutex.Unlock()
	fake.DeleteFunctionStub = nil
	fake.deleteFunctionReturns = struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunctionReturnsOnCall(i int, result1 *cloudfront.DeleteFunctionOutput, result2 error) {
	fake.deleteFunctionMutex.Lock()
	defer fake.deleteFunctionMutex.Unlock()
	fake.DeleteFunctionStub = nil
	if fake.deleteFunctionReturnsOnCall == nil {
		fake.deleteFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFunctionOutput
			result2 error
		})
	}
	fake.deleteFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunctionRequest(arg1 *cloudfront.DeleteFunctionInput) (*request.Request, *cloudfront.DeleteFunctionOutput) {
	fake.deleteFunctionRequestMutex.Lock()
	ret, specificReturn := fake.deleteFunctionRequestReturnsOnCall[len(fake.deleteFunctionRequestArgsForCall)]
	fake.deleteFunctionRequestArgsForCall = append(fake.deleteFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteFunctionInput
	}{arg1})
	stub := fake.DeleteFunctionRequestStub
	fakeReturns := fake.deleteFunctionRequestReturns
	fake.recordInvocation("DeleteFunctionRequest", []interface{}{arg1})
	fake.deleteFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFunctionRequestCallCount() int {
	fake.deleteFunctionRequestMutex.RLock()
	defer fake.deleteFunctionRequestMutex.RUnlock()
	return len(fake.deleteFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteFunctionRequestCalls(stub func(*cloudfront.DeleteFunctionInput) (*request.Request, *cloudfront.DeleteFunctionOutput)) {
	fake.deleteFunctionRequestMutex.Lock()
	defer fake.deleteFunctionRequestMutex.Unlock()
	fake.DeleteFunctionRequestStub = stub
}

func (fake *FakeCloudfront) DeleteFunctionRequestArgsForCall(i int) *cloudfront.DeleteFunctionInput {
	fake.deleteFunctionRequestMutex.RLock()
	defer fake.deleteFunctionRequestMutex.RUnlock()
	argsForCall := fake.deleteFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteFunctionOutput) {
	fake.deleteFunctionRequestMutex.Lock()
	defer fake.deleteFunctionRequestMutex.Unlock()
	fake.DeleteFunctionRequestStub = nil
	fake.deleteFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteFunctionOutput) {
	fake.deleteFunctionRequestMutex.Lock()
	defer fake.deleteFunctionRequestMutex.Unlock()
	fake.DeleteFunctionRequestStub = nil
	if fake.deleteFunctionRequestReturnsOnCall == nil {
		fake.deleteFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteFunctionOutput
		})
	}
	fake.deleteFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunctionWithContext(arg1 context.Context, arg2 *cloudfront.DeleteFunctionInput, arg3 ...request.Option) (*cloudfront.DeleteFunctionOutput, error) {
	fake.deleteFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFunctionWithContextReturnsOnCall[len(fake.deleteFunctionWithContextArgsForCall)]
	fake.deleteFunctionWithContextArgsForCall = append(fake.deleteFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteFunctionWithContextStub
	fakeReturns := fake.deleteFunctionWithContextReturns
	fake.recordInvocation("DeleteFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteFunctionWithContextCallCount() int {
	fake.deleteFunctionWithContextMutex.RLock()
	defer fake.deleteFunctionWithContextMutex.RUnlock()
	return len(fake.deleteFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteFunctionWithContextCalls(stub func(context.Context, *cloudfront.DeleteFunctionInput, ...request.Option) (*cloudfront.DeleteFunctionOutput, error)) {
	fake.deleteFunctionWithContextMutex.Lock()
	defer fake.deleteFunctionWithContextMutex.Unlock()
	fake.DeleteFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteFunctionInput, []request.Option) {
	fake.deleteFunctionWithContextMutex.RLock()
	defer fake.deleteFunctionWithContextMutex.RUnlock()
	argsForCall := fake.deleteFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteFunctionWithContextReturns(result1 *cloudfront.DeleteFunctionOutput, result2 error) {
	fake.deleteFunctionWithContextMutex.Lock()
	defer fake.deleteFunctionWithContextMutex.Unlock()
	fake.DeleteFunctionWithContextStub = nil
	fake.deleteFunctionWithContextReturns = struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteFunctionOutput, result2 error) {
	fake.deleteFunctionWithContextMutex.Lock()
	defer fake.deleteFunctionWithContextMutex.Unlock()
	fake.DeleteFunctionWithContextStub = nil
	if fake.deleteFunctionWithContextReturnsOnCall == nil {
		fake.deleteFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteFunctionOutput
			result2 error
		})
	}
	fake.deleteFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroup(arg1 *cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error) {
	fake.deleteKeyGroupMutex.Lock()
	ret, specificReturn := fake.deleteKeyGroupReturnsOnCall[len(fake.deleteKeyGroupArgsForCall)]
	fake.deleteKeyGroupArgsForCall = append(fake.deleteKeyGroupArgsForCall, struct {
		arg1 *cloudfront.DeleteKeyGroupInput
	}{arg1})
	stub := fake.DeleteKeyGroupStub
	fakeReturns := fake.deleteKeyGroupReturns
	fake.recordInvocation("DeleteKeyGroup", []interface{}{arg1})
	fake.deleteKeyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteKeyGroupCallCount() int {
	fake.deleteKeyGroupMutex.RLock()
	defer fake.deleteKeyGroupMutex.RUnlock()
	return len(fake.deleteKeyGroupArgsForCall)
}

func (fake *FakeCloudfront) DeleteKeyGroupCalls(stub func(*cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error)) {
	fake.deleteKeyGroupMutex.Lock()
	defer fake.deleteKeyGroupMutex.Unlock()
	fake.DeleteKeyGroupStub = stub
}

func (fake *FakeCloudfront) DeleteKeyGroupArgsForCall(i int) *cloudfront.DeleteKeyGroupInput {
	fake.deleteKeyGroupMutex.RLock()
	defer fake.deleteKeyGroupMutex.RUnlock()
	argsForCall := fake.deleteKeyGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteKeyGroupReturns(result1 *cloudfront.DeleteKeyGroupOutput, result2 error) {
	fake.deleteKeyGroupMutex.Lock()
	defer fake.deleteKeyGroupMutex.Unlock()
	fake.DeleteKeyGroupStub = nil
	fake.deleteKeyGroupReturns = struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroupReturnsOnCall(i int, result1 *cloudfront.DeleteKeyGroupOutput, result2 error) {
	fake.deleteKeyGroupMutex.Lock()
	defer fake.deleteKeyGroupMutex.Unlock()
	fake.DeleteKeyGroupStub = nil
	if fake.deleteKeyGroupReturnsOnCall == nil {
		fake.deleteKeyGroupReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteKeyGroupOutput
			result2 error
		})
	}
	fake.deleteKeyGroupReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroupRequest(arg1 *cloudfront.DeleteKeyGroupInput) (*request.Request, *cloudfront.DeleteKeyGroupOutput) {
	fake.deleteKeyGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteKeyGroupRequestReturnsOnCall[len(fake.deleteKeyGroupRequestArgsForCall)]
	fake.deleteKeyGroupRequestArgsForCall = append(fake.deleteKeyGroupRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteKeyGroupInput
	}{arg1})
	stub := fake.DeleteKeyGroupRequestStub
	fakeReturns := fake.deleteKeyGroupRequestReturns
	fake.recordInvocation("DeleteKeyGroupRequest", []interface{}{arg1})
	fake.deleteKeyGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteKeyGroupRequestCallCount() int {
	fake.deleteKeyGroupRequestMutex.RLock()
	defer fake.deleteKeyGroupRequestMutex.RUnlock()
	return len(fake.deleteKeyGroupRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteKeyGroupRequestCalls(stub func(*cloudfront.DeleteKeyGroupInput) (*request.Request, *cloudfront.DeleteKeyGroupOutput)) {
	fake.deleteKeyGroupRequestMutex.Lock()
	defer fake.deleteKeyGroupRequestMutex.Unlock()
	fake.DeleteKeyGroupRequestStub = stub
}

func (fake *FakeCloudfront) DeleteKeyGroupRequestArgsForCall(i int) *cloudfront.DeleteKeyGroupInput {
	fake.deleteKeyGroupRequestMutex.RLock()
	defer fake.deleteKeyGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteKeyGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteKeyGroupRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteKeyGroupOutput) {
	fake.deleteKeyGroupRequestMutex.Lock()
	defer fake.deleteKeyGroupRequestMutex.Unlock()
	fake.DeleteKeyGroupRequestStub = nil
	fake.deleteKeyGroupRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteKeyGroupOutput) {
	fake.deleteKeyGroupRequestMutex.Lock()
	defer fake.deleteKeyGroupRequestMutex.Unlock()
	fake.DeleteKeyGroupRequestStub = nil
	if fake.deleteKeyGroupRequestReturnsOnCall == nil {
		fake.deleteKeyGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteKeyGroupOutput
		})
	}
	fake.deleteKeyGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContext(arg1 context.Context, arg2 *cloudfront.DeleteKeyGroupInput, arg3 ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error) {
	fake.deleteKeyGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteKeyGroupWithContextReturnsOnCall[len(fake.deleteKeyGroupWithContextArgsForCall)]
	fake.deleteKeyGroupWithContextArgsForCall = append(fake.deleteKeyGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteKeyGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteKeyGroupWithContextStub
	fakeReturns := fake.deleteKeyGroupWithContextReturns
	fake.recordInvocation("DeleteKeyGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteKeyGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContextCallCount() int {
	fake.deleteKeyGroupWithContextMutex.RLock()
	defer fake.deleteKeyGroupWithContextMutex.RUnlock()
	return len(fake.deleteKeyGroupWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContextCalls(stub func(context.Context, *cloudfront.DeleteKeyGroupInput, ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error)) {
	fake.deleteKeyGroupWithContextMutex.Lock()
	defer fake.deleteKeyGroupWithContextMutex.Unlock()
	fake.DeleteKeyGroupWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteKeyGroupInput, []request.Option) {
	fake.deleteKeyGroupWithContextMutex.RLock()
	defer fake.deleteKeyGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteKeyGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContextReturns(result1 *cloudfront.DeleteKeyGroupOutput, result2 error) {
	fake.deleteKeyGroupWithContextMutex.Lock()
	defer fake.deleteKeyGroupWithContextMutex.Unlock()
	fake.DeleteKeyGroupWithContextStub = nil
	fake.deleteKeyGroupWithContextReturns = struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteKeyGroupWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteKeyGroupOutput, result2 error) {
	fake.deleteKeyGroupWithContextMutex.Lock()
	defer fake.deleteKeyGroupWithContextMutex.Unlock()
	fake.DeleteKeyGroupWithContextStub = nil
	if fake.deleteKeyGroupWithContextReturnsOnCall == nil {
		fake.deleteKeyGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteKeyGroupOutput
			result2 error
		})
	}
	fake.deleteKeyGroupWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscription(arg1 *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	fake.deleteMonitoringSubscriptionMutex.Lock()
	ret, specificReturn := fake.deleteMonitoringSubscriptionReturnsOnCall[len(fake.deleteMonitoringSubscriptionArgsForCall)]
	fake.deleteMonitoringSubscriptionArgsForCall = append(fake.deleteMonitoringSubscriptionArgsForCall, struct {
		arg1 *cloudfront.DeleteMonitoringSubscriptionInput
	}{arg1})
	stub := fake.DeleteMonitoringSubscriptionStub
	fakeReturns := fake.deleteMonitoringSubscriptionReturns
	fake.recordInvocation("DeleteMonitoringSubscription", []interface{}{arg1})
	fake.deleteMonitoringSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionCallCount() int {
	fake.deleteMonitoringSubscriptionMutex.RLock()
	defer fake.deleteMonitoringSubscriptionMutex.RUnlock()
	return len(fake.deleteMonitoringSubscriptionArgsForCall)
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionCalls(stub func(*cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)) {
	fake.deleteMonitoringSubscriptionMutex.Lock()
	defer fake.deleteMonitoringSubscriptionMutex.Unlock()
	fake.DeleteMonitoringSubscriptionStub = stub
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionArgsForCall(i int) *cloudfront.DeleteMonitoringSubscriptionInput {
	fake.deleteMonitoringSubscriptionMutex.RLock()
	defer fake.deleteMonitoringSubscriptionMutex.RUnlock()
	argsForCall := fake.deleteMonitoringSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionReturns(result1 *cloudfront.DeleteMonitoringSubscriptionOutput, result2 error) {
	fake.deleteMonitoringSubscriptionMutex.Lock()
	defer fake.deleteMonitoringSubscriptionMutex.Unlock()
	fake.DeleteMonitoringSubscriptionStub = nil
	fake.deleteMonitoringSubscriptionReturns = struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionReturnsOnCall(i int, result1 *cloudfront.DeleteMonitoringSubscriptionOutput, result2 error) {
	fake.deleteMonitoringSubscriptionMutex.Lock()
	defer fake.deleteMonitoringSubscriptionMutex.Unlock()
	fake.DeleteMonitoringSubscriptionStub = nil
	if fake.deleteMonitoringSubscriptionReturnsOnCall == nil {
		fake.deleteMonitoringSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.deleteMonitoringSubscriptionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequest(arg1 *cloudfront.DeleteMonitoringSubscriptionInput) (*request.Request, *cloudfront.DeleteMonitoringSubscriptionOutput) {
	fake.deleteMonitoringSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.deleteMonitoringSubscriptionRequestReturnsOnCall[len(fake.deleteMonitoringSubscriptionRequestArgsForCall)]
	fake.deleteMonitoringSubscriptionRequestArgsForCall = append(fake.deleteMonitoringSubscriptionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteMonitoringSubscriptionInput
	}{arg1})
	stub := fake.DeleteMonitoringSubscriptionRequestStub
	fakeReturns := fake.deleteMonitoringSubscriptionRequestReturns
	fake.recordInvocation("DeleteMonitoringSubscriptionRequest", []interface{}{arg1})
	fake.deleteMonitoringSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequestCallCount() int {
	fake.deleteMonitoringSubscriptionRequestMutex.RLock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.RUnlock()
	return len(fake.deleteMonitoringSubscriptionRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequestCalls(stub func(*cloudfront.DeleteMonitoringSubscriptionInput) (*request.Request, *cloudfront.DeleteMonitoringSubscriptionOutput)) {
	fake.deleteMonitoringSubscriptionRequestMutex.Lock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.Unlock()
	fake.DeleteMonitoringSubscriptionRequestStub = stub
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequestArgsForCall(i int) *cloudfront.DeleteMonitoringSubscriptionInput {
	fake.deleteMonitoringSubscriptionRequestMutex.RLock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.deleteMonitoringSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteMonitoringSubscriptionOutput) {
	fake.deleteMonitoringSubscriptionRequestMutex.Lock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.Unlock()
	fake.DeleteMonitoringSubscriptionRequestStub = nil
	fake.deleteMonitoringSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteMonitoringSubscriptionOutput) {
	fake.deleteMonitoringSubscriptionRequestMutex.Lock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.Unlock()
	fake.DeleteMonitoringSubscriptionRequestStub = nil
	if fake.deleteMonitoringSubscriptionRequestReturnsOnCall == nil {
		fake.deleteMonitoringSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteMonitoringSubscriptionOutput
		})
	}
	fake.deleteMonitoringSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContext(arg1 context.Context, arg2 *cloudfront.DeleteMonitoringSubscriptionInput, arg3 ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	fake.deleteMonitoringSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteMonitoringSubscriptionWithContextReturnsOnCall[len(fake.deleteMonitoringSubscriptionWithContextArgsForCall)]
	fake.deleteMonitoringSubscriptionWithContextArgsForCall = append(fake.deleteMonitoringSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteMonitoringSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteMonitoringSubscriptionWithContextStub
	fakeReturns := fake.deleteMonitoringSubscriptionWithContextReturns
	fake.recordInvocation("DeleteMonitoringSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteMonitoringSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContextCallCount() int {
	fake.deleteMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.RUnlock()
	return len(fake.deleteMonitoringSubscriptionWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContextCalls(stub func(context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)) {
	fake.deleteMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.Unlock()
	fake.DeleteMonitoringSubscriptionWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, []request.Option) {
	fake.deleteMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.deleteMonitoringSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContextReturns(result1 *cloudfront.DeleteMonitoringSubscriptionOutput, result2 error) {
	fake.deleteMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.Unlock()
	fake.DeleteMonitoringSubscriptionWithContextStub = nil
	fake.deleteMonitoringSubscriptionWithContextReturns = struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteMonitoringSubscriptionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteMonitoringSubscriptionOutput, result2 error) {
	fake.deleteMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.Unlock()
	fake.DeleteMonitoringSubscriptionWithContextStub = nil
	if fake.deleteMonitoringSubscriptionWithContextReturnsOnCall == nil {
		fake.deleteMonitoringSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.deleteMonitoringSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicy(arg1 *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	fake.deleteOriginRequestPolicyMutex.Lock()
	ret, specificReturn := fake.deleteOriginRequestPolicyReturnsOnCall[len(fake.deleteOriginRequestPolicyArgsForCall)]
	fake.deleteOriginRequestPolicyArgsForCall = append(fake.deleteOriginRequestPolicyArgsForCall, struct {
		arg1 *cloudfront.DeleteOriginRequestPolicyInput
	}{arg1})
	stub := fake.DeleteOriginRequestPolicyStub
	fakeReturns := fake.deleteOriginRequestPolicyReturns
	fake.recordInvocation("DeleteOriginRequestPolicy", []interface{}{arg1})
	fake.deleteOriginRequestPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyCallCount() int {
	fake.deleteOriginRequestPolicyMutex.RLock()
	defer fake.deleteOriginRequestPolicyMutex.RUnlock()
	return len(fake.deleteOriginRequestPolicyArgsForCall)
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyCalls(stub func(*cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error)) {
	fake.deleteOriginRequestPolicyMutex.Lock()
	defer fake.deleteOriginRequestPolicyMutex.Unlock()
	fake.DeleteOriginRequestPolicyStub = stub
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyArgsForCall(i int) *cloudfront.DeleteOriginRequestPolicyInput {
	fake.deleteOriginRequestPolicyMutex.RLock()
	defer fake.deleteOriginRequestPolicyMutex.RUnlock()
	argsForCall := fake.deleteOriginRequestPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyReturns(result1 *cloudfront.DeleteOriginRequestPolicyOutput, result2 error) {
	fake.deleteOriginRequestPolicyMutex.Lock()
	defer fake.deleteOriginRequestPolicyMutex.Unlock()
	fake.DeleteOriginRequestPolicyStub = nil
	fake.deleteOriginRequestPolicyReturns = struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyReturnsOnCall(i int, result1 *cloudfront.DeleteOriginRequestPolicyOutput, result2 error) {
	fake.deleteOriginRequestPolicyMutex.Lock()
	defer fake.deleteOriginRequestPolicyMutex.Unlock()
	fake.DeleteOriginRequestPolicyStub = nil
	if fake.deleteOriginRequestPolicyReturnsOnCall == nil {
		fake.deleteOriginRequestPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.deleteOriginRequestPolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequest(arg1 *cloudfront.DeleteOriginRequestPolicyInput) (*request.Request, *cloudfront.DeleteOriginRequestPolicyOutput) {
	fake.deleteOriginRequestPolicyRequestMutex.Lock()
	ret, specificReturn := fake.deleteOriginRequestPolicyRequestReturnsOnCall[len(fake.deleteOriginRequestPolicyRequestArgsForCall)]
	fake.deleteOriginRequestPolicyRequestArgsForCall = append(fake.deleteOriginRequestPolicyRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteOriginRequestPolicyInput
	}{arg1})
	stub := fake.DeleteOriginRequestPolicyRequestStub
	fakeReturns := fake.deleteOriginRequestPolicyRequestReturns
	fake.recordInvocation("DeleteOriginRequestPolicyRequest", []interface{}{arg1})
	fake.deleteOriginRequestPolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequestCallCount() int {
	fake.deleteOriginRequestPolicyRequestMutex.RLock()
	defer fake.deleteOriginRequestPolicyRequestMutex.RUnlock()
	return len(fake.deleteOriginRequestPolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequestCalls(stub func(*cloudfront.DeleteOriginRequestPolicyInput) (*request.Request, *cloudfront.DeleteOriginRequestPolicyOutput)) {
	fake.deleteOriginRequestPolicyRequestMutex.Lock()
	defer fake.deleteOriginRequestPolicyRequestMutex.Unlock()
	fake.DeleteOriginRequestPolicyRequestStub = stub
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequestArgsForCall(i int) *cloudfront.DeleteOriginRequestPolicyInput {
	fake.deleteOriginRequestPolicyRequestMutex.RLock()
	defer fake.deleteOriginRequestPolicyRequestMutex.RUnlock()
	argsForCall := fake.deleteOriginRequestPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteOriginRequestPolicyOutput) {
	fake.deleteOriginRequestPolicyRequestMutex.Lock()
	defer fake.deleteOriginRequestPolicyRequestMutex.Unlock()
	fake.DeleteOriginRequestPolicyRequestStub = nil
	fake.deleteOriginRequestPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteOriginRequestPolicyOutput) {
	fake.deleteOriginRequestPolicyRequestMutex.Lock()
	defer fake.deleteOriginRequestPolicyRequestMutex.Unlock()
	fake.DeleteOriginRequestPolicyRequestStub = nil
	if fake.deleteOriginRequestPolicyRequestReturnsOnCall == nil {
		fake.deleteOriginRequestPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteOriginRequestPolicyOutput
		})
	}
	fake.deleteOriginRequestPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContext(arg1 context.Context, arg2 *cloudfront.DeleteOriginRequestPolicyInput, arg3 ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	fake.deleteOriginRequestPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.deleteOriginRequestPolicyWithContextReturnsOnCall[len(fake.deleteOriginRequestPolicyWithContextArgsForCall)]
	fake.deleteOriginRequestPolicyWithContextArgsForCall = append(fake.deleteOriginRequestPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteOriginRequestPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteOriginRequestPolicyWithContextStub
	fakeReturns := fake.deleteOriginRequestPolicyWithContextReturns
	fake.recordInvocation("DeleteOriginRequestPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteOriginRequestPolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContextCallCount() int {
	fake.deleteOriginRequestPolicyWithContextMutex.RLock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.RUnlock()
	return len(fake.deleteOriginRequestPolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContextCalls(stub func(context.Context, *cloudfront.DeleteOriginRequestPolicyInput, ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error)) {
	fake.deleteOriginRequestPolicyWithContextMutex.Lock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.Unlock()
	fake.DeleteOriginRequestPolicyWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteOriginRequestPolicyInput, []request.Option) {
	fake.deleteOriginRequestPolicyWithContextMutex.RLock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.RUnlock()
	argsForCall := fake.deleteOriginRequestPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContextReturns(result1 *cloudfront.DeleteOriginRequestPolicyOutput, result2 error) {
	fake.deleteOriginRequestPolicyWithContextMutex.Lock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.Unlock()
	fake.DeleteOriginRequestPolicyWithContextStub = nil
	fake.deleteOriginRequestPolicyWithContextReturns = struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteOriginRequestPolicyWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteOriginRequestPolicyOutput, result2 error) {
	fake.deleteOriginRequestPolicyWithContextMutex.Lock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.Unlock()
	fake.DeleteOriginRequestPolicyWithContextStub = nil
	if fake.deleteOriginRequestPolicyWithContextReturnsOnCall == nil {
		fake.deleteOriginRequestPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.deleteOriginRequestPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKey(arg1 *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	fake.deletePublicKeyMutex.Lock()
	ret, specificReturn := fake.deletePublicKeyReturnsOnCall[len(fake.deletePublicKeyArgsForCall)]
	fake.deletePublicKeyArgsForCall = append(fake.deletePublicKeyArgsForCall, struct {
		arg1 *cloudfront.DeletePublicKeyInput
	}{arg1})
	stub := fake.DeletePublicKeyStub
	fakeReturns := fake.deletePublicKeyReturns
	fake.recordInvocation("DeletePublicKey", []interface{}{arg1})
	fake.deletePublicKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeletePublicKeyCallCount() int {
	fake.deletePublicKeyMutex.RLock()
	defer fake.deletePublicKeyMutex.RUnlock()
	return len(fake.deletePublicKeyArgsForCall)
}

func (fake *FakeCloudfront) DeletePublicKeyCalls(stub func(*cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error)) {
	fake.deletePublicKeyMutex.Lock()
	defer fake.deletePublicKeyMutex.Unlock()
	fake.DeletePublicKeyStub = stub
}

func (fake *FakeCloudfront) DeletePublicKeyArgsForCall(i int) *cloudfront.DeletePublicKeyInput {
	fake.deletePublicKeyMutex.RLock()
	defer fake.deletePublicKeyMutex.RUnlock()
	argsForCall := fake.deletePublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeletePublicKeyReturns(result1 *cloudfront.DeletePublicKeyOutput, result2 error) {
	fake.deletePublicKeyMutex.Lock()
	defer fake.deletePublicKeyMutex.Unlock()
	fake.DeletePublicKeyStub = nil
	fake.deletePublicKeyReturns = struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKeyReturnsOnCall(i int, result1 *cloudfront.DeletePublicKeyOutput, result2 error) {
	fake.deletePublicKeyMutex.Lock()
	defer fake.deletePublicKeyMutex.Unlock()
	fake.DeletePublicKeyStub = nil
	if fake.deletePublicKeyReturnsOnCall == nil {
		fake.deletePublicKeyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeletePublicKeyOutput
			result2 error
		})
	}
	fake.deletePublicKeyReturnsOnCall[i] = struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKeyRequest(arg1 *cloudfront.DeletePublicKeyInput) (*request.Request, *cloudfront.DeletePublicKeyOutput) {
	fake.deletePublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.deletePublicKeyRequestReturnsOnCall[len(fake.deletePublicKeyRequestArgsForCall)]
	fake.deletePublicKeyRequestArgsForCall = append(fake.deletePublicKeyRequestArgsForCall, struct {
		arg1 *cloudfront.DeletePublicKeyInput
	}{arg1})
	stub := fake.DeletePublicKeyRequestStub
	fakeReturns := fake.deletePublicKeyRequestReturns
	fake.recordInvocation("DeletePublicKeyRequest", []interface{}{arg1})
	fake.deletePublicKeyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeletePublicKeyRequestCallCount() int {
	fake.deletePublicKeyRequestMutex.RLock()
	defer fake.deletePublicKeyRequestMutex.RUnlock()
	return len(fake.deletePublicKeyRequestArgsForCall)
}

func (fake *FakeCloudfront) DeletePublicKeyRequestCalls(stub func(*cloudfront.DeletePublicKeyInput) (*request.Request, *cloudfront.DeletePublicKeyOutput)) {
	fake.deletePublicKeyRequestMutex.Lock()
	defer fake.deletePublicKeyRequestMutex.Unlock()
	fake.DeletePublicKeyRequestStub = stub
}

func (fake *FakeCloudfront) DeletePublicKeyRequestArgsForCall(i int) *cloudfront.DeletePublicKeyInput {
	fake.deletePublicKeyRequestMutex.RLock()
	defer fake.deletePublicKeyRequestMutex.RUnlock()
	argsForCall := fake.deletePublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeletePublicKeyRequestReturns(result1 *request.Request, result2 *cloudfront.DeletePublicKeyOutput) {
	fake.deletePublicKeyRequestMutex.Lock()
	defer fake.deletePublicKeyRequestMutex.Unlock()
	fake.DeletePublicKeyRequestStub = nil
	fake.deletePublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeletePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeletePublicKeyOutput) {
	fake.deletePublicKeyRequestMutex.Lock()
	defer fake.deletePublicKeyRequestMutex.Unlock()
	fake.DeletePublicKeyRequestStub = nil
	if fake.deletePublicKeyRequestReturnsOnCall == nil {
		fake.deletePublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeletePublicKeyOutput
		})
	}
	fake.deletePublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeletePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKeyWithContext(arg1 context.Context, arg2 *cloudfront.DeletePublicKeyInput, arg3 ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {
	fake.deletePublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.deletePublicKeyWithContextReturnsOnCall[len(fake.deletePublicKeyWithContextArgsForCall)]
	fake.deletePublicKeyWithContextArgsForCall = append(fake.deletePublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeletePublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeletePublicKeyWithContextStub
	fakeReturns := fake.deletePublicKeyWithContextReturns
	fake.recordInvocation("DeletePublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePublicKeyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeletePublicKeyWithContextCallCount() int {
	fake.deletePublicKeyWithContextMutex.RLock()
	defer fake.deletePublicKeyWithContextMutex.RUnlock()
	return len(fake.deletePublicKeyWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeletePublicKeyWithContextCalls(stub func(context.Context, *cloudfront.DeletePublicKeyInput, ...request.Option) (*cloudfront.DeletePublicKeyOutput, error)) {
	fake.deletePublicKeyWithContextMutex.Lock()
	defer fake.deletePublicKeyWithContextMutex.Unlock()
	fake.DeletePublicKeyWithContextStub = stub
}

func (fake *FakeCloudfront) DeletePublicKeyWithContextArgsForCall(i int) (context.Context, *cloudfront.DeletePublicKeyInput, []request.Option) {
	fake.deletePublicKeyWithContextMutex.RLock()
	defer fake.deletePublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.deletePublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeletePublicKeyWithContextReturns(result1 *cloudfront.DeletePublicKeyOutput, result2 error) {
	fake.deletePublicKeyWithContextMutex.Lock()
	defer fake.deletePublicKeyWithContextMutex.Unlock()
	fake.DeletePublicKeyWithContextStub = nil
	fake.deletePublicKeyWithContextReturns = struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeletePublicKeyWithContextReturnsOnCall(i int, result1 *cloudfront.DeletePublicKeyOutput, result2 error) {
	fake.deletePublicKeyWithContextMutex.Lock()
	defer fake.deletePublicKeyWithContextMutex.Unlock()
	fake.DeletePublicKeyWithContextStub = nil
	if fake.deletePublicKeyWithContextReturnsOnCall == nil {
		fake.deletePublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeletePublicKeyOutput
			result2 error
		})
	}
	fake.deletePublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeletePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfig(arg1 *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	fake.deleteRealtimeLogConfigMutex.Lock()
	ret, specificReturn := fake.deleteRealtimeLogConfigReturnsOnCall[len(fake.deleteRealtimeLogConfigArgsForCall)]
	fake.deleteRealtimeLogConfigArgsForCall = append(fake.deleteRealtimeLogConfigArgsForCall, struct {
		arg1 *cloudfront.DeleteRealtimeLogConfigInput
	}{arg1})
	stub := fake.DeleteRealtimeLogConfigStub
	fakeReturns := fake.deleteRealtimeLogConfigReturns
	fake.recordInvocation("DeleteRealtimeLogConfig", []interface{}{arg1})
	fake.deleteRealtimeLogConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigCallCount() int {
	fake.deleteRealtimeLogConfigMutex.RLock()
	defer fake.deleteRealtimeLogConfigMutex.RUnlock()
	return len(fake.deleteRealtimeLogConfigArgsForCall)
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigCalls(stub func(*cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error)) {
	fake.deleteRealtimeLogConfigMutex.Lock()
	defer fake.deleteRealtimeLogConfigMutex.Unlock()
	fake.DeleteRealtimeLogConfigStub = stub
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigArgsForCall(i int) *cloudfront.DeleteRealtimeLogConfigInput {
	fake.deleteRealtimeLogConfigMutex.RLock()
	defer fake.deleteRealtimeLogConfigMutex.RUnlock()
	argsForCall := fake.deleteRealtimeLogConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigReturns(result1 *cloudfront.DeleteRealtimeLogConfigOutput, result2 error) {
	fake.deleteRealtimeLogConfigMutex.Lock()
	defer fake.deleteRealtimeLogConfigMutex.Unlock()
	fake.DeleteRealtimeLogConfigStub = nil
	fake.deleteRealtimeLogConfigReturns = struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigReturnsOnCall(i int, result1 *cloudfront.DeleteRealtimeLogConfigOutput, result2 error) {
	fake.deleteRealtimeLogConfigMutex.Lock()
	defer fake.deleteRealtimeLogConfigMutex.Unlock()
	fake.DeleteRealtimeLogConfigStub = nil
	if fake.deleteRealtimeLogConfigReturnsOnCall == nil {
		fake.deleteRealtimeLogConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.deleteRealtimeLogConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequest(arg1 *cloudfront.DeleteRealtimeLogConfigInput) (*request.Request, *cloudfront.DeleteRealtimeLogConfigOutput) {
	fake.deleteRealtimeLogConfigRequestMutex.Lock()
	ret, specificReturn := fake.deleteRealtimeLogConfigRequestReturnsOnCall[len(fake.deleteRealtimeLogConfigRequestArgsForCall)]
	fake.deleteRealtimeLogConfigRequestArgsForCall = append(fake.deleteRealtimeLogConfigRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteRealtimeLogConfigInput
	}{arg1})
	stub := fake.DeleteRealtimeLogConfigRequestStub
	fakeReturns := fake.deleteRealtimeLogConfigRequestReturns
	fake.recordInvocation("DeleteRealtimeLogConfigRequest", []interface{}{arg1})
	fake.deleteRealtimeLogConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequestCallCount() int {
	fake.deleteRealtimeLogConfigRequestMutex.RLock()
	defer fake.deleteRealtimeLogConfigRequestMutex.RUnlock()
	return len(fake.deleteRealtimeLogConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequestCalls(stub func(*cloudfront.DeleteRealtimeLogConfigInput) (*request.Request, *cloudfront.DeleteRealtimeLogConfigOutput)) {
	fake.deleteRealtimeLogConfigRequestMutex.Lock()
	defer fake.deleteRealtimeLogConfigRequestMutex.Unlock()
	fake.DeleteRealtimeLogConfigRequestStub = stub
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequestArgsForCall(i int) *cloudfront.DeleteRealtimeLogConfigInput {
	fake.deleteRealtimeLogConfigRequestMutex.RLock()
	defer fake.deleteRealtimeLogConfigRequestMutex.RUnlock()
	argsForCall := fake.deleteRealtimeLogConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteRealtimeLogConfigOutput) {
	fake.deleteRealtimeLogConfigRequestMutex.Lock()
	defer fake.deleteRealtimeLogConfigRequestMutex.Unlock()
	fake.DeleteRealtimeLogConfigRequestStub = nil
	fake.deleteRealtimeLogConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteRealtimeLogConfigOutput) {
	fake.deleteRealtimeLogConfigRequestMutex.Lock()
	defer fake.deleteRealtimeLogConfigRequestMutex.Unlock()
	fake.DeleteRealtimeLogConfigRequestStub = nil
	if fake.deleteRealtimeLogConfigRequestReturnsOnCall == nil {
		fake.deleteRealtimeLogConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteRealtimeLogConfigOutput
		})
	}
	fake.deleteRealtimeLogConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContext(arg1 context.Context, arg2 *cloudfront.DeleteRealtimeLogConfigInput, arg3 ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	fake.deleteRealtimeLogConfigWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRealtimeLogConfigWithContextReturnsOnCall[len(fake.deleteRealtimeLogConfigWithContextArgsForCall)]
	fake.deleteRealtimeLogConfigWithContextArgsForCall = append(fake.deleteRealtimeLogConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteRealtimeLogConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteRealtimeLogConfigWithContextStub
	fakeReturns := fake.deleteRealtimeLogConfigWithContextReturns
	fake.recordInvocation("DeleteRealtimeLogConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRealtimeLogConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContextCallCount() int {
	fake.deleteRealtimeLogConfigWithContextMutex.RLock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.RUnlock()
	return len(fake.deleteRealtimeLogConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContextCalls(stub func(context.Context, *cloudfront.DeleteRealtimeLogConfigInput, ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error)) {
	fake.deleteRealtimeLogConfigWithContextMutex.Lock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.Unlock()
	fake.DeleteRealtimeLogConfigWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteRealtimeLogConfigInput, []request.Option) {
	fake.deleteRealtimeLogConfigWithContextMutex.RLock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.RUnlock()
	argsForCall := fake.deleteRealtimeLogConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContextReturns(result1 *cloudfront.DeleteRealtimeLogConfigOutput, result2 error) {
	fake.deleteRealtimeLogConfigWithContextMutex.Lock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.Unlock()
	fake.DeleteRealtimeLogConfigWithContextStub = nil
	fake.deleteRealtimeLogConfigWithContextReturns = struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteRealtimeLogConfigWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteRealtimeLogConfigOutput, result2 error) {
	fake.deleteRealtimeLogConfigWithContextMutex.Lock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.Unlock()
	fake.DeleteRealtimeLogConfigWithContextStub = nil
	if fake.deleteRealtimeLogConfigWithContextReturnsOnCall == nil {
		fake.deleteRealtimeLogConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.deleteRealtimeLogConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistribution(arg1 *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	fake.deleteStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionReturnsOnCall[len(fake.deleteStreamingDistributionArgsForCall)]
	fake.deleteStreamingDistributionArgsForCall = append(fake.deleteStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}{arg1})
	stub := fake.DeleteStreamingDistributionStub
	fakeReturns := fake.deleteStreamingDistributionReturns
	fake.recordInvocation("DeleteStreamingDistribution", []interface{}{arg1})
	fake.deleteStreamingDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteStreamingDistributionCallCount() int {
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	return len(fake.deleteStreamingDistributionArgsForCall)
}

func (fake *FakeCloudfront) DeleteStreamingDistributionCalls(stub func(*cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error)) {
	fake.deleteStreamingDistributionMutex.Lock()
	defer fake.deleteStreamingDistributionMutex.Unlock()
	fake.DeleteStreamingDistributionStub = stub
}

func (fake *FakeCloudfront) DeleteStreamingDistributionArgsForCall(i int) *cloudfront.DeleteStreamingDistributionInput {
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	argsForCall := fake.deleteStreamingDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteStreamingDistributionReturns(result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.deleteStreamingDistributionMutex.Lock()
	defer fake.deleteStreamingDistributionMutex.Unlock()
	fake.DeleteStreamingDistributionStub = nil
	fake.deleteStreamingDistributionReturns = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.deleteStreamingDistributionMutex.Lock()
	defer fake.deleteStreamingDistributionMutex.Unlock()
	fake.DeleteStreamingDistributionStub = nil
	if fake.deleteStreamingDistributionReturnsOnCall == nil {
		fake.deleteStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteStreamingDistributionOutput
			result2 error
		})
	}
	fake.deleteStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequest(arg1 *cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput) {
	fake.deleteStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionRequestReturnsOnCall[len(fake.deleteStreamingDistributionRequestArgsForCall)]
	fake.deleteStreamingDistributionRequestArgsForCall = append(fake.deleteStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}{arg1})
	stub := fake.DeleteStreamingDistributionRequestStub
	fakeReturns := fake.deleteStreamingDistributionRequestReturns
	fake.recordInvocation("DeleteStreamingDistributionRequest", []interface{}{arg1})
	fake.deleteStreamingDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequestCallCount() int {
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	return len(fake.deleteStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequestCalls(stub func(*cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput)) {
	fake.deleteStreamingDistributionRequestMutex.Lock()
	defer fake.deleteStreamingDistributionRequestMutex.Unlock()
	fake.DeleteStreamingDistributionRequestStub = stub
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequestArgsForCall(i int) *cloudfront.DeleteStreamingDistributionInput {
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	argsForCall := fake.deleteStreamingDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteStreamingDistributionOutput) {
	fake.deleteStreamingDistributionRequestMutex.Lock()
	defer fake.deleteStreamingDistributionRequestMutex.Unlock()
	fake.DeleteStreamingDistributionRequestStub = nil
	fake.deleteStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteStreamingDistributionOutput) {
	fake.deleteStreamingDistributionRequestMutex.Lock()
	defer fake.deleteStreamingDistributionRequestMutex.Unlock()
	fake.DeleteStreamingDistributionRequestStub = nil
	if fake.deleteStreamingDistributionRequestReturnsOnCall == nil {
		fake.deleteStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteStreamingDistributionOutput
		})
	}
	fake.deleteStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContext(arg1 context.Context, arg2 *cloudfront.DeleteStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	fake.deleteStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionWithContextReturnsOnCall[len(fake.deleteStreamingDistributionWithContextArgsForCall)]
	fake.deleteStreamingDistributionWithContextArgsForCall = append(fake.deleteStreamingDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DeleteStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteStreamingDistributionWithContextStub
	fakeReturns := fake.deleteStreamingDistributionWithContextReturns
	fake.recordInvocation("DeleteStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteStreamingDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContextCallCount() int {
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.deleteStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContextCalls(stub func(context.Context, *cloudfront.DeleteStreamingDistributionInput, ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error)) {
	fake.deleteStreamingDistributionWithContextMutex.Lock()
	defer fake.deleteStreamingDistributionWithContextMutex.Unlock()
	fake.DeleteStreamingDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.DeleteStreamingDistributionInput, []request.Option) {
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	argsForCall := fake.deleteStreamingDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContextReturns(result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.deleteStreamingDistributionWithContextMutex.Lock()
	defer fake.deleteStreamingDistributionWithContextMutex.Unlock()
	fake.DeleteStreamingDistributionWithContextStub = nil
	fake.deleteStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DeleteStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.deleteStreamingDistributionWithContextMutex.Lock()
	defer fake.deleteStreamingDistributionWithContextMutex.Unlock()
	fake.DeleteStreamingDistributionWithContextStub = nil
	if fake.deleteStreamingDistributionWithContextReturnsOnCall == nil {
		fake.deleteStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteStreamingDistributionOutput
			result2 error
		})
	}
	fake.deleteStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunction(arg1 *cloudfront.DescribeFunctionInput) (*cloudfront.DescribeFunctionOutput, error) {
	fake.describeFunctionMutex.Lock()
	ret, specificReturn := fake.describeFunctionReturnsOnCall[len(fake.describeFunctionArgsForCall)]
	fake.describeFunctionArgsForCall = append(fake.describeFunctionArgsForCall, struct {
		arg1 *cloudfront.DescribeFunctionInput
	}{arg1})
	stub := fake.DescribeFunctionStub
	fakeReturns := fake.describeFunctionReturns
	fake.recordInvocation("DescribeFunction", []interface{}{arg1})
	fake.describeFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DescribeFunctionCallCount() int {
	fake.describeFunctionMutex.RLock()
	defer fake.describeFunctionMutex.RUnlock()
	return len(fake.describeFunctionArgsForCall)
}

func (fake *FakeCloudfront) DescribeFunctionCalls(stub func(*cloudfront.DescribeFunctionInput) (*cloudfront.DescribeFunctionOutput, error)) {
	fake.describeFunctionMutex.Lock()
	defer fake.describeFunctionMutex.Unlock()
	fake.DescribeFunctionStub = stub
}

func (fake *FakeCloudfront) DescribeFunctionArgsForCall(i int) *cloudfront.DescribeFunctionInput {
	fake.describeFunctionMutex.RLock()
	defer fake.describeFunctionMutex.RUnlock()
	argsForCall := fake.describeFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DescribeFunctionReturns(result1 *cloudfront.DescribeFunctionOutput, result2 error) {
	fake.describeFunctionMutex.Lock()
	defer fake.describeFunctionMutex.Unlock()
	fake.DescribeFunctionStub = nil
	fake.describeFunctionReturns = struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunctionReturnsOnCall(i int, result1 *cloudfront.DescribeFunctionOutput, result2 error) {
	fake.describeFunctionMutex.Lock()
	defer fake.describeFunctionMutex.Unlock()
	fake.DescribeFunctionStub = nil
	if fake.describeFunctionReturnsOnCall == nil {
		fake.describeFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DescribeFunctionOutput
			result2 error
		})
	}
	fake.describeFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunctionRequest(arg1 *cloudfront.DescribeFunctionInput) (*request.Request, *cloudfront.DescribeFunctionOutput) {
	fake.describeFunctionRequestMutex.Lock()
	ret, specificReturn := fake.describeFunctionRequestReturnsOnCall[len(fake.describeFunctionRequestArgsForCall)]
	fake.describeFunctionRequestArgsForCall = append(fake.describeFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.DescribeFunctionInput
	}{arg1})
	stub := fake.DescribeFunctionRequestStub
	fakeReturns := fake.describeFunctionRequestReturns
	fake.recordInvocation("DescribeFunctionRequest", []interface{}{arg1})
	fake.describeFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DescribeFunctionRequestCallCount() int {
	fake.describeFunctionRequestMutex.RLock()
	defer fake.describeFunctionRequestMutex.RUnlock()
	return len(fake.describeFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) DescribeFunctionRequestCalls(stub func(*cloudfront.DescribeFunctionInput) (*request.Request, *cloudfront.DescribeFunctionOutput)) {
	fake.describeFunctionRequestMutex.Lock()
	defer fake.describeFunctionRequestMutex.Unlock()
	fake.DescribeFunctionRequestStub = stub
}

func (fake *FakeCloudfront) DescribeFunctionRequestArgsForCall(i int) *cloudfront.DescribeFunctionInput {
	fake.describeFunctionRequestMutex.RLock()
	defer fake.describeFunctionRequestMutex.RUnlock()
	argsForCall := fake.describeFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) DescribeFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.DescribeFunctionOutput) {
	fake.describeFunctionRequestMutex.Lock()
	defer fake.describeFunctionRequestMutex.Unlock()
	fake.DescribeFunctionRequestStub = nil
	fake.describeFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DescribeFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DescribeFunctionOutput) {
	fake.describeFunctionRequestMutex.Lock()
	defer fake.describeFunctionRequestMutex.Unlock()
	fake.DescribeFunctionRequestStub = nil
	if fake.describeFunctionRequestReturnsOnCall == nil {
		fake.describeFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DescribeFunctionOutput
		})
	}
	fake.describeFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DescribeFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunctionWithContext(arg1 context.Context, arg2 *cloudfront.DescribeFunctionInput, arg3 ...request.Option) (*cloudfront.DescribeFunctionOutput, error) {
	fake.describeFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.describeFunctionWithContextReturnsOnCall[len(fake.describeFunctionWithContextArgsForCall)]
	fake.describeFunctionWithContextArgsForCall = append(fake.describeFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.DescribeFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeFunctionWithContextStub
	fakeReturns := fake.describeFunctionWithContextReturns
	fake.recordInvocation("DescribeFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) DescribeFunctionWithContextCallCount() int {
	fake.describeFunctionWithContextMutex.RLock()
	defer fake.describeFunctionWithContextMutex.RUnlock()
	return len(fake.describeFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) DescribeFunctionWithContextCalls(stub func(context.Context, *cloudfront.DescribeFunctionInput, ...request.Option) (*cloudfront.DescribeFunctionOutput, error)) {
	fake.describeFunctionWithContextMutex.Lock()
	defer fake.describeFunctionWithContextMutex.Unlock()
	fake.DescribeFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) DescribeFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.DescribeFunctionInput, []request.Option) {
	fake.describeFunctionWithContextMutex.RLock()
	defer fake.describeFunctionWithContextMutex.RUnlock()
	argsForCall := fake.describeFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) DescribeFunctionWithContextReturns(result1 *cloudfront.DescribeFunctionOutput, result2 error) {
	fake.describeFunctionWithContextMutex.Lock()
	defer fake.describeFunctionWithContextMutex.Unlock()
	fake.DescribeFunctionWithContextStub = nil
	fake.describeFunctionWithContextReturns = struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) DescribeFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.DescribeFunctionOutput, result2 error) {
	fake.describeFunctionWithContextMutex.Lock()
	defer fake.describeFunctionWithContextMutex.Unlock()
	fake.DescribeFunctionWithContextStub = nil
	if fake.describeFunctionWithContextReturnsOnCall == nil {
		fake.describeFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DescribeFunctionOutput
			result2 error
		})
	}
	fake.describeFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DescribeFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicy(arg1 *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	fake.getCachePolicyMutex.Lock()
	ret, specificReturn := fake.getCachePolicyReturnsOnCall[len(fake.getCachePolicyArgsForCall)]
	fake.getCachePolicyArgsForCall = append(fake.getCachePolicyArgsForCall, struct {
		arg1 *cloudfront.GetCachePolicyInput
	}{arg1})
	stub := fake.GetCachePolicyStub
	fakeReturns := fake.getCachePolicyReturns
	fake.recordInvocation("GetCachePolicy", []interface{}{arg1})
	fake.getCachePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyCallCount() int {
	fake.getCachePolicyMutex.RLock()
	defer fake.getCachePolicyMutex.RUnlock()
	return len(fake.getCachePolicyArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyCalls(stub func(*cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error)) {
	fake.getCachePolicyMutex.Lock()
	defer fake.getCachePolicyMutex.Unlock()
	fake.GetCachePolicyStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyArgsForCall(i int) *cloudfront.GetCachePolicyInput {
	fake.getCachePolicyMutex.RLock()
	defer fake.getCachePolicyMutex.RUnlock()
	argsForCall := fake.getCachePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCachePolicyReturns(result1 *cloudfront.GetCachePolicyOutput, result2 error) {
	fake.getCachePolicyMutex.Lock()
	defer fake.getCachePolicyMutex.Unlock()
	fake.GetCachePolicyStub = nil
	fake.getCachePolicyReturns = struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyReturnsOnCall(i int, result1 *cloudfront.GetCachePolicyOutput, result2 error) {
	fake.getCachePolicyMutex.Lock()
	defer fake.getCachePolicyMutex.Unlock()
	fake.GetCachePolicyStub = nil
	if fake.getCachePolicyReturnsOnCall == nil {
		fake.getCachePolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCachePolicyOutput
			result2 error
		})
	}
	fake.getCachePolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfig(arg1 *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	fake.getCachePolicyConfigMutex.Lock()
	ret, specificReturn := fake.getCachePolicyConfigReturnsOnCall[len(fake.getCachePolicyConfigArgsForCall)]
	fake.getCachePolicyConfigArgsForCall = append(fake.getCachePolicyConfigArgsForCall, struct {
		arg1 *cloudfront.GetCachePolicyConfigInput
	}{arg1})
	stub := fake.GetCachePolicyConfigStub
	fakeReturns := fake.getCachePolicyConfigReturns
	fake.recordInvocation("GetCachePolicyConfig", []interface{}{arg1})
	fake.getCachePolicyConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyConfigCallCount() int {
	fake.getCachePolicyConfigMutex.RLock()
	defer fake.getCachePolicyConfigMutex.RUnlock()
	return len(fake.getCachePolicyConfigArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyConfigCalls(stub func(*cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error)) {
	fake.getCachePolicyConfigMutex.Lock()
	defer fake.getCachePolicyConfigMutex.Unlock()
	fake.GetCachePolicyConfigStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyConfigArgsForCall(i int) *cloudfront.GetCachePolicyConfigInput {
	fake.getCachePolicyConfigMutex.RLock()
	defer fake.getCachePolicyConfigMutex.RUnlock()
	argsForCall := fake.getCachePolicyConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCachePolicyConfigReturns(result1 *cloudfront.GetCachePolicyConfigOutput, result2 error) {
	fake.getCachePolicyConfigMutex.Lock()
	defer fake.getCachePolicyConfigMutex.Unlock()
	fake.GetCachePolicyConfigStub = nil
	fake.getCachePolicyConfigReturns = struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfigReturnsOnCall(i int, result1 *cloudfront.GetCachePolicyConfigOutput, result2 error) {
	fake.getCachePolicyConfigMutex.Lock()
	defer fake.getCachePolicyConfigMutex.Unlock()
	fake.GetCachePolicyConfigStub = nil
	if fake.getCachePolicyConfigReturnsOnCall == nil {
		fake.getCachePolicyConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCachePolicyConfigOutput
			result2 error
		})
	}
	fake.getCachePolicyConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequest(arg1 *cloudfront.GetCachePolicyConfigInput) (*request.Request, *cloudfront.GetCachePolicyConfigOutput) {
	fake.getCachePolicyConfigRequestMutex.Lock()
	ret, specificReturn := fake.getCachePolicyConfigRequestReturnsOnCall[len(fake.getCachePolicyConfigRequestArgsForCall)]
	fake.getCachePolicyConfigRequestArgsForCall = append(fake.getCachePolicyConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetCachePolicyConfigInput
	}{arg1})
	stub := fake.GetCachePolicyConfigRequestStub
	fakeReturns := fake.getCachePolicyConfigRequestReturns
	fake.recordInvocation("GetCachePolicyConfigRequest", []interface{}{arg1})
	fake.getCachePolicyConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequestCallCount() int {
	fake.getCachePolicyConfigRequestMutex.RLock()
	defer fake.getCachePolicyConfigRequestMutex.RUnlock()
	return len(fake.getCachePolicyConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequestCalls(stub func(*cloudfront.GetCachePolicyConfigInput) (*request.Request, *cloudfront.GetCachePolicyConfigOutput)) {
	fake.getCachePolicyConfigRequestMutex.Lock()
	defer fake.getCachePolicyConfigRequestMutex.Unlock()
	fake.GetCachePolicyConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequestArgsForCall(i int) *cloudfront.GetCachePolicyConfigInput {
	fake.getCachePolicyConfigRequestMutex.RLock()
	defer fake.getCachePolicyConfigRequestMutex.RUnlock()
	argsForCall := fake.getCachePolicyConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetCachePolicyConfigOutput) {
	fake.getCachePolicyConfigRequestMutex.Lock()
	defer fake.getCachePolicyConfigRequestMutex.Unlock()
	fake.GetCachePolicyConfigRequestStub = nil
	fake.getCachePolicyConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCachePolicyConfigOutput) {
	fake.getCachePolicyConfigRequestMutex.Lock()
	defer fake.getCachePolicyConfigRequestMutex.Unlock()
	fake.GetCachePolicyConfigRequestStub = nil
	if fake.getCachePolicyConfigRequestReturnsOnCall == nil {
		fake.getCachePolicyConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCachePolicyConfigOutput
		})
	}
	fake.getCachePolicyConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetCachePolicyConfigInput, arg3 ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error) {
	fake.getCachePolicyConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getCachePolicyConfigWithContextReturnsOnCall[len(fake.getCachePolicyConfigWithContextArgsForCall)]
	fake.getCachePolicyConfigWithContextArgsForCall = append(fake.getCachePolicyConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetCachePolicyConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCachePolicyConfigWithContextStub
	fakeReturns := fake.getCachePolicyConfigWithContextReturns
	fake.recordInvocation("GetCachePolicyConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCachePolicyConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContextCallCount() int {
	fake.getCachePolicyConfigWithContextMutex.RLock()
	defer fake.getCachePolicyConfigWithContextMutex.RUnlock()
	return len(fake.getCachePolicyConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContextCalls(stub func(context.Context, *cloudfront.GetCachePolicyConfigInput, ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error)) {
	fake.getCachePolicyConfigWithContextMutex.Lock()
	defer fake.getCachePolicyConfigWithContextMutex.Unlock()
	fake.GetCachePolicyConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetCachePolicyConfigInput, []request.Option) {
	fake.getCachePolicyConfigWithContextMutex.RLock()
	defer fake.getCachePolicyConfigWithContextMutex.RUnlock()
	argsForCall := fake.getCachePolicyConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContextReturns(result1 *cloudfront.GetCachePolicyConfigOutput, result2 error) {
	fake.getCachePolicyConfigWithContextMutex.Lock()
	defer fake.getCachePolicyConfigWithContextMutex.Unlock()
	fake.GetCachePolicyConfigWithContextStub = nil
	fake.getCachePolicyConfigWithContextReturns = struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetCachePolicyConfigOutput, result2 error) {
	fake.getCachePolicyConfigWithContextMutex.Lock()
	defer fake.getCachePolicyConfigWithContextMutex.Unlock()
	fake.GetCachePolicyConfigWithContextStub = nil
	if fake.getCachePolicyConfigWithContextReturnsOnCall == nil {
		fake.getCachePolicyConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCachePolicyConfigOutput
			result2 error
		})
	}
	fake.getCachePolicyConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCachePolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyRequest(arg1 *cloudfront.GetCachePolicyInput) (*request.Request, *cloudfront.GetCachePolicyOutput) {
	fake.getCachePolicyRequestMutex.Lock()
	ret, specificReturn := fake.getCachePolicyRequestReturnsOnCall[len(fake.getCachePolicyRequestArgsForCall)]
	fake.getCachePolicyRequestArgsForCall = append(fake.getCachePolicyRequestArgsForCall, struct {
		arg1 *cloudfront.GetCachePolicyInput
	}{arg1})
	stub := fake.GetCachePolicyRequestStub
	fakeReturns := fake.getCachePolicyRequestReturns
	fake.recordInvocation("GetCachePolicyRequest", []interface{}{arg1})
	fake.getCachePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyRequestCallCount() int {
	fake.getCachePolicyRequestMutex.RLock()
	defer fake.getCachePolicyRequestMutex.RUnlock()
	return len(fake.getCachePolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyRequestCalls(stub func(*cloudfront.GetCachePolicyInput) (*request.Request, *cloudfront.GetCachePolicyOutput)) {
	fake.getCachePolicyRequestMutex.Lock()
	defer fake.getCachePolicyRequestMutex.Unlock()
	fake.GetCachePolicyRequestStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyRequestArgsForCall(i int) *cloudfront.GetCachePolicyInput {
	fake.getCachePolicyRequestMutex.RLock()
	defer fake.getCachePolicyRequestMutex.RUnlock()
	argsForCall := fake.getCachePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCachePolicyRequestReturns(result1 *request.Request, result2 *cloudfront.GetCachePolicyOutput) {
	fake.getCachePolicyRequestMutex.Lock()
	defer fake.getCachePolicyRequestMutex.Unlock()
	fake.GetCachePolicyRequestStub = nil
	fake.getCachePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCachePolicyOutput) {
	fake.getCachePolicyRequestMutex.Lock()
	defer fake.getCachePolicyRequestMutex.Unlock()
	fake.GetCachePolicyRequestStub = nil
	if fake.getCachePolicyRequestReturnsOnCall == nil {
		fake.getCachePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCachePolicyOutput
		})
	}
	fake.getCachePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyWithContext(arg1 context.Context, arg2 *cloudfront.GetCachePolicyInput, arg3 ...request.Option) (*cloudfront.GetCachePolicyOutput, error) {
	fake.getCachePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getCachePolicyWithContextReturnsOnCall[len(fake.getCachePolicyWithContextArgsForCall)]
	fake.getCachePolicyWithContextArgsForCall = append(fake.getCachePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetCachePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCachePolicyWithContextStub
	fakeReturns := fake.getCachePolicyWithContextReturns
	fake.recordInvocation("GetCachePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCachePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCachePolicyWithContextCallCount() int {
	fake.getCachePolicyWithContextMutex.RLock()
	defer fake.getCachePolicyWithContextMutex.RUnlock()
	return len(fake.getCachePolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetCachePolicyWithContextCalls(stub func(context.Context, *cloudfront.GetCachePolicyInput, ...request.Option) (*cloudfront.GetCachePolicyOutput, error)) {
	fake.getCachePolicyWithContextMutex.Lock()
	defer fake.getCachePolicyWithContextMutex.Unlock()
	fake.GetCachePolicyWithContextStub = stub
}

func (fake *FakeCloudfront) GetCachePolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.GetCachePolicyInput, []request.Option) {
	fake.getCachePolicyWithContextMutex.RLock()
	defer fake.getCachePolicyWithContextMutex.RUnlock()
	argsForCall := fake.getCachePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetCachePolicyWithContextReturns(result1 *cloudfront.GetCachePolicyOutput, result2 error) {
	fake.getCachePolicyWithContextMutex.Lock()
	defer fake.getCachePolicyWithContextMutex.Unlock()
	fake.GetCachePolicyWithContextStub = nil
	fake.getCachePolicyWithContextReturns = struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCachePolicyWithContextReturnsOnCall(i int, result1 *cloudfront.GetCachePolicyOutput, result2 error) {
	fake.getCachePolicyWithContextMutex.Lock()
	defer fake.getCachePolicyWithContextMutex.Unlock()
	fake.GetCachePolicyWithContextStub = nil
	if fake.getCachePolicyWithContextReturnsOnCall == nil {
		fake.getCachePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCachePolicyOutput
			result2 error
		})
	}
	fake.getCachePolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentity(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	fake.getCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityArgsForCall = append(fake.getCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.GetCloudFrontOriginAccessIdentityStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityCallCount() int {
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityCalls(stub func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)) {
	fake.getCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityInput {
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityStub = nil
	fake.getCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityStub = nil
	if fake.getCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfig(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}{arg1})
	stub := fake.GetCloudFrontOriginAccessIdentityConfigStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityConfigReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfig", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigCalls(stub func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)) {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequest(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}{arg1})
	stub := fake.GetCloudFrontOriginAccessIdentityConfigRequestStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityConfigRequestReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfigRequest", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequestCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequestCalls(stub func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)) {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequestArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigRequestStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigRequestStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, arg3 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityConfigWithContextReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContextCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContextCalls(stub func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, []request.Option) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContextReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigWithContextReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.GetCloudFrontOriginAccessIdentityRequestStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityRequestReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequestCalls(stub func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput)) {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityRequestStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityInput {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityRequestStub = nil
	fake.getCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContext(arg1 context.Context, arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetCloudFrontOriginAccessIdentityWithContextStub
	fakeReturns := fake.getCloudFrontOriginAccessIdentityWithContextReturns
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContextCalls(stub func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityWithContextStub = stub
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	argsForCall := fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.getCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.GetCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistribution(arg1 *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	fake.getDistributionMutex.Lock()
	ret, specificReturn := fake.getDistributionReturnsOnCall[len(fake.getDistributionArgsForCall)]
	fake.getDistributionArgsForCall = append(fake.getDistributionArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	stub := fake.GetDistributionStub
	fakeReturns := fake.getDistributionReturns
	fake.recordInvocation("GetDistribution", []interface{}{arg1})
	fake.getDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionCallCount() int {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	return len(fake.getDistributionArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionCalls(stub func(*cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error)) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = stub
}

func (fake *FakeCloudfront) GetDistributionArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	argsForCall := fake.getDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetDistributionReturns(result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = nil
	fake.getDistributionReturns = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionReturnsOnCall(i int, result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = nil
	if fake.getDistributionReturnsOnCall == nil {
		fake.getDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionOutput
			result2 error
		})
	}
	fake.getDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfig(arg1 *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	fake.getDistributionConfigMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigReturnsOnCall[len(fake.getDistributionConfigArgsForCall)]
	fake.getDistributionConfigArgsForCall = append(fake.getDistributionConfigArgsForCall, struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}{arg1})
	stub := fake.GetDistributionConfigStub
	fakeReturns := fake.getDistributionConfigReturns
	fake.recordInvocation("GetDistributionConfig", []interface{}{arg1})
	fake.getDistributionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionConfigCallCount() int {
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	return len(fake.getDistributionConfigArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionConfigCalls(stub func(*cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error)) {
	fake.getDistributionConfigMutex.Lock()
	defer fake.getDistributionConfigMutex.Unlock()
	fake.GetDistributionConfigStub = stub
}

func (fake *FakeCloudfront) GetDistributionConfigArgsForCall(i int) *cloudfront.GetDistributionConfigInput {
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	argsForCall := fake.getDistributionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetDistributionConfigReturns(result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.getDistributionConfigMutex.Lock()
	defer fake.getDistributionConfigMutex.Unlock()
	fake.GetDistributionConfigStub = nil
	fake.getDistributionConfigReturns = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfigReturnsOnCall(i int, result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.getDistributionConfigMutex.Lock()
	defer fake.getDistributionConfigMutex.Unlock()
	fake.GetDistributionConfigStub = nil
	if fake.getDistributionConfigReturnsOnCall == nil {
		fake.getDistributionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionConfigOutput
			result2 error
		})
	}
	fake.getDistributionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfigRequest(arg1 *cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput) {
	fake.getDistributionConfigRequestMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigRequestReturnsOnCall[len(fake.getDistributionConfigRequestArgsForCall)]
	fake.getDistributionConfigRequestArgsForCall = append(fake.getDistributionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}{arg1})
	stub := fake.GetDistributionConfigRequestStub
	fakeReturns := fake.getDistributionConfigRequestReturns
	fake.recordInvocation("GetDistributionConfigRequest", []interface{}{arg1})
	fake.getDistributionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionConfigRequestCallCount() int {
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	return len(fake.getDistributionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionConfigRequestCalls(stub func(*cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput)) {
	fake.getDistributionConfigRequestMutex.Lock()
	defer fake.getDistributionConfigRequestMutex.Unlock()
	fake.GetDistributionConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetDistributionConfigRequestArgsForCall(i int) *cloudfront.GetDistributionConfigInput {
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	argsForCall := fake.getDistributionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetDistributionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetDistributionConfigOutput) {
	fake.getDistributionConfigRequestMutex.Lock()
	defer fake.getDistributionConfigRequestMutex.Unlock()
	fake.GetDistributionConfigRequestStub = nil
	fake.getDistributionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetDistributionConfigOutput) {
	fake.getDistributionConfigRequestMutex.Lock()
	defer fake.getDistributionConfigRequestMutex.Unlock()
	fake.GetDistributionConfigRequestStub = nil
	if fake.getDistributionConfigRequestReturnsOnCall == nil {
		fake.getDistributionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetDistributionConfigOutput
		})
	}
	fake.getDistributionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetDistributionConfigInput, arg3 ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	fake.getDistributionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigWithContextReturnsOnCall[len(fake.getDistributionConfigWithContextArgsForCall)]
	fake.getDistributionConfigWithContextArgsForCall = append(fake.getDistributionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDistributionConfigWithContextStub
	fakeReturns := fake.getDistributionConfigWithContextReturns
	fake.recordInvocation("GetDistributionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDistributionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionConfigWithContextCallCount() int {
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	return len(fake.getDistributionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionConfigWithContextCalls(stub func(context.Context, *cloudfront.GetDistributionConfigInput, ...request.Option) (*cloudfront.GetDistributionConfigOutput, error)) {
	fake.getDistributionConfigWithContextMutex.Lock()
	defer fake.getDistributionConfigWithContextMutex.Unlock()
	fake.GetDistributionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetDistributionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetDistributionConfigInput, []request.Option) {
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	argsForCall := fake.getDistributionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetDistributionConfigWithContextReturns(result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.getDistributionConfigWithContextMutex.Lock()
	defer fake.getDistributionConfigWithContextMutex.Unlock()
	fake.GetDistributionConfigWithContextStub = nil
	fake.getDistributionConfigWithContextReturns = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.getDistributionConfigWithContextMutex.Lock()
	defer fake.getDistributionConfigWithContextMutex.Unlock()
	fake.GetDistributionConfigWithContextStub = nil
	if fake.getDistributionConfigWithContextReturnsOnCall == nil {
		fake.getDistributionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionConfigOutput
			result2 error
		})
	}
	fake.getDistributionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionRequest(arg1 *cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput) {
	fake.getDistributionRequestMutex.Lock()
	ret, specificReturn := fake.getDistributionRequestReturnsOnCall[len(fake.getDistributionRequestArgsForCall)]
	fake.getDistributionRequestArgsForCall = append(fake.getDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	stub := fake.GetDistributionRequestStub
	fakeReturns := fake.getDistributionRequestReturns
	fake.recordInvocation("GetDistributionRequest", []interface{}{arg1})
	fake.getDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionRequestCallCount() int {
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	return len(fake.getDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionRequestCalls(stub func(*cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput)) {
	fake.getDistributionRequestMutex.Lock()
	defer fake.getDistributionRequestMutex.Unlock()
	fake.GetDistributionRequestStub = stub
}

func (fake *FakeCloudfront) GetDistributionRequestArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	argsForCall := fake.getDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.GetDistributionOutput) {
	fake.getDistributionRequestMutex.Lock()
	defer fake.getDistributionRequestMutex.Unlock()
	fake.GetDistributionRequestStub = nil
	fake.getDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetDistributionOutput) {
	fake.getDistributionRequestMutex.Lock()
	defer fake.getDistributionRequestMutex.Unlock()
	fake.GetDistributionRequestStub = nil
	if fake.getDistributionRequestReturnsOnCall == nil {
		fake.getDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetDistributionOutput
		})
	}
	fake.getDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionWithContext(arg1 context.Context, arg2 *cloudfront.GetDistributionInput, arg3 ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	fake.getDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.getDistributionWithContextReturnsOnCall[len(fake.getDistributionWithContextArgsForCall)]
	fake.getDistributionWithContextArgsForCall = append(fake.getDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetDistributionWithContextStub
	fakeReturns := fake.getDistributionWithContextReturns
	fake.recordInvocation("GetDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetDistributionWithContextCallCount() int {
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	return len(fake.getDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetDistributionWithContextCalls(stub func(context.Context, *cloudfront.GetDistributionInput, ...request.Option) (*cloudfront.GetDistributionOutput, error)) {
	fake.getDistributionWithContextMutex.Lock()
	defer fake.getDistributionWithContextMutex.Unlock()
	fake.GetDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) GetDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.GetDistributionInput, []request.Option) {
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	argsForCall := fake.getDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetDistributionWithContextReturns(result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.getDistributionWithContextMutex.Lock()
	defer fake.getDistributionWithContextMutex.Unlock()
	fake.GetDistributionWithContextStub = nil
	fake.getDistributionWithContextReturns = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.getDistributionWithContextMutex.Lock()
	defer fake.getDistributionWithContextMutex.Unlock()
	fake.GetDistributionWithContextStub = nil
	if fake.getDistributionWithContextReturnsOnCall == nil {
		fake.getDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionOutput
			result2 error
		})
	}
	fake.getDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryption(arg1 *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	fake.getFieldLevelEncryptionMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionReturnsOnCall[len(fake.getFieldLevelEncryptionArgsForCall)]
	fake.getFieldLevelEncryptionArgsForCall = append(fake.getFieldLevelEncryptionArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionStub
	fakeReturns := fake.getFieldLevelEncryptionReturns
	fake.recordInvocation("GetFieldLevelEncryption", []interface{}{arg1})
	fake.getFieldLevelEncryptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionCallCount() int {
	fake.getFieldLevelEncryptionMutex.RLock()
	defer fake.getFieldLevelEncryptionMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionCalls(stub func(*cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error)) {
	fake.getFieldLevelEncryptionMutex.Lock()
	defer fake.getFieldLevelEncryptionMutex.Unlock()
	fake.GetFieldLevelEncryptionStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionInput {
	fake.getFieldLevelEncryptionMutex.RLock()
	defer fake.getFieldLevelEncryptionMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionReturns(result1 *cloudfront.GetFieldLevelEncryptionOutput, result2 error) {
	fake.getFieldLevelEncryptionMutex.Lock()
	defer fake.getFieldLevelEncryptionMutex.Unlock()
	fake.GetFieldLevelEncryptionStub = nil
	fake.getFieldLevelEncryptionReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionOutput, result2 error) {
	fake.getFieldLevelEncryptionMutex.Lock()
	defer fake.getFieldLevelEncryptionMutex.Unlock()
	fake.GetFieldLevelEncryptionStub = nil
	if fake.getFieldLevelEncryptionReturnsOnCall == nil {
		fake.getFieldLevelEncryptionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfig(arg1 *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	fake.getFieldLevelEncryptionConfigMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionConfigReturnsOnCall[len(fake.getFieldLevelEncryptionConfigArgsForCall)]
	fake.getFieldLevelEncryptionConfigArgsForCall = append(fake.getFieldLevelEncryptionConfigArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionConfigStub
	fakeReturns := fake.getFieldLevelEncryptionConfigReturns
	fake.recordInvocation("GetFieldLevelEncryptionConfig", []interface{}{arg1})
	fake.getFieldLevelEncryptionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigCallCount() int {
	fake.getFieldLevelEncryptionConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionConfigArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigCalls(stub func(*cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)) {
	fake.getFieldLevelEncryptionConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionConfigInput {
	fake.getFieldLevelEncryptionConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigReturns(result1 *cloudfront.GetFieldLevelEncryptionConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigStub = nil
	fake.getFieldLevelEncryptionConfigReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigStub = nil
	if fake.getFieldLevelEncryptionConfigReturnsOnCall == nil {
		fake.getFieldLevelEncryptionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequest(arg1 *cloudfront.GetFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	fake.getFieldLevelEncryptionConfigRequestMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionConfigRequestReturnsOnCall[len(fake.getFieldLevelEncryptionConfigRequestArgsForCall)]
	fake.getFieldLevelEncryptionConfigRequestArgsForCall = append(fake.getFieldLevelEncryptionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionConfigRequestStub
	fakeReturns := fake.getFieldLevelEncryptionConfigRequestReturns
	fake.recordInvocation("GetFieldLevelEncryptionConfigRequest", []interface{}{arg1})
	fake.getFieldLevelEncryptionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequestCallCount() int {
	fake.getFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequestCalls(stub func(*cloudfront.GetFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionConfigOutput)) {
	fake.getFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequestArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionConfigInput {
	fake.getFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	fake.getFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigRequestStub = nil
	fake.getFieldLevelEncryptionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	fake.getFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigRequestStub = nil
	if fake.getFieldLevelEncryptionConfigRequestReturnsOnCall == nil {
		fake.getFieldLevelEncryptionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetFieldLevelEncryptionConfigOutput
		})
	}
	fake.getFieldLevelEncryptionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetFieldLevelEncryptionConfigInput, arg3 ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	fake.getFieldLevelEncryptionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionConfigWithContextReturnsOnCall[len(fake.getFieldLevelEncryptionConfigWithContextArgsForCall)]
	fake.getFieldLevelEncryptionConfigWithContextArgsForCall = append(fake.getFieldLevelEncryptionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetFieldLevelEncryptionConfigWithContextStub
	fakeReturns := fake.getFieldLevelEncryptionConfigWithContextReturns
	fake.recordInvocation("GetFieldLevelEncryptionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getFieldLevelEncryptionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContextCallCount() int {
	fake.getFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContextCalls(stub func(context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)) {
	fake.getFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, []request.Option) {
	fake.getFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContextReturns(result1 *cloudfront.GetFieldLevelEncryptionConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigWithContextStub = nil
	fake.getFieldLevelEncryptionConfigWithContextReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionConfigWithContextStub = nil
	if fake.getFieldLevelEncryptionConfigWithContextReturnsOnCall == nil {
		fake.getFieldLevelEncryptionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfile(arg1 *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	fake.getFieldLevelEncryptionProfileMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileReturnsOnCall[len(fake.getFieldLevelEncryptionProfileArgsForCall)]
	fake.getFieldLevelEncryptionProfileArgsForCall = append(fake.getFieldLevelEncryptionProfileArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionProfileStub
	fakeReturns := fake.getFieldLevelEncryptionProfileReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfile", []interface{}{arg1})
	fake.getFieldLevelEncryptionProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileCallCount() int {
	fake.getFieldLevelEncryptionProfileMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileCalls(stub func(*cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)) {
	fake.getFieldLevelEncryptionProfileMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionProfileInput {
	fake.getFieldLevelEncryptionProfileMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileReturns(result1 *cloudfront.GetFieldLevelEncryptionProfileOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileStub = nil
	fake.getFieldLevelEncryptionProfileReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionProfileOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileStub = nil
	if fake.getFieldLevelEncryptionProfileReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionProfileReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfig(arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	fake.getFieldLevelEncryptionProfileConfigMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileConfigReturnsOnCall[len(fake.getFieldLevelEncryptionProfileConfigArgsForCall)]
	fake.getFieldLevelEncryptionProfileConfigArgsForCall = append(fake.getFieldLevelEncryptionProfileConfigArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionProfileConfigStub
	fakeReturns := fake.getFieldLevelEncryptionProfileConfigReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfileConfig", []interface{}{arg1})
	fake.getFieldLevelEncryptionProfileConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigCallCount() int {
	fake.getFieldLevelEncryptionProfileConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileConfigArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigCalls(stub func(*cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)) {
	fake.getFieldLevelEncryptionProfileConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionProfileConfigInput {
	fake.getFieldLevelEncryptionProfileConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigReturns(result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigStub = nil
	fake.getFieldLevelEncryptionProfileConfigReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileConfigMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigStub = nil
	if fake.getFieldLevelEncryptionProfileConfigReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionProfileConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequest(arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileConfigRequestReturnsOnCall[len(fake.getFieldLevelEncryptionProfileConfigRequestArgsForCall)]
	fake.getFieldLevelEncryptionProfileConfigRequestArgsForCall = append(fake.getFieldLevelEncryptionProfileConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionProfileConfigRequestStub
	fakeReturns := fake.getFieldLevelEncryptionProfileConfigRequestReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfileConfigRequest", []interface{}{arg1})
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequestCallCount() int {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequestCalls(stub func(*cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileConfigOutput)) {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequestArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionProfileConfigInput {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigRequestStub = nil
	fake.getFieldLevelEncryptionProfileConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigRequestStub = nil
	if fake.getFieldLevelEncryptionProfileConfigRequestReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		})
	}
	fake.getFieldLevelEncryptionProfileConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetFieldLevelEncryptionProfileConfigInput, arg3 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileConfigWithContextReturnsOnCall[len(fake.getFieldLevelEncryptionProfileConfigWithContextArgsForCall)]
	fake.getFieldLevelEncryptionProfileConfigWithContextArgsForCall = append(fake.getFieldLevelEncryptionProfileConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionProfileConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetFieldLevelEncryptionProfileConfigWithContextStub
	fakeReturns := fake.getFieldLevelEncryptionProfileConfigWithContextReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfileConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContextCallCount() int {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContextCalls(stub func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)) {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, []request.Option) {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContextReturns(result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigWithContextStub = nil
	fake.getFieldLevelEncryptionProfileConfigWithContextReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileConfigWithContextStub = nil
	if fake.getFieldLevelEncryptionProfileConfigWithContextReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionProfileConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequest(arg1 *cloudfront.GetFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	fake.getFieldLevelEncryptionProfileRequestMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileRequestReturnsOnCall[len(fake.getFieldLevelEncryptionProfileRequestArgsForCall)]
	fake.getFieldLevelEncryptionProfileRequestArgsForCall = append(fake.getFieldLevelEncryptionProfileRequestArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionProfileRequestStub
	fakeReturns := fake.getFieldLevelEncryptionProfileRequestReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfileRequest", []interface{}{arg1})
	fake.getFieldLevelEncryptionProfileRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequestCallCount() int {
	fake.getFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileRequestArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequestCalls(stub func(*cloudfront.GetFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileOutput)) {
	fake.getFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileRequestStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequestArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionProfileInput {
	fake.getFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequestReturns(result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	fake.getFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileRequestStub = nil
	fake.getFieldLevelEncryptionProfileRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	fake.getFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileRequestStub = nil
	if fake.getFieldLevelEncryptionProfileRequestReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetFieldLevelEncryptionProfileOutput
		})
	}
	fake.getFieldLevelEncryptionProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContext(arg1 context.Context, arg2 *cloudfront.GetFieldLevelEncryptionProfileInput, arg3 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	fake.getFieldLevelEncryptionProfileWithContextMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionProfileWithContextReturnsOnCall[len(fake.getFieldLevelEncryptionProfileWithContextArgsForCall)]
	fake.getFieldLevelEncryptionProfileWithContextArgsForCall = append(fake.getFieldLevelEncryptionProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetFieldLevelEncryptionProfileWithContextStub
	fakeReturns := fake.getFieldLevelEncryptionProfileWithContextReturns
	fake.recordInvocation("GetFieldLevelEncryptionProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.getFieldLevelEncryptionProfileWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContextCallCount() int {
	fake.getFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionProfileWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContextCalls(stub func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)) {
	fake.getFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileWithContextStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContextArgsForCall(i int) (context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, []request.Option) {
	fake.getFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContextReturns(result1 *cloudfront.GetFieldLevelEncryptionProfileOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileWithContextStub = nil
	fake.getFieldLevelEncryptionProfileWithContextReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionProfileWithContextReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionProfileOutput, result2 error) {
	fake.getFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionProfileWithContextStub = nil
	if fake.getFieldLevelEncryptionProfileWithContextReturnsOnCall == nil {
		fake.getFieldLevelEncryptionProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionProfileWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequest(arg1 *cloudfront.GetFieldLevelEncryptionInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionOutput) {
	fake.getFieldLevelEncryptionRequestMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionRequestReturnsOnCall[len(fake.getFieldLevelEncryptionRequestArgsForCall)]
	fake.getFieldLevelEncryptionRequestArgsForCall = append(fake.getFieldLevelEncryptionRequestArgsForCall, struct {
		arg1 *cloudfront.GetFieldLevelEncryptionInput
	}{arg1})
	stub := fake.GetFieldLevelEncryptionRequestStub
	fakeReturns := fake.getFieldLevelEncryptionRequestReturns
	fake.recordInvocation("GetFieldLevelEncryptionRequest", []interface{}{arg1})
	fake.getFieldLevelEncryptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequestCallCount() int {
	fake.getFieldLevelEncryptionRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionRequestMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionRequestArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequestCalls(stub func(*cloudfront.GetFieldLevelEncryptionInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionOutput)) {
	fake.getFieldLevelEncryptionRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionRequestStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequestArgsForCall(i int) *cloudfront.GetFieldLevelEncryptionInput {
	fake.getFieldLevelEncryptionRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionRequestMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequestReturns(result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionOutput) {
	fake.getFieldLevelEncryptionRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionRequestStub = nil
	fake.getFieldLevelEncryptionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetFieldLevelEncryptionOutput) {
	fake.getFieldLevelEncryptionRequestMutex.Lock()
	defer fake.getFieldLevelEncryptionRequestMutex.Unlock()
	fake.GetFieldLevelEncryptionRequestStub = nil
	if fake.getFieldLevelEncryptionRequestReturnsOnCall == nil {
		fake.getFieldLevelEncryptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetFieldLevelEncryptionOutput
		})
	}
	fake.getFieldLevelEncryptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetFieldLevelEncryptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContext(arg1 context.Context, arg2 *cloudfront.GetFieldLevelEncryptionInput, arg3 ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	fake.getFieldLevelEncryptionWithContextMutex.Lock()
	ret, specificReturn := fake.getFieldLevelEncryptionWithContextReturnsOnCall[len(fake.getFieldLevelEncryptionWithContextArgsForCall)]
	fake.getFieldLevelEncryptionWithContextArgsForCall = append(fake.getFieldLevelEncryptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetFieldLevelEncryptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetFieldLevelEncryptionWithContextStub
	fakeReturns := fake.getFieldLevelEncryptionWithContextReturns
	fake.recordInvocation("GetFieldLevelEncryptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getFieldLevelEncryptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContextCallCount() int {
	fake.getFieldLevelEncryptionWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionWithContextMutex.RUnlock()
	return len(fake.getFieldLevelEncryptionWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContextCalls(stub func(context.Context, *cloudfront.GetFieldLevelEncryptionInput, ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error)) {
	fake.getFieldLevelEncryptionWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionWithContextStub = stub
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContextArgsForCall(i int) (context.Context, *cloudfront.GetFieldLevelEncryptionInput, []request.Option) {
	fake.getFieldLevelEncryptionWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionWithContextMutex.RUnlock()
	argsForCall := fake.getFieldLevelEncryptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContextReturns(result1 *cloudfront.GetFieldLevelEncryptionOutput, result2 error) {
	fake.getFieldLevelEncryptionWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionWithContextStub = nil
	fake.getFieldLevelEncryptionWithContextReturns = struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFieldLevelEncryptionWithContextReturnsOnCall(i int, result1 *cloudfront.GetFieldLevelEncryptionOutput, result2 error) {
	fake.getFieldLevelEncryptionWithContextMutex.Lock()
	defer fake.getFieldLevelEncryptionWithContextMutex.Unlock()
	fake.GetFieldLevelEncryptionWithContextStub = nil
	if fake.getFieldLevelEncryptionWithContextReturnsOnCall == nil {
		fake.getFieldLevelEncryptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFieldLevelEncryptionOutput
			result2 error
		})
	}
	fake.getFieldLevelEncryptionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFieldLevelEncryptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunction(arg1 *cloudfront.GetFunctionInput) (*cloudfront.GetFunctionOutput, error) {
	fake.getFunctionMutex.Lock()
	ret, specificReturn := fake.getFunctionReturnsOnCall[len(fake.getFunctionArgsForCall)]
	fake.getFunctionArgsForCall = append(fake.getFunctionArgsForCall, struct {
		arg1 *cloudfront.GetFunctionInput
	}{arg1})
	stub := fake.GetFunctionStub
	fakeReturns := fake.getFunctionReturns
	fake.recordInvocation("GetFunction", []interface{}{arg1})
	fake.getFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFunctionCallCount() int {
	fake.getFunctionMutex.RLock()
	defer fake.getFunctionMutex.RUnlock()
	return len(fake.getFunctionArgsForCall)
}

func (fake *FakeCloudfront) GetFunctionCalls(stub func(*cloudfront.GetFunctionInput) (*cloudfront.GetFunctionOutput, error)) {
	fake.getFunctionMutex.Lock()
	defer fake.getFunctionMutex.Unlock()
	fake.GetFunctionStub = stub
}

func (fake *FakeCloudfront) GetFunctionArgsForCall(i int) *cloudfront.GetFunctionInput {
	fake.getFunctionMutex.RLock()
	defer fake.getFunctionMutex.RUnlock()
	argsForCall := fake.getFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFunctionReturns(result1 *cloudfront.GetFunctionOutput, result2 error) {
	fake.getFunctionMutex.Lock()
	defer fake.getFunctionMutex.Unlock()
	fake.GetFunctionStub = nil
	fake.getFunctionReturns = struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunctionReturnsOnCall(i int, result1 *cloudfront.GetFunctionOutput, result2 error) {
	fake.getFunctionMutex.Lock()
	defer fake.getFunctionMutex.Unlock()
	fake.GetFunctionStub = nil
	if fake.getFunctionReturnsOnCall == nil {
		fake.getFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFunctionOutput
			result2 error
		})
	}
	fake.getFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunctionRequest(arg1 *cloudfront.GetFunctionInput) (*request.Request, *cloudfront.GetFunctionOutput) {
	fake.getFunctionRequestMutex.Lock()
	ret, specificReturn := fake.getFunctionRequestReturnsOnCall[len(fake.getFunctionRequestArgsForCall)]
	fake.getFunctionRequestArgsForCall = append(fake.getFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.GetFunctionInput
	}{arg1})
	stub := fake.GetFunctionRequestStub
	fakeReturns := fake.getFunctionRequestReturns
	fake.recordInvocation("GetFunctionRequest", []interface{}{arg1})
	fake.getFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFunctionRequestCallCount() int {
	fake.getFunctionRequestMutex.RLock()
	defer fake.getFunctionRequestMutex.RUnlock()
	return len(fake.getFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) GetFunctionRequestCalls(stub func(*cloudfront.GetFunctionInput) (*request.Request, *cloudfront.GetFunctionOutput)) {
	fake.getFunctionRequestMutex.Lock()
	defer fake.getFunctionRequestMutex.Unlock()
	fake.GetFunctionRequestStub = stub
}

func (fake *FakeCloudfront) GetFunctionRequestArgsForCall(i int) *cloudfront.GetFunctionInput {
	fake.getFunctionRequestMutex.RLock()
	defer fake.getFunctionRequestMutex.RUnlock()
	argsForCall := fake.getFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.GetFunctionOutput) {
	fake.getFunctionRequestMutex.Lock()
	defer fake.getFunctionRequestMutex.Unlock()
	fake.GetFunctionRequestStub = nil
	fake.getFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetFunctionOutput) {
	fake.getFunctionRequestMutex.Lock()
	defer fake.getFunctionRequestMutex.Unlock()
	fake.GetFunctionRequestStub = nil
	if fake.getFunctionRequestReturnsOnCall == nil {
		fake.getFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetFunctionOutput
		})
	}
	fake.getFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunctionWithContext(arg1 context.Context, arg2 *cloudfront.GetFunctionInput, arg3 ...request.Option) (*cloudfront.GetFunctionOutput, error) {
	fake.getFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.getFunctionWithContextReturnsOnCall[len(fake.getFunctionWithContextArgsForCall)]
	fake.getFunctionWithContextArgsForCall = append(fake.getFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetFunctionWithContextStub
	fakeReturns := fake.getFunctionWithContextReturns
	fake.recordInvocation("GetFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetFunctionWithContextCallCount() int {
	fake.getFunctionWithContextMutex.RLock()
	defer fake.getFunctionWithContextMutex.RUnlock()
	return len(fake.getFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetFunctionWithContextCalls(stub func(context.Context, *cloudfront.GetFunctionInput, ...request.Option) (*cloudfront.GetFunctionOutput, error)) {
	fake.getFunctionWithContextMutex.Lock()
	defer fake.getFunctionWithContextMutex.Unlock()
	fake.GetFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) GetFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.GetFunctionInput, []request.Option) {
	fake.getFunctionWithContextMutex.RLock()
	defer fake.getFunctionWithContextMutex.RUnlock()
	argsForCall := fake.getFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetFunctionWithContextReturns(result1 *cloudfront.GetFunctionOutput, result2 error) {
	fake.getFunctionWithContextMutex.Lock()
	defer fake.getFunctionWithContextMutex.Unlock()
	fake.GetFunctionWithContextStub = nil
	fake.getFunctionWithContextReturns = struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.GetFunctionOutput, result2 error) {
	fake.getFunctionWithContextMutex.Lock()
	defer fake.getFunctionWithContextMutex.Unlock()
	fake.GetFunctionWithContextStub = nil
	if fake.getFunctionWithContextReturnsOnCall == nil {
		fake.getFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetFunctionOutput
			result2 error
		})
	}
	fake.getFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidation(arg1 *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	fake.getInvalidationMutex.Lock()
	ret, specificReturn := fake.getInvalidationReturnsOnCall[len(fake.getInvalidationArgsForCall)]
	fake.getInvalidationArgsForCall = append(fake.getInvalidationArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	stub := fake.GetInvalidationStub
	fakeReturns := fake.getInvalidationReturns
	fake.recordInvocation("GetInvalidation", []interface{}{arg1})
	fake.getInvalidationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetInvalidationCallCount() int {
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	return len(fake.getInvalidationArgsForCall)
}

func (fake *FakeCloudfront) GetInvalidationCalls(stub func(*cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error)) {
	fake.getInvalidationMutex.Lock()
	defer fake.getInvalidationMutex.Unlock()
	fake.GetInvalidationStub = stub
}

func (fake *FakeCloudfront) GetInvalidationArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	argsForCall := fake.getInvalidationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetInvalidationReturns(result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.getInvalidationMutex.Lock()
	defer fake.getInvalidationMutex.Unlock()
	fake.GetInvalidationStub = nil
	fake.getInvalidationReturns = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidationReturnsOnCall(i int, result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.getInvalidationMutex.Lock()
	defer fake.getInvalidationMutex.Unlock()
	fake.GetInvalidationStub = nil
	if fake.getInvalidationReturnsOnCall == nil {
		fake.getInvalidationReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetInvalidationOutput
			result2 error
		})
	}
	fake.getInvalidationReturnsOnCall[i] = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidationRequest(arg1 *cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput) {
	fake.getInvalidationRequestMutex.Lock()
	ret, specificReturn := fake.getInvalidationRequestReturnsOnCall[len(fake.getInvalidationRequestArgsForCall)]
	fake.getInvalidationRequestArgsForCall = append(fake.getInvalidationRequestArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	stub := fake.GetInvalidationRequestStub
	fakeReturns := fake.getInvalidationRequestReturns
	fake.recordInvocation("GetInvalidationRequest", []interface{}{arg1})
	fake.getInvalidationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetInvalidationRequestCallCount() int {
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	return len(fake.getInvalidationRequestArgsForCall)
}

func (fake *FakeCloudfront) GetInvalidationRequestCalls(stub func(*cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput)) {
	fake.getInvalidationRequestMutex.Lock()
	defer fake.getInvalidationRequestMutex.Unlock()
	fake.GetInvalidationRequestStub = stub
}

func (fake *FakeCloudfront) GetInvalidationRequestArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	argsForCall := fake.getInvalidationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetInvalidationRequestReturns(result1 *request.Request, result2 *cloudfront.GetInvalidationOutput) {
	fake.getInvalidationRequestMutex.Lock()
	defer fake.getInvalidationRequestMutex.Unlock()
	fake.GetInvalidationRequestStub = nil
	fake.getInvalidationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetInvalidationOutput) {
	fake.getInvalidationRequestMutex.Lock()
	defer fake.getInvalidationRequestMutex.Unlock()
	fake.GetInvalidationRequestStub = nil
	if fake.getInvalidationRequestReturnsOnCall == nil {
		fake.getInvalidationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetInvalidationOutput
		})
	}
	fake.getInvalidationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidationWithContext(arg1 context.Context, arg2 *cloudfront.GetInvalidationInput, arg3 ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	fake.getInvalidationWithContextMutex.Lock()
	ret, specificReturn := fake.getInvalidationWithContextReturnsOnCall[len(fake.getInvalidationWithContextArgsForCall)]
	fake.getInvalidationWithContextArgsForCall = append(fake.getInvalidationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetInvalidationWithContextStub
	fakeReturns := fake.getInvalidationWithContextReturns
	fake.recordInvocation("GetInvalidationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInvalidationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetInvalidationWithContextCallCount() int {
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	return len(fake.getInvalidationWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetInvalidationWithContextCalls(stub func(context.Context, *cloudfront.GetInvalidationInput, ...request.Option) (*cloudfront.GetInvalidationOutput, error)) {
	fake.getInvalidationWithContextMutex.Lock()
	defer fake.getInvalidationWithContextMutex.Unlock()
	fake.GetInvalidationWithContextStub = stub
}

func (fake *FakeCloudfront) GetInvalidationWithContextArgsForCall(i int) (context.Context, *cloudfront.GetInvalidationInput, []request.Option) {
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	argsForCall := fake.getInvalidationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetInvalidationWithContextReturns(result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.getInvalidationWithContextMutex.Lock()
	defer fake.getInvalidationWithContextMutex.Unlock()
	fake.GetInvalidationWithContextStub = nil
	fake.getInvalidationWithContextReturns = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetInvalidationWithContextReturnsOnCall(i int, result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.getInvalidationWithContextMutex.Lock()
	defer fake.getInvalidationWithContextMutex.Unlock()
	fake.GetInvalidationWithContextStub = nil
	if fake.getInvalidationWithContextReturnsOnCall == nil {
		fake.getInvalidationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetInvalidationOutput
			result2 error
		})
	}
	fake.getInvalidationWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroup(arg1 *cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error) {
	fake.getKeyGroupMutex.Lock()
	ret, specificReturn := fake.getKeyGroupReturnsOnCall[len(fake.getKeyGroupArgsForCall)]
	fake.getKeyGroupArgsForCall = append(fake.getKeyGroupArgsForCall, struct {
		arg1 *cloudfront.GetKeyGroupInput
	}{arg1})
	stub := fake.GetKeyGroupStub
	fakeReturns := fake.getKeyGroupReturns
	fake.recordInvocation("GetKeyGroup", []interface{}{arg1})
	fake.getKeyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupCallCount() int {
	fake.getKeyGroupMutex.RLock()
	defer fake.getKeyGroupMutex.RUnlock()
	return len(fake.getKeyGroupArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupCalls(stub func(*cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error)) {
	fake.getKeyGroupMutex.Lock()
	defer fake.getKeyGroupMutex.Unlock()
	fake.GetKeyGroupStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupArgsForCall(i int) *cloudfront.GetKeyGroupInput {
	fake.getKeyGroupMutex.RLock()
	defer fake.getKeyGroupMutex.RUnlock()
	argsForCall := fake.getKeyGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetKeyGroupReturns(result1 *cloudfront.GetKeyGroupOutput, result2 error) {
	fake.getKeyGroupMutex.Lock()
	defer fake.getKeyGroupMutex.Unlock()
	fake.GetKeyGroupStub = nil
	fake.getKeyGroupReturns = struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupReturnsOnCall(i int, result1 *cloudfront.GetKeyGroupOutput, result2 error) {
	fake.getKeyGroupMutex.Lock()
	defer fake.getKeyGroupMutex.Unlock()
	fake.GetKeyGroupStub = nil
	if fake.getKeyGroupReturnsOnCall == nil {
		fake.getKeyGroupReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetKeyGroupOutput
			result2 error
		})
	}
	fake.getKeyGroupReturnsOnCall[i] = struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfig(arg1 *cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error) {
	fake.getKeyGroupConfigMutex.Lock()
	ret, specificReturn := fake.getKeyGroupConfigReturnsOnCall[len(fake.getKeyGroupConfigArgsForCall)]
	fake.getKeyGroupConfigArgsForCall = append(fake.getKeyGroupConfigArgsForCall, struct {
		arg1 *cloudfront.GetKeyGroupConfigInput
	}{arg1})
	stub := fake.GetKeyGroupConfigStub
	fakeReturns := fake.getKeyGroupConfigReturns
	fake.recordInvocation("GetKeyGroupConfig", []interface{}{arg1})
	fake.getKeyGroupConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupConfigCallCount() int {
	fake.getKeyGroupConfigMutex.RLock()
	defer fake.getKeyGroupConfigMutex.RUnlock()
	return len(fake.getKeyGroupConfigArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupConfigCalls(stub func(*cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error)) {
	fake.getKeyGroupConfigMutex.Lock()
	defer fake.getKeyGroupConfigMutex.Unlock()
	fake.GetKeyGroupConfigStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupConfigArgsForCall(i int) *cloudfront.GetKeyGroupConfigInput {
	fake.getKeyGroupConfigMutex.RLock()
	defer fake.getKeyGroupConfigMutex.RUnlock()
	argsForCall := fake.getKeyGroupConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetKeyGroupConfigReturns(result1 *cloudfront.GetKeyGroupConfigOutput, result2 error) {
	fake.getKeyGroupConfigMutex.Lock()
	defer fake.getKeyGroupConfigMutex.Unlock()
	fake.GetKeyGroupConfigStub = nil
	fake.getKeyGroupConfigReturns = struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfigReturnsOnCall(i int, result1 *cloudfront.GetKeyGroupConfigOutput, result2 error) {
	fake.getKeyGroupConfigMutex.Lock()
	defer fake.getKeyGroupConfigMutex.Unlock()
	fake.GetKeyGroupConfigStub = nil
	if fake.getKeyGroupConfigReturnsOnCall == nil {
		fake.getKeyGroupConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetKeyGroupConfigOutput
			result2 error
		})
	}
	fake.getKeyGroupConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequest(arg1 *cloudfront.GetKeyGroupConfigInput) (*request.Request, *cloudfront.GetKeyGroupConfigOutput) {
	fake.getKeyGroupConfigRequestMutex.Lock()
	ret, specificReturn := fake.getKeyGroupConfigRequestReturnsOnCall[len(fake.getKeyGroupConfigRequestArgsForCall)]
	fake.getKeyGroupConfigRequestArgsForCall = append(fake.getKeyGroupConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetKeyGroupConfigInput
	}{arg1})
	stub := fake.GetKeyGroupConfigRequestStub
	fakeReturns := fake.getKeyGroupConfigRequestReturns
	fake.recordInvocation("GetKeyGroupConfigRequest", []interface{}{arg1})
	fake.getKeyGroupConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequestCallCount() int {
	fake.getKeyGroupConfigRequestMutex.RLock()
	defer fake.getKeyGroupConfigRequestMutex.RUnlock()
	return len(fake.getKeyGroupConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequestCalls(stub func(*cloudfront.GetKeyGroupConfigInput) (*request.Request, *cloudfront.GetKeyGroupConfigOutput)) {
	fake.getKeyGroupConfigRequestMutex.Lock()
	defer fake.getKeyGroupConfigRequestMutex.Unlock()
	fake.GetKeyGroupConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequestArgsForCall(i int) *cloudfront.GetKeyGroupConfigInput {
	fake.getKeyGroupConfigRequestMutex.RLock()
	defer fake.getKeyGroupConfigRequestMutex.RUnlock()
	argsForCall := fake.getKeyGroupConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetKeyGroupConfigOutput) {
	fake.getKeyGroupConfigRequestMutex.Lock()
	defer fake.getKeyGroupConfigRequestMutex.Unlock()
	fake.GetKeyGroupConfigRequestStub = nil
	fake.getKeyGroupConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetKeyGroupConfigOutput) {
	fake.getKeyGroupConfigRequestMutex.Lock()
	defer fake.getKeyGroupConfigRequestMutex.Unlock()
	fake.GetKeyGroupConfigRequestStub = nil
	if fake.getKeyGroupConfigRequestReturnsOnCall == nil {
		fake.getKeyGroupConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetKeyGroupConfigOutput
		})
	}
	fake.getKeyGroupConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetKeyGroupConfigInput, arg3 ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error) {
	fake.getKeyGroupConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getKeyGroupConfigWithContextReturnsOnCall[len(fake.getKeyGroupConfigWithContextArgsForCall)]
	fake.getKeyGroupConfigWithContextArgsForCall = append(fake.getKeyGroupConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetKeyGroupConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetKeyGroupConfigWithContextStub
	fakeReturns := fake.getKeyGroupConfigWithContextReturns
	fake.recordInvocation("GetKeyGroupConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getKeyGroupConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContextCallCount() int {
	fake.getKeyGroupConfigWithContextMutex.RLock()
	defer fake.getKeyGroupConfigWithContextMutex.RUnlock()
	return len(fake.getKeyGroupConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContextCalls(stub func(context.Context, *cloudfront.GetKeyGroupConfigInput, ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error)) {
	fake.getKeyGroupConfigWithContextMutex.Lock()
	defer fake.getKeyGroupConfigWithContextMutex.Unlock()
	fake.GetKeyGroupConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetKeyGroupConfigInput, []request.Option) {
	fake.getKeyGroupConfigWithContextMutex.RLock()
	defer fake.getKeyGroupConfigWithContextMutex.RUnlock()
	argsForCall := fake.getKeyGroupConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContextReturns(result1 *cloudfront.GetKeyGroupConfigOutput, result2 error) {
	fake.getKeyGroupConfigWithContextMutex.Lock()
	defer fake.getKeyGroupConfigWithContextMutex.Unlock()
	fake.GetKeyGroupConfigWithContextStub = nil
	fake.getKeyGroupConfigWithContextReturns = struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetKeyGroupConfigOutput, result2 error) {
	fake.getKeyGroupConfigWithContextMutex.Lock()
	defer fake.getKeyGroupConfigWithContextMutex.Unlock()
	fake.GetKeyGroupConfigWithContextStub = nil
	if fake.getKeyGroupConfigWithContextReturnsOnCall == nil {
		fake.getKeyGroupConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetKeyGroupConfigOutput
			result2 error
		})
	}
	fake.getKeyGroupConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetKeyGroupConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupRequest(arg1 *cloudfront.GetKeyGroupInput) (*request.Request, *cloudfront.GetKeyGroupOutput) {
	fake.getKeyGroupRequestMutex.Lock()
	ret, specificReturn := fake.getKeyGroupRequestReturnsOnCall[len(fake.getKeyGroupRequestArgsForCall)]
	fake.getKeyGroupRequestArgsForCall = append(fake.getKeyGroupRequestArgsForCall, struct {
		arg1 *cloudfront.GetKeyGroupInput
	}{arg1})
	stub := fake.GetKeyGroupRequestStub
	fakeReturns := fake.getKeyGroupRequestReturns
	fake.recordInvocation("GetKeyGroupRequest", []interface{}{arg1})
	fake.getKeyGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupRequestCallCount() int {
	fake.getKeyGroupRequestMutex.RLock()
	defer fake.getKeyGroupRequestMutex.RUnlock()
	return len(fake.getKeyGroupRequestArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupRequestCalls(stub func(*cloudfront.GetKeyGroupInput) (*request.Request, *cloudfront.GetKeyGroupOutput)) {
	fake.getKeyGroupRequestMutex.Lock()
	defer fake.getKeyGroupRequestMutex.Unlock()
	fake.GetKeyGroupRequestStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupRequestArgsForCall(i int) *cloudfront.GetKeyGroupInput {
	fake.getKeyGroupRequestMutex.RLock()
	defer fake.getKeyGroupRequestMutex.RUnlock()
	argsForCall := fake.getKeyGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetKeyGroupRequestReturns(result1 *request.Request, result2 *cloudfront.GetKeyGroupOutput) {
	fake.getKeyGroupRequestMutex.Lock()
	defer fake.getKeyGroupRequestMutex.Unlock()
	fake.GetKeyGroupRequestStub = nil
	fake.getKeyGroupRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetKeyGroupOutput) {
	fake.getKeyGroupRequestMutex.Lock()
	defer fake.getKeyGroupRequestMutex.Unlock()
	fake.GetKeyGroupRequestStub = nil
	if fake.getKeyGroupRequestReturnsOnCall == nil {
		fake.getKeyGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetKeyGroupOutput
		})
	}
	fake.getKeyGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupWithContext(arg1 context.Context, arg2 *cloudfront.GetKeyGroupInput, arg3 ...request.Option) (*cloudfront.GetKeyGroupOutput, error) {
	fake.getKeyGroupWithContextMutex.Lock()
	ret, specificReturn := fake.getKeyGroupWithContextReturnsOnCall[len(fake.getKeyGroupWithContextArgsForCall)]
	fake.getKeyGroupWithContextArgsForCall = append(fake.getKeyGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetKeyGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetKeyGroupWithContextStub
	fakeReturns := fake.getKeyGroupWithContextReturns
	fake.recordInvocation("GetKeyGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.getKeyGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetKeyGroupWithContextCallCount() int {
	fake.getKeyGroupWithContextMutex.RLock()
	defer fake.getKeyGroupWithContextMutex.RUnlock()
	return len(fake.getKeyGroupWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetKeyGroupWithContextCalls(stub func(context.Context, *cloudfront.GetKeyGroupInput, ...request.Option) (*cloudfront.GetKeyGroupOutput, error)) {
	fake.getKeyGroupWithContextMutex.Lock()
	defer fake.getKeyGroupWithContextMutex.Unlock()
	fake.GetKeyGroupWithContextStub = stub
}

func (fake *FakeCloudfront) GetKeyGroupWithContextArgsForCall(i int) (context.Context, *cloudfront.GetKeyGroupInput, []request.Option) {
	fake.getKeyGroupWithContextMutex.RLock()
	defer fake.getKeyGroupWithContextMutex.RUnlock()
	argsForCall := fake.getKeyGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetKeyGroupWithContextReturns(result1 *cloudfront.GetKeyGroupOutput, result2 error) {
	fake.getKeyGroupWithContextMutex.Lock()
	defer fake.getKeyGroupWithContextMutex.Unlock()
	fake.GetKeyGroupWithContextStub = nil
	fake.getKeyGroupWithContextReturns = struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetKeyGroupWithContextReturnsOnCall(i int, result1 *cloudfront.GetKeyGroupOutput, result2 error) {
	fake.getKeyGroupWithContextMutex.Lock()
	defer fake.getKeyGroupWithContextMutex.Unlock()
	fake.GetKeyGroupWithContextStub = nil
	if fake.getKeyGroupWithContextReturnsOnCall == nil {
		fake.getKeyGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetKeyGroupOutput
			result2 error
		})
	}
	fake.getKeyGroupWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscription(arg1 *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	fake.getMonitoringSubscriptionMutex.Lock()
	ret, specificReturn := fake.getMonitoringSubscriptionReturnsOnCall[len(fake.getMonitoringSubscriptionArgsForCall)]
	fake.getMonitoringSubscriptionArgsForCall = append(fake.getMonitoringSubscriptionArgsForCall, struct {
		arg1 *cloudfront.GetMonitoringSubscriptionInput
	}{arg1})
	stub := fake.GetMonitoringSubscriptionStub
	fakeReturns := fake.getMonitoringSubscriptionReturns
	fake.recordInvocation("GetMonitoringSubscription", []interface{}{arg1})
	fake.getMonitoringSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionCallCount() int {
	fake.getMonitoringSubscriptionMutex.RLock()
	defer fake.getMonitoringSubscriptionMutex.RUnlock()
	return len(fake.getMonitoringSubscriptionArgsForCall)
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionCalls(stub func(*cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error)) {
	fake.getMonitoringSubscriptionMutex.Lock()
	defer fake.getMonitoringSubscriptionMutex.Unlock()
	fake.GetMonitoringSubscriptionStub = stub
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionArgsForCall(i int) *cloudfront.GetMonitoringSubscriptionInput {
	fake.getMonitoringSubscriptionMutex.RLock()
	defer fake.getMonitoringSubscriptionMutex.RUnlock()
	argsForCall := fake.getMonitoringSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionReturns(result1 *cloudfront.GetMonitoringSubscriptionOutput, result2 error) {
	fake.getMonitoringSubscriptionMutex.Lock()
	defer fake.getMonitoringSubscriptionMutex.Unlock()
	fake.GetMonitoringSubscriptionStub = nil
	fake.getMonitoringSubscriptionReturns = struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionReturnsOnCall(i int, result1 *cloudfront.GetMonitoringSubscriptionOutput, result2 error) {
	fake.getMonitoringSubscriptionMutex.Lock()
	defer fake.getMonitoringSubscriptionMutex.Unlock()
	fake.GetMonitoringSubscriptionStub = nil
	if fake.getMonitoringSubscriptionReturnsOnCall == nil {
		fake.getMonitoringSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.getMonitoringSubscriptionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequest(arg1 *cloudfront.GetMonitoringSubscriptionInput) (*request.Request, *cloudfront.GetMonitoringSubscriptionOutput) {
	fake.getMonitoringSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.getMonitoringSubscriptionRequestReturnsOnCall[len(fake.getMonitoringSubscriptionRequestArgsForCall)]
	fake.getMonitoringSubscriptionRequestArgsForCall = append(fake.getMonitoringSubscriptionRequestArgsForCall, struct {
		arg1 *cloudfront.GetMonitoringSubscriptionInput
	}{arg1})
	stub := fake.GetMonitoringSubscriptionRequestStub
	fakeReturns := fake.getMonitoringSubscriptionRequestReturns
	fake.recordInvocation("GetMonitoringSubscriptionRequest", []interface{}{arg1})
	fake.getMonitoringSubscriptionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequestCallCount() int {
	fake.getMonitoringSubscriptionRequestMutex.RLock()
	defer fake.getMonitoringSubscriptionRequestMutex.RUnlock()
	return len(fake.getMonitoringSubscriptionRequestArgsForCall)
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequestCalls(stub func(*cloudfront.GetMonitoringSubscriptionInput) (*request.Request, *cloudfront.GetMonitoringSubscriptionOutput)) {
	fake.getMonitoringSubscriptionRequestMutex.Lock()
	defer fake.getMonitoringSubscriptionRequestMutex.Unlock()
	fake.GetMonitoringSubscriptionRequestStub = stub
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequestArgsForCall(i int) *cloudfront.GetMonitoringSubscriptionInput {
	fake.getMonitoringSubscriptionRequestMutex.RLock()
	defer fake.getMonitoringSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.getMonitoringSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequestReturns(result1 *request.Request, result2 *cloudfront.GetMonitoringSubscriptionOutput) {
	fake.getMonitoringSubscriptionRequestMutex.Lock()
	defer fake.getMonitoringSubscriptionRequestMutex.Unlock()
	fake.GetMonitoringSubscriptionRequestStub = nil
	fake.getMonitoringSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetMonitoringSubscriptionOutput) {
	fake.getMonitoringSubscriptionRequestMutex.Lock()
	defer fake.getMonitoringSubscriptionRequestMutex.Unlock()
	fake.GetMonitoringSubscriptionRequestStub = nil
	if fake.getMonitoringSubscriptionRequestReturnsOnCall == nil {
		fake.getMonitoringSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetMonitoringSubscriptionOutput
		})
	}
	fake.getMonitoringSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetMonitoringSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContext(arg1 context.Context, arg2 *cloudfront.GetMonitoringSubscriptionInput, arg3 ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	fake.getMonitoringSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.getMonitoringSubscriptionWithContextReturnsOnCall[len(fake.getMonitoringSubscriptionWithContextArgsForCall)]
	fake.getMonitoringSubscriptionWithContextArgsForCall = append(fake.getMonitoringSubscriptionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetMonitoringSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetMonitoringSubscriptionWithContextStub
	fakeReturns := fake.getMonitoringSubscriptionWithContextReturns
	fake.recordInvocation("GetMonitoringSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMonitoringSubscriptionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContextCallCount() int {
	fake.getMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.getMonitoringSubscriptionWithContextMutex.RUnlock()
	return len(fake.getMonitoringSubscriptionWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContextCalls(stub func(context.Context, *cloudfront.GetMonitoringSubscriptionInput, ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error)) {
	fake.getMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.getMonitoringSubscriptionWithContextMutex.Unlock()
	fake.GetMonitoringSubscriptionWithContextStub = stub
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContextArgsForCall(i int) (context.Context, *cloudfront.GetMonitoringSubscriptionInput, []request.Option) {
	fake.getMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.getMonitoringSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.getMonitoringSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContextReturns(result1 *cloudfront.GetMonitoringSubscriptionOutput, result2 error) {
	fake.getMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.getMonitoringSubscriptionWithContextMutex.Unlock()
	fake.GetMonitoringSubscriptionWithContextStub = nil
	fake.getMonitoringSubscriptionWithContextReturns = struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetMonitoringSubscriptionWithContextReturnsOnCall(i int, result1 *cloudfront.GetMonitoringSubscriptionOutput, result2 error) {
	fake.getMonitoringSubscriptionWithContextMutex.Lock()
	defer fake.getMonitoringSubscriptionWithContextMutex.Unlock()
	fake.GetMonitoringSubscriptionWithContextStub = nil
	if fake.getMonitoringSubscriptionWithContextReturnsOnCall == nil {
		fake.getMonitoringSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetMonitoringSubscriptionOutput
			result2 error
		})
	}
	fake.getMonitoringSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetMonitoringSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicy(arg1 *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	fake.getOriginRequestPolicyMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyReturnsOnCall[len(fake.getOriginRequestPolicyArgsForCall)]
	fake.getOriginRequestPolicyArgsForCall = append(fake.getOriginRequestPolicyArgsForCall, struct {
		arg1 *cloudfront.GetOriginRequestPolicyInput
	}{arg1})
	stub := fake.GetOriginRequestPolicyStub
	fakeReturns := fake.getOriginRequestPolicyReturns
	fake.recordInvocation("GetOriginRequestPolicy", []interface{}{arg1})
	fake.getOriginRequestPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyCallCount() int {
	fake.getOriginRequestPolicyMutex.RLock()
	defer fake.getOriginRequestPolicyMutex.RUnlock()
	return len(fake.getOriginRequestPolicyArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyCalls(stub func(*cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error)) {
	fake.getOriginRequestPolicyMutex.Lock()
	defer fake.getOriginRequestPolicyMutex.Unlock()
	fake.GetOriginRequestPolicyStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyArgsForCall(i int) *cloudfront.GetOriginRequestPolicyInput {
	fake.getOriginRequestPolicyMutex.RLock()
	defer fake.getOriginRequestPolicyMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetOriginRequestPolicyReturns(result1 *cloudfront.GetOriginRequestPolicyOutput, result2 error) {
	fake.getOriginRequestPolicyMutex.Lock()
	defer fake.getOriginRequestPolicyMutex.Unlock()
	fake.GetOriginRequestPolicyStub = nil
	fake.getOriginRequestPolicyReturns = struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyReturnsOnCall(i int, result1 *cloudfront.GetOriginRequestPolicyOutput, result2 error) {
	fake.getOriginRequestPolicyMutex.Lock()
	defer fake.getOriginRequestPolicyMutex.Unlock()
	fake.GetOriginRequestPolicyStub = nil
	if fake.getOriginRequestPolicyReturnsOnCall == nil {
		fake.getOriginRequestPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.getOriginRequestPolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfig(arg1 *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	fake.getOriginRequestPolicyConfigMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyConfigReturnsOnCall[len(fake.getOriginRequestPolicyConfigArgsForCall)]
	fake.getOriginRequestPolicyConfigArgsForCall = append(fake.getOriginRequestPolicyConfigArgsForCall, struct {
		arg1 *cloudfront.GetOriginRequestPolicyConfigInput
	}{arg1})
	stub := fake.GetOriginRequestPolicyConfigStub
	fakeReturns := fake.getOriginRequestPolicyConfigReturns
	fake.recordInvocation("GetOriginRequestPolicyConfig", []interface{}{arg1})
	fake.getOriginRequestPolicyConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigCallCount() int {
	fake.getOriginRequestPolicyConfigMutex.RLock()
	defer fake.getOriginRequestPolicyConfigMutex.RUnlock()
	return len(fake.getOriginRequestPolicyConfigArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigCalls(stub func(*cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)) {
	fake.getOriginRequestPolicyConfigMutex.Lock()
	defer fake.getOriginRequestPolicyConfigMutex.Unlock()
	fake.GetOriginRequestPolicyConfigStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigArgsForCall(i int) *cloudfront.GetOriginRequestPolicyConfigInput {
	fake.getOriginRequestPolicyConfigMutex.RLock()
	defer fake.getOriginRequestPolicyConfigMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigReturns(result1 *cloudfront.GetOriginRequestPolicyConfigOutput, result2 error) {
	fake.getOriginRequestPolicyConfigMutex.Lock()
	defer fake.getOriginRequestPolicyConfigMutex.Unlock()
	fake.GetOriginRequestPolicyConfigStub = nil
	fake.getOriginRequestPolicyConfigReturns = struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigReturnsOnCall(i int, result1 *cloudfront.GetOriginRequestPolicyConfigOutput, result2 error) {
	fake.getOriginRequestPolicyConfigMutex.Lock()
	defer fake.getOriginRequestPolicyConfigMutex.Unlock()
	fake.GetOriginRequestPolicyConfigStub = nil
	if fake.getOriginRequestPolicyConfigReturnsOnCall == nil {
		fake.getOriginRequestPolicyConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetOriginRequestPolicyConfigOutput
			result2 error
		})
	}
	fake.getOriginRequestPolicyConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequest(arg1 *cloudfront.GetOriginRequestPolicyConfigInput) (*request.Request, *cloudfront.GetOriginRequestPolicyConfigOutput) {
	fake.getOriginRequestPolicyConfigRequestMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyConfigRequestReturnsOnCall[len(fake.getOriginRequestPolicyConfigRequestArgsForCall)]
	fake.getOriginRequestPolicyConfigRequestArgsForCall = append(fake.getOriginRequestPolicyConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetOriginRequestPolicyConfigInput
	}{arg1})
	stub := fake.GetOriginRequestPolicyConfigRequestStub
	fakeReturns := fake.getOriginRequestPolicyConfigRequestReturns
	fake.recordInvocation("GetOriginRequestPolicyConfigRequest", []interface{}{arg1})
	fake.getOriginRequestPolicyConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequestCallCount() int {
	fake.getOriginRequestPolicyConfigRequestMutex.RLock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.RUnlock()
	return len(fake.getOriginRequestPolicyConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequestCalls(stub func(*cloudfront.GetOriginRequestPolicyConfigInput) (*request.Request, *cloudfront.GetOriginRequestPolicyConfigOutput)) {
	fake.getOriginRequestPolicyConfigRequestMutex.Lock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.Unlock()
	fake.GetOriginRequestPolicyConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequestArgsForCall(i int) *cloudfront.GetOriginRequestPolicyConfigInput {
	fake.getOriginRequestPolicyConfigRequestMutex.RLock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetOriginRequestPolicyConfigOutput) {
	fake.getOriginRequestPolicyConfigRequestMutex.Lock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.Unlock()
	fake.GetOriginRequestPolicyConfigRequestStub = nil
	fake.getOriginRequestPolicyConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetOriginRequestPolicyConfigOutput) {
	fake.getOriginRequestPolicyConfigRequestMutex.Lock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.Unlock()
	fake.GetOriginRequestPolicyConfigRequestStub = nil
	if fake.getOriginRequestPolicyConfigRequestReturnsOnCall == nil {
		fake.getOriginRequestPolicyConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetOriginRequestPolicyConfigOutput
		})
	}
	fake.getOriginRequestPolicyConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetOriginRequestPolicyConfigInput, arg3 ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	fake.getOriginRequestPolicyConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyConfigWithContextReturnsOnCall[len(fake.getOriginRequestPolicyConfigWithContextArgsForCall)]
	fake.getOriginRequestPolicyConfigWithContextArgsForCall = append(fake.getOriginRequestPolicyConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetOriginRequestPolicyConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetOriginRequestPolicyConfigWithContextStub
	fakeReturns := fake.getOriginRequestPolicyConfigWithContextReturns
	fake.recordInvocation("GetOriginRequestPolicyConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOriginRequestPolicyConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContextCallCount() int {
	fake.getOriginRequestPolicyConfigWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.RUnlock()
	return len(fake.getOriginRequestPolicyConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContextCalls(stub func(context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)) {
	fake.getOriginRequestPolicyConfigWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, []request.Option) {
	fake.getOriginRequestPolicyConfigWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContextReturns(result1 *cloudfront.GetOriginRequestPolicyConfigOutput, result2 error) {
	fake.getOriginRequestPolicyConfigWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyConfigWithContextStub = nil
	fake.getOriginRequestPolicyConfigWithContextReturns = struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetOriginRequestPolicyConfigOutput, result2 error) {
	fake.getOriginRequestPolicyConfigWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyConfigWithContextStub = nil
	if fake.getOriginRequestPolicyConfigWithContextReturnsOnCall == nil {
		fake.getOriginRequestPolicyConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetOriginRequestPolicyConfigOutput
			result2 error
		})
	}
	fake.getOriginRequestPolicyConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetOriginRequestPolicyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequest(arg1 *cloudfront.GetOriginRequestPolicyInput) (*request.Request, *cloudfront.GetOriginRequestPolicyOutput) {
	fake.getOriginRequestPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyRequestReturnsOnCall[len(fake.getOriginRequestPolicyRequestArgsForCall)]
	fake.getOriginRequestPolicyRequestArgsForCall = append(fake.getOriginRequestPolicyRequestArgsForCall, struct {
		arg1 *cloudfront.GetOriginRequestPolicyInput
	}{arg1})
	stub := fake.GetOriginRequestPolicyRequestStub
	fakeReturns := fake.getOriginRequestPolicyRequestReturns
	fake.recordInvocation("GetOriginRequestPolicyRequest", []interface{}{arg1})
	fake.getOriginRequestPolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequestCallCount() int {
	fake.getOriginRequestPolicyRequestMutex.RLock()
	defer fake.getOriginRequestPolicyRequestMutex.RUnlock()
	return len(fake.getOriginRequestPolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequestCalls(stub func(*cloudfront.GetOriginRequestPolicyInput) (*request.Request, *cloudfront.GetOriginRequestPolicyOutput)) {
	fake.getOriginRequestPolicyRequestMutex.Lock()
	defer fake.getOriginRequestPolicyRequestMutex.Unlock()
	fake.GetOriginRequestPolicyRequestStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequestArgsForCall(i int) *cloudfront.GetOriginRequestPolicyInput {
	fake.getOriginRequestPolicyRequestMutex.RLock()
	defer fake.getOriginRequestPolicyRequestMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequestReturns(result1 *request.Request, result2 *cloudfront.GetOriginRequestPolicyOutput) {
	fake.getOriginRequestPolicyRequestMutex.Lock()
	defer fake.getOriginRequestPolicyRequestMutex.Unlock()
	fake.GetOriginRequestPolicyRequestStub = nil
	fake.getOriginRequestPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetOriginRequestPolicyOutput) {
	fake.getOriginRequestPolicyRequestMutex.Lock()
	defer fake.getOriginRequestPolicyRequestMutex.Unlock()
	fake.GetOriginRequestPolicyRequestStub = nil
	if fake.getOriginRequestPolicyRequestReturnsOnCall == nil {
		fake.getOriginRequestPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetOriginRequestPolicyOutput
		})
	}
	fake.getOriginRequestPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContext(arg1 context.Context, arg2 *cloudfront.GetOriginRequestPolicyInput, arg3 ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	fake.getOriginRequestPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getOriginRequestPolicyWithContextReturnsOnCall[len(fake.getOriginRequestPolicyWithContextArgsForCall)]
	fake.getOriginRequestPolicyWithContextArgsForCall = append(fake.getOriginRequestPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetOriginRequestPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetOriginRequestPolicyWithContextStub
	fakeReturns := fake.getOriginRequestPolicyWithContextReturns
	fake.recordInvocation("GetOriginRequestPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getOriginRequestPolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContextCallCount() int {
	fake.getOriginRequestPolicyWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyWithContextMutex.RUnlock()
	return len(fake.getOriginRequestPolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContextCalls(stub func(context.Context, *cloudfront.GetOriginRequestPolicyInput, ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error)) {
	fake.getOriginRequestPolicyWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyWithContextStub = stub
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.GetOriginRequestPolicyInput, []request.Option) {
	fake.getOriginRequestPolicyWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyWithContextMutex.RUnlock()
	argsForCall := fake.getOriginRequestPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContextReturns(result1 *cloudfront.GetOriginRequestPolicyOutput, result2 error) {
	fake.getOriginRequestPolicyWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyWithContextStub = nil
	fake.getOriginRequestPolicyWithContextReturns = struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetOriginRequestPolicyWithContextReturnsOnCall(i int, result1 *cloudfront.GetOriginRequestPolicyOutput, result2 error) {
	fake.getOriginRequestPolicyWithContextMutex.Lock()
	defer fake.getOriginRequestPolicyWithContextMutex.Unlock()
	fake.GetOriginRequestPolicyWithContextStub = nil
	if fake.getOriginRequestPolicyWithContextReturnsOnCall == nil {
		fake.getOriginRequestPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.getOriginRequestPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKey(arg1 *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	fake.getPublicKeyMutex.Lock()
	ret, specificReturn := fake.getPublicKeyReturnsOnCall[len(fake.getPublicKeyArgsForCall)]
	fake.getPublicKeyArgsForCall = append(fake.getPublicKeyArgsForCall, struct {
		arg1 *cloudfront.GetPublicKeyInput
	}{arg1})
	stub := fake.GetPublicKeyStub
	fakeReturns := fake.getPublicKeyReturns
	fake.recordInvocation("GetPublicKey", []interface{}{arg1})
	fake.getPublicKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyCallCount() int {
	fake.getPublicKeyMutex.RLock()
	defer fake.getPublicKeyMutex.RUnlock()
	return len(fake.getPublicKeyArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyCalls(stub func(*cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error)) {
	fake.getPublicKeyMutex.Lock()
	defer fake.getPublicKeyMutex.Unlock()
	fake.GetPublicKeyStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyArgsForCall(i int) *cloudfront.GetPublicKeyInput {
	fake.getPublicKeyMutex.RLock()
	defer fake.getPublicKeyMutex.RUnlock()
	argsForCall := fake.getPublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetPublicKeyReturns(result1 *cloudfront.GetPublicKeyOutput, result2 error) {
	fake.getPublicKeyMutex.Lock()
	defer fake.getPublicKeyMutex.Unlock()
	fake.GetPublicKeyStub = nil
	fake.getPublicKeyReturns = struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyReturnsOnCall(i int, result1 *cloudfront.GetPublicKeyOutput, result2 error) {
	fake.getPublicKeyMutex.Lock()
	defer fake.getPublicKeyMutex.Unlock()
	fake.GetPublicKeyStub = nil
	if fake.getPublicKeyReturnsOnCall == nil {
		fake.getPublicKeyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetPublicKeyOutput
			result2 error
		})
	}
	fake.getPublicKeyReturnsOnCall[i] = struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfig(arg1 *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	fake.getPublicKeyConfigMutex.Lock()
	ret, specificReturn := fake.getPublicKeyConfigReturnsOnCall[len(fake.getPublicKeyConfigArgsForCall)]
	fake.getPublicKeyConfigArgsForCall = append(fake.getPublicKeyConfigArgsForCall, struct {
		arg1 *cloudfront.GetPublicKeyConfigInput
	}{arg1})
	stub := fake.GetPublicKeyConfigStub
	fakeReturns := fake.getPublicKeyConfigReturns
	fake.recordInvocation("GetPublicKeyConfig", []interface{}{arg1})
	fake.getPublicKeyConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyConfigCallCount() int {
	fake.getPublicKeyConfigMutex.RLock()
	defer fake.getPublicKeyConfigMutex.RUnlock()
	return len(fake.getPublicKeyConfigArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyConfigCalls(stub func(*cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error)) {
	fake.getPublicKeyConfigMutex.Lock()
	defer fake.getPublicKeyConfigMutex.Unlock()
	fake.GetPublicKeyConfigStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyConfigArgsForCall(i int) *cloudfront.GetPublicKeyConfigInput {
	fake.getPublicKeyConfigMutex.RLock()
	defer fake.getPublicKeyConfigMutex.RUnlock()
	argsForCall := fake.getPublicKeyConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetPublicKeyConfigReturns(result1 *cloudfront.GetPublicKeyConfigOutput, result2 error) {
	fake.getPublicKeyConfigMutex.Lock()
	defer fake.getPublicKeyConfigMutex.Unlock()
	fake.GetPublicKeyConfigStub = nil
	fake.getPublicKeyConfigReturns = struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfigReturnsOnCall(i int, result1 *cloudfront.GetPublicKeyConfigOutput, result2 error) {
	fake.getPublicKeyConfigMutex.Lock()
	defer fake.getPublicKeyConfigMutex.Unlock()
	fake.GetPublicKeyConfigStub = nil
	if fake.getPublicKeyConfigReturnsOnCall == nil {
		fake.getPublicKeyConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetPublicKeyConfigOutput
			result2 error
		})
	}
	fake.getPublicKeyConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequest(arg1 *cloudfront.GetPublicKeyConfigInput) (*request.Request, *cloudfront.GetPublicKeyConfigOutput) {
	fake.getPublicKeyConfigRequestMutex.Lock()
	ret, specificReturn := fake.getPublicKeyConfigRequestReturnsOnCall[len(fake.getPublicKeyConfigRequestArgsForCall)]
	fake.getPublicKeyConfigRequestArgsForCall = append(fake.getPublicKeyConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetPublicKeyConfigInput
	}{arg1})
	stub := fake.GetPublicKeyConfigRequestStub
	fakeReturns := fake.getPublicKeyConfigRequestReturns
	fake.recordInvocation("GetPublicKeyConfigRequest", []interface{}{arg1})
	fake.getPublicKeyConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequestCallCount() int {
	fake.getPublicKeyConfigRequestMutex.RLock()
	defer fake.getPublicKeyConfigRequestMutex.RUnlock()
	return len(fake.getPublicKeyConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequestCalls(stub func(*cloudfront.GetPublicKeyConfigInput) (*request.Request, *cloudfront.GetPublicKeyConfigOutput)) {
	fake.getPublicKeyConfigRequestMutex.Lock()
	defer fake.getPublicKeyConfigRequestMutex.Unlock()
	fake.GetPublicKeyConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequestArgsForCall(i int) *cloudfront.GetPublicKeyConfigInput {
	fake.getPublicKeyConfigRequestMutex.RLock()
	defer fake.getPublicKeyConfigRequestMutex.RUnlock()
	argsForCall := fake.getPublicKeyConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetPublicKeyConfigOutput) {
	fake.getPublicKeyConfigRequestMutex.Lock()
	defer fake.getPublicKeyConfigRequestMutex.Unlock()
	fake.GetPublicKeyConfigRequestStub = nil
	fake.getPublicKeyConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetPublicKeyConfigOutput) {
	fake.getPublicKeyConfigRequestMutex.Lock()
	defer fake.getPublicKeyConfigRequestMutex.Unlock()
	fake.GetPublicKeyConfigRequestStub = nil
	if fake.getPublicKeyConfigRequestReturnsOnCall == nil {
		fake.getPublicKeyConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetPublicKeyConfigOutput
		})
	}
	fake.getPublicKeyConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetPublicKeyConfigInput, arg3 ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {
	fake.getPublicKeyConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getPublicKeyConfigWithContextReturnsOnCall[len(fake.getPublicKeyConfigWithContextArgsForCall)]
	fake.getPublicKeyConfigWithContextArgsForCall = append(fake.getPublicKeyConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetPublicKeyConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetPublicKeyConfigWithContextStub
	fakeReturns := fake.getPublicKeyConfigWithContextReturns
	fake.recordInvocation("GetPublicKeyConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPublicKeyConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContextCallCount() int {
	fake.getPublicKeyConfigWithContextMutex.RLock()
	defer fake.getPublicKeyConfigWithContextMutex.RUnlock()
	return len(fake.getPublicKeyConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContextCalls(stub func(context.Context, *cloudfront.GetPublicKeyConfigInput, ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error)) {
	fake.getPublicKeyConfigWithContextMutex.Lock()
	defer fake.getPublicKeyConfigWithContextMutex.Unlock()
	fake.GetPublicKeyConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetPublicKeyConfigInput, []request.Option) {
	fake.getPublicKeyConfigWithContextMutex.RLock()
	defer fake.getPublicKeyConfigWithContextMutex.RUnlock()
	argsForCall := fake.getPublicKeyConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContextReturns(result1 *cloudfront.GetPublicKeyConfigOutput, result2 error) {
	fake.getPublicKeyConfigWithContextMutex.Lock()
	defer fake.getPublicKeyConfigWithContextMutex.Unlock()
	fake.GetPublicKeyConfigWithContextStub = nil
	fake.getPublicKeyConfigWithContextReturns = struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetPublicKeyConfigOutput, result2 error) {
	fake.getPublicKeyConfigWithContextMutex.Lock()
	defer fake.getPublicKeyConfigWithContextMutex.Unlock()
	fake.GetPublicKeyConfigWithContextStub = nil
	if fake.getPublicKeyConfigWithContextReturnsOnCall == nil {
		fake.getPublicKeyConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetPublicKeyConfigOutput
			result2 error
		})
	}
	fake.getPublicKeyConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetPublicKeyConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyRequest(arg1 *cloudfront.GetPublicKeyInput) (*request.Request, *cloudfront.GetPublicKeyOutput) {
	fake.getPublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.getPublicKeyRequestReturnsOnCall[len(fake.getPublicKeyRequestArgsForCall)]
	fake.getPublicKeyRequestArgsForCall = append(fake.getPublicKeyRequestArgsForCall, struct {
		arg1 *cloudfront.GetPublicKeyInput
	}{arg1})
	stub := fake.GetPublicKeyRequestStub
	fakeReturns := fake.getPublicKeyRequestReturns
	fake.recordInvocation("GetPublicKeyRequest", []interface{}{arg1})
	fake.getPublicKeyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyRequestCallCount() int {
	fake.getPublicKeyRequestMutex.RLock()
	defer fake.getPublicKeyRequestMutex.RUnlock()
	return len(fake.getPublicKeyRequestArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyRequestCalls(stub func(*cloudfront.GetPublicKeyInput) (*request.Request, *cloudfront.GetPublicKeyOutput)) {
	fake.getPublicKeyRequestMutex.Lock()
	defer fake.getPublicKeyRequestMutex.Unlock()
	fake.GetPublicKeyRequestStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyRequestArgsForCall(i int) *cloudfront.GetPublicKeyInput {
	fake.getPublicKeyRequestMutex.RLock()
	defer fake.getPublicKeyRequestMutex.RUnlock()
	argsForCall := fake.getPublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetPublicKeyRequestReturns(result1 *request.Request, result2 *cloudfront.GetPublicKeyOutput) {
	fake.getPublicKeyRequestMutex.Lock()
	defer fake.getPublicKeyRequestMutex.Unlock()
	fake.GetPublicKeyRequestStub = nil
	fake.getPublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetPublicKeyOutput) {
	fake.getPublicKeyRequestMutex.Lock()
	defer fake.getPublicKeyRequestMutex.Unlock()
	fake.GetPublicKeyRequestStub = nil
	if fake.getPublicKeyRequestReturnsOnCall == nil {
		fake.getPublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetPublicKeyOutput
		})
	}
	fake.getPublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetPublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyWithContext(arg1 context.Context, arg2 *cloudfront.GetPublicKeyInput, arg3 ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {
	fake.getPublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.getPublicKeyWithContextReturnsOnCall[len(fake.getPublicKeyWithContextArgsForCall)]
	fake.getPublicKeyWithContextArgsForCall = append(fake.getPublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetPublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetPublicKeyWithContextStub
	fakeReturns := fake.getPublicKeyWithContextReturns
	fake.recordInvocation("GetPublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPublicKeyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetPublicKeyWithContextCallCount() int {
	fake.getPublicKeyWithContextMutex.RLock()
	defer fake.getPublicKeyWithContextMutex.RUnlock()
	return len(fake.getPublicKeyWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetPublicKeyWithContextCalls(stub func(context.Context, *cloudfront.GetPublicKeyInput, ...request.Option) (*cloudfront.GetPublicKeyOutput, error)) {
	fake.getPublicKeyWithContextMutex.Lock()
	defer fake.getPublicKeyWithContextMutex.Unlock()
	fake.GetPublicKeyWithContextStub = stub
}

func (fake *FakeCloudfront) GetPublicKeyWithContextArgsForCall(i int) (context.Context, *cloudfront.GetPublicKeyInput, []request.Option) {
	fake.getPublicKeyWithContextMutex.RLock()
	defer fake.getPublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.getPublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetPublicKeyWithContextReturns(result1 *cloudfront.GetPublicKeyOutput, result2 error) {
	fake.getPublicKeyWithContextMutex.Lock()
	defer fake.getPublicKeyWithContextMutex.Unlock()
	fake.GetPublicKeyWithContextStub = nil
	fake.getPublicKeyWithContextReturns = struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetPublicKeyWithContextReturnsOnCall(i int, result1 *cloudfront.GetPublicKeyOutput, result2 error) {
	fake.getPublicKeyWithContextMutex.Lock()
	defer fake.getPublicKeyWithContextMutex.Unlock()
	fake.GetPublicKeyWithContextStub = nil
	if fake.getPublicKeyWithContextReturnsOnCall == nil {
		fake.getPublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetPublicKeyOutput
			result2 error
		})
	}
	fake.getPublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetPublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfig(arg1 *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	fake.getRealtimeLogConfigMutex.Lock()
	ret, specificReturn := fake.getRealtimeLogConfigReturnsOnCall[len(fake.getRealtimeLogConfigArgsForCall)]
	fake.getRealtimeLogConfigArgsForCall = append(fake.getRealtimeLogConfigArgsForCall, struct {
		arg1 *cloudfront.GetRealtimeLogConfigInput
	}{arg1})
	stub := fake.GetRealtimeLogConfigStub
	fakeReturns := fake.getRealtimeLogConfigReturns
	fake.recordInvocation("GetRealtimeLogConfig", []interface{}{arg1})
	fake.getRealtimeLogConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetRealtimeLogConfigCallCount() int {
	fake.getRealtimeLogConfigMutex.RLock()
	defer fake.getRealtimeLogConfigMutex.RUnlock()
	return len(fake.getRealtimeLogConfigArgsForCall)
}

func (fake *FakeCloudfront) GetRealtimeLogConfigCalls(stub func(*cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error)) {
	fake.getRealtimeLogConfigMutex.Lock()
	defer fake.getRealtimeLogConfigMutex.Unlock()
	fake.GetRealtimeLogConfigStub = stub
}

func (fake *FakeCloudfront) GetRealtimeLogConfigArgsForCall(i int) *cloudfront.GetRealtimeLogConfigInput {
	fake.getRealtimeLogConfigMutex.RLock()
	defer fake.getRealtimeLogConfigMutex.RUnlock()
	argsForCall := fake.getRealtimeLogConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetRealtimeLogConfigReturns(result1 *cloudfront.GetRealtimeLogConfigOutput, result2 error) {
	fake.getRealtimeLogConfigMutex.Lock()
	defer fake.getRealtimeLogConfigMutex.Unlock()
	fake.GetRealtimeLogConfigStub = nil
	fake.getRealtimeLogConfigReturns = struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfigReturnsOnCall(i int, result1 *cloudfront.GetRealtimeLogConfigOutput, result2 error) {
	fake.getRealtimeLogConfigMutex.Lock()
	defer fake.getRealtimeLogConfigMutex.Unlock()
	fake.GetRealtimeLogConfigStub = nil
	if fake.getRealtimeLogConfigReturnsOnCall == nil {
		fake.getRealtimeLogConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.getRealtimeLogConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequest(arg1 *cloudfront.GetRealtimeLogConfigInput) (*request.Request, *cloudfront.GetRealtimeLogConfigOutput) {
	fake.getRealtimeLogConfigRequestMutex.Lock()
	ret, specificReturn := fake.getRealtimeLogConfigRequestReturnsOnCall[len(fake.getRealtimeLogConfigRequestArgsForCall)]
	fake.getRealtimeLogConfigRequestArgsForCall = append(fake.getRealtimeLogConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetRealtimeLogConfigInput
	}{arg1})
	stub := fake.GetRealtimeLogConfigRequestStub
	fakeReturns := fake.getRealtimeLogConfigRequestReturns
	fake.recordInvocation("GetRealtimeLogConfigRequest", []interface{}{arg1})
	fake.getRealtimeLogConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequestCallCount() int {
	fake.getRealtimeLogConfigRequestMutex.RLock()
	defer fake.getRealtimeLogConfigRequestMutex.RUnlock()
	return len(fake.getRealtimeLogConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequestCalls(stub func(*cloudfront.GetRealtimeLogConfigInput) (*request.Request, *cloudfront.GetRealtimeLogConfigOutput)) {
	fake.getRealtimeLogConfigRequestMutex.Lock()
	defer fake.getRealtimeLogConfigRequestMutex.Unlock()
	fake.GetRealtimeLogConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequestArgsForCall(i int) *cloudfront.GetRealtimeLogConfigInput {
	fake.getRealtimeLogConfigRequestMutex.RLock()
	defer fake.getRealtimeLogConfigRequestMutex.RUnlock()
	argsForCall := fake.getRealtimeLogConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetRealtimeLogConfigOutput) {
	fake.getRealtimeLogConfigRequestMutex.Lock()
	defer fake.getRealtimeLogConfigRequestMutex.Unlock()
	fake.GetRealtimeLogConfigRequestStub = nil
	fake.getRealtimeLogConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetRealtimeLogConfigOutput) {
	fake.getRealtimeLogConfigRequestMutex.Lock()
	defer fake.getRealtimeLogConfigRequestMutex.Unlock()
	fake.GetRealtimeLogConfigRequestStub = nil
	if fake.getRealtimeLogConfigRequestReturnsOnCall == nil {
		fake.getRealtimeLogConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetRealtimeLogConfigOutput
		})
	}
	fake.getRealtimeLogConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetRealtimeLogConfigInput, arg3 ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	fake.getRealtimeLogConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getRealtimeLogConfigWithContextReturnsOnCall[len(fake.getRealtimeLogConfigWithContextArgsForCall)]
	fake.getRealtimeLogConfigWithContextArgsForCall = append(fake.getRealtimeLogConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetRealtimeLogConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetRealtimeLogConfigWithContextStub
	fakeReturns := fake.getRealtimeLogConfigWithContextReturns
	fake.recordInvocation("GetRealtimeLogConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getRealtimeLogConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContextCallCount() int {
	fake.getRealtimeLogConfigWithContextMutex.RLock()
	defer fake.getRealtimeLogConfigWithContextMutex.RUnlock()
	return len(fake.getRealtimeLogConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContextCalls(stub func(context.Context, *cloudfront.GetRealtimeLogConfigInput, ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error)) {
	fake.getRealtimeLogConfigWithContextMutex.Lock()
	defer fake.getRealtimeLogConfigWithContextMutex.Unlock()
	fake.GetRealtimeLogConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetRealtimeLogConfigInput, []request.Option) {
	fake.getRealtimeLogConfigWithContextMutex.RLock()
	defer fake.getRealtimeLogConfigWithContextMutex.RUnlock()
	argsForCall := fake.getRealtimeLogConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContextReturns(result1 *cloudfront.GetRealtimeLogConfigOutput, result2 error) {
	fake.getRealtimeLogConfigWithContextMutex.Lock()
	defer fake.getRealtimeLogConfigWithContextMutex.Unlock()
	fake.GetRealtimeLogConfigWithContextStub = nil
	fake.getRealtimeLogConfigWithContextReturns = struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetRealtimeLogConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetRealtimeLogConfigOutput, result2 error) {
	fake.getRealtimeLogConfigWithContextMutex.Lock()
	defer fake.getRealtimeLogConfigWithContextMutex.Unlock()
	fake.GetRealtimeLogConfigWithContextStub = nil
	if fake.getRealtimeLogConfigWithContextReturnsOnCall == nil {
		fake.getRealtimeLogConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.getRealtimeLogConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistribution(arg1 *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	fake.getStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionReturnsOnCall[len(fake.getStreamingDistributionArgsForCall)]
	fake.getStreamingDistributionArgsForCall = append(fake.getStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	stub := fake.GetStreamingDistributionStub
	fakeReturns := fake.getStreamingDistributionReturns
	fake.recordInvocation("GetStreamingDistribution", []interface{}{arg1})
	fake.getStreamingDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionCallCount() int {
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	return len(fake.getStreamingDistributionArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionCalls(stub func(*cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error)) {
	fake.getStreamingDistributionMutex.Lock()
	defer fake.getStreamingDistributionMutex.Unlock()
	fake.GetStreamingDistributionStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetStreamingDistributionReturns(result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.getStreamingDistributionMutex.Lock()
	defer fake.getStreamingDistributionMutex.Unlock()
	fake.GetStreamingDistributionStub = nil
	fake.getStreamingDistributionReturns = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.getStreamingDistributionMutex.Lock()
	defer fake.getStreamingDistributionMutex.Unlock()
	fake.GetStreamingDistributionStub = nil
	if fake.getStreamingDistributionReturnsOnCall == nil {
		fake.getStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionOutput
			result2 error
		})
	}
	fake.getStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfig(arg1 *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	fake.getStreamingDistributionConfigMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigReturnsOnCall[len(fake.getStreamingDistributionConfigArgsForCall)]
	fake.getStreamingDistributionConfigArgsForCall = append(fake.getStreamingDistributionConfigArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}{arg1})
	stub := fake.GetStreamingDistributionConfigStub
	fakeReturns := fake.getStreamingDistributionConfigReturns
	fake.recordInvocation("GetStreamingDistributionConfig", []interface{}{arg1})
	fake.getStreamingDistributionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigCallCount() int {
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigCalls(stub func(*cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error)) {
	fake.getStreamingDistributionConfigMutex.Lock()
	defer fake.getStreamingDistributionConfigMutex.Unlock()
	fake.GetStreamingDistributionConfigStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigArgsForCall(i int) *cloudfront.GetStreamingDistributionConfigInput {
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigReturns(result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.getStreamingDistributionConfigMutex.Lock()
	defer fake.getStreamingDistributionConfigMutex.Unlock()
	fake.GetStreamingDistributionConfigStub = nil
	fake.getStreamingDistributionConfigReturns = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.getStreamingDistributionConfigMutex.Lock()
	defer fake.getStreamingDistributionConfigMutex.Unlock()
	fake.GetStreamingDistributionConfigStub = nil
	if fake.getStreamingDistributionConfigReturnsOnCall == nil {
		fake.getStreamingDistributionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionConfigOutput
			result2 error
		})
	}
	fake.getStreamingDistributionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequest(arg1 *cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.getStreamingDistributionConfigRequestMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigRequestReturnsOnCall[len(fake.getStreamingDistributionConfigRequestArgsForCall)]
	fake.getStreamingDistributionConfigRequestArgsForCall = append(fake.getStreamingDistributionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}{arg1})
	stub := fake.GetStreamingDistributionConfigRequestStub
	fakeReturns := fake.getStreamingDistributionConfigRequestReturns
	fake.recordInvocation("GetStreamingDistributionConfigRequest", []interface{}{arg1})
	fake.getStreamingDistributionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequestCallCount() int {
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequestCalls(stub func(*cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput)) {
	fake.getStreamingDistributionConfigRequestMutex.Lock()
	defer fake.getStreamingDistributionConfigRequestMutex.Unlock()
	fake.GetStreamingDistributionConfigRequestStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequestArgsForCall(i int) *cloudfront.GetStreamingDistributionConfigInput {
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.getStreamingDistributionConfigRequestMutex.Lock()
	defer fake.getStreamingDistributionConfigRequestMutex.Unlock()
	fake.GetStreamingDistributionConfigRequestStub = nil
	fake.getStreamingDistributionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.getStreamingDistributionConfigRequestMutex.Lock()
	defer fake.getStreamingDistributionConfigRequestMutex.Unlock()
	fake.GetStreamingDistributionConfigRequestStub = nil
	if fake.getStreamingDistributionConfigRequestReturnsOnCall == nil {
		fake.getStreamingDistributionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetStreamingDistributionConfigOutput
		})
	}
	fake.getStreamingDistributionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContext(arg1 context.Context, arg2 *cloudfront.GetStreamingDistributionConfigInput, arg3 ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	fake.getStreamingDistributionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigWithContextReturnsOnCall[len(fake.getStreamingDistributionConfigWithContextArgsForCall)]
	fake.getStreamingDistributionConfigWithContextArgsForCall = append(fake.getStreamingDistributionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetStreamingDistributionConfigWithContextStub
	fakeReturns := fake.getStreamingDistributionConfigWithContextReturns
	fake.recordInvocation("GetStreamingDistributionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getStreamingDistributionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContextCallCount() int {
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContextCalls(stub func(context.Context, *cloudfront.GetStreamingDistributionConfigInput, ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error)) {
	fake.getStreamingDistributionConfigWithContextMutex.Lock()
	defer fake.getStreamingDistributionConfigWithContextMutex.Unlock()
	fake.GetStreamingDistributionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.GetStreamingDistributionConfigInput, []request.Option) {
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContextReturns(result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.getStreamingDistributionConfigWithContextMutex.Lock()
	defer fake.getStreamingDistributionConfigWithContextMutex.Unlock()
	fake.GetStreamingDistributionConfigWithContextStub = nil
	fake.getStreamingDistributionConfigWithContextReturns = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.getStreamingDistributionConfigWithContextMutex.Lock()
	defer fake.getStreamingDistributionConfigWithContextMutex.Unlock()
	fake.GetStreamingDistributionConfigWithContextStub = nil
	if fake.getStreamingDistributionConfigWithContextReturnsOnCall == nil {
		fake.getStreamingDistributionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionConfigOutput
			result2 error
		})
	}
	fake.getStreamingDistributionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionRequest(arg1 *cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput) {
	fake.getStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionRequestReturnsOnCall[len(fake.getStreamingDistributionRequestArgsForCall)]
	fake.getStreamingDistributionRequestArgsForCall = append(fake.getStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	stub := fake.GetStreamingDistributionRequestStub
	fakeReturns := fake.getStreamingDistributionRequestReturns
	fake.recordInvocation("GetStreamingDistributionRequest", []interface{}{arg1})
	fake.getStreamingDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionRequestCallCount() int {
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	return len(fake.getStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionRequestCalls(stub func(*cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput)) {
	fake.getStreamingDistributionRequestMutex.Lock()
	defer fake.getStreamingDistributionRequestMutex.Unlock()
	fake.GetStreamingDistributionRequestStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionRequestArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) GetStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.GetStreamingDistributionOutput) {
	fake.getStreamingDistributionRequestMutex.Lock()
	defer fake.getStreamingDistributionRequestMutex.Unlock()
	fake.GetStreamingDistributionRequestStub = nil
	fake.getStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetStreamingDistributionOutput) {
	fake.getStreamingDistributionRequestMutex.Lock()
	defer fake.getStreamingDistributionRequestMutex.Unlock()
	fake.GetStreamingDistributionRequestStub = nil
	if fake.getStreamingDistributionRequestReturnsOnCall == nil {
		fake.getStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetStreamingDistributionOutput
		})
	}
	fake.getStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContext(arg1 context.Context, arg2 *cloudfront.GetStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	fake.getStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionWithContextReturnsOnCall[len(fake.getStreamingDistributionWithContextArgsForCall)]
	fake.getStreamingDistributionWithContextArgsForCall = append(fake.getStreamingDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.GetStreamingDistributionWithContextStub
	fakeReturns := fake.getStreamingDistributionWithContextReturns
	fake.recordInvocation("GetStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getStreamingDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContextCallCount() int {
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.getStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContextCalls(stub func(context.Context, *cloudfront.GetStreamingDistributionInput, ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error)) {
	fake.getStreamingDistributionWithContextMutex.Lock()
	defer fake.getStreamingDistributionWithContextMutex.Unlock()
	fake.GetStreamingDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.GetStreamingDistributionInput, []request.Option) {
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	argsForCall := fake.getStreamingDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContextReturns(result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.getStreamingDistributionWithContextMutex.Lock()
	defer fake.getStreamingDistributionWithContextMutex.Unlock()
	fake.GetStreamingDistributionWithContextStub = nil
	fake.getStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) GetStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.getStreamingDistributionWithContextMutex.Lock()
	defer fake.getStreamingDistributionWithContextMutex.Unlock()
	fake.GetStreamingDistributionWithContextStub = nil
	if fake.getStreamingDistributionWithContextReturnsOnCall == nil {
		fake.getStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionOutput
			result2 error
		})
	}
	fake.getStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePolicies(arg1 *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	fake.listCachePoliciesMutex.Lock()
	ret, specificReturn := fake.listCachePoliciesReturnsOnCall[len(fake.listCachePoliciesArgsForCall)]
	fake.listCachePoliciesArgsForCall = append(fake.listCachePoliciesArgsForCall, struct {
		arg1 *cloudfront.ListCachePoliciesInput
	}{arg1})
	stub := fake.ListCachePoliciesStub
	fakeReturns := fake.listCachePoliciesReturns
	fake.recordInvocation("ListCachePolicies", []interface{}{arg1})
	fake.listCachePoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCachePoliciesCallCount() int {
	fake.listCachePoliciesMutex.RLock()
	defer fake.listCachePoliciesMutex.RUnlock()
	return len(fake.listCachePoliciesArgsForCall)
}

func (fake *FakeCloudfront) ListCachePoliciesCalls(stub func(*cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error)) {
	fake.listCachePoliciesMutex.Lock()
	defer fake.listCachePoliciesMutex.Unlock()
	fake.ListCachePoliciesStub = stub
}

func (fake *FakeCloudfront) ListCachePoliciesArgsForCall(i int) *cloudfront.ListCachePoliciesInput {
	fake.listCachePoliciesMutex.RLock()
	defer fake.listCachePoliciesMutex.RUnlock()
	argsForCall := fake.listCachePoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListCachePoliciesReturns(result1 *cloudfront.ListCachePoliciesOutput, result2 error) {
	fake.listCachePoliciesMutex.Lock()
	defer fake.listCachePoliciesMutex.Unlock()
	fake.ListCachePoliciesStub = nil
	fake.listCachePoliciesReturns = struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePoliciesReturnsOnCall(i int, result1 *cloudfront.ListCachePoliciesOutput, result2 error) {
	fake.listCachePoliciesMutex.Lock()
	defer fake.listCachePoliciesMutex.Unlock()
	fake.ListCachePoliciesStub = nil
	if fake.listCachePoliciesReturnsOnCall == nil {
		fake.listCachePoliciesReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCachePoliciesOutput
			result2 error
		})
	}
	fake.listCachePoliciesReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePoliciesRequest(arg1 *cloudfront.ListCachePoliciesInput) (*request.Request, *cloudfront.ListCachePoliciesOutput) {
	fake.listCachePoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listCachePoliciesRequestReturnsOnCall[len(fake.listCachePoliciesRequestArgsForCall)]
	fake.listCachePoliciesRequestArgsForCall = append(fake.listCachePoliciesRequestArgsForCall, struct {
		arg1 *cloudfront.ListCachePoliciesInput
	}{arg1})
	stub := fake.ListCachePoliciesRequestStub
	fakeReturns := fake.listCachePoliciesRequestReturns
	fake.recordInvocation("ListCachePoliciesRequest", []interface{}{arg1})
	fake.listCachePoliciesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCachePoliciesRequestCallCount() int {
	fake.listCachePoliciesRequestMutex.RLock()
	defer fake.listCachePoliciesRequestMutex.RUnlock()
	return len(fake.listCachePoliciesRequestArgsForCall)
}

func (fake *FakeCloudfront) ListCachePoliciesRequestCalls(stub func(*cloudfront.ListCachePoliciesInput) (*request.Request, *cloudfront.ListCachePoliciesOutput)) {
	fake.listCachePoliciesRequestMutex.Lock()
	defer fake.listCachePoliciesRequestMutex.Unlock()
	fake.ListCachePoliciesRequestStub = stub
}

func (fake *FakeCloudfront) ListCachePoliciesRequestArgsForCall(i int) *cloudfront.ListCachePoliciesInput {
	fake.listCachePoliciesRequestMutex.RLock()
	defer fake.listCachePoliciesRequestMutex.RUnlock()
	argsForCall := fake.listCachePoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListCachePoliciesRequestReturns(result1 *request.Request, result2 *cloudfront.ListCachePoliciesOutput) {
	fake.listCachePoliciesRequestMutex.Lock()
	defer fake.listCachePoliciesRequestMutex.Unlock()
	fake.ListCachePoliciesRequestStub = nil
	fake.listCachePoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListCachePoliciesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListCachePoliciesOutput) {
	fake.listCachePoliciesRequestMutex.Lock()
	defer fake.listCachePoliciesRequestMutex.Unlock()
	fake.ListCachePoliciesRequestStub = nil
	if fake.listCachePoliciesRequestReturnsOnCall == nil {
		fake.listCachePoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListCachePoliciesOutput
		})
	}
	fake.listCachePoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListCachePoliciesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePoliciesWithContext(arg1 context.Context, arg2 *cloudfront.ListCachePoliciesInput, arg3 ...request.Option) (*cloudfront.ListCachePoliciesOutput, error) {
	fake.listCachePoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listCachePoliciesWithContextReturnsOnCall[len(fake.listCachePoliciesWithContextArgsForCall)]
	fake.listCachePoliciesWithContextArgsForCall = append(fake.listCachePoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListCachePoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListCachePoliciesWithContextStub
	fakeReturns := fake.listCachePoliciesWithContextReturns
	fake.recordInvocation("ListCachePoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listCachePoliciesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCachePoliciesWithContextCallCount() int {
	fake.listCachePoliciesWithContextMutex.RLock()
	defer fake.listCachePoliciesWithContextMutex.RUnlock()
	return len(fake.listCachePoliciesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListCachePoliciesWithContextCalls(stub func(context.Context, *cloudfront.ListCachePoliciesInput, ...request.Option) (*cloudfront.ListCachePoliciesOutput, error)) {
	fake.listCachePoliciesWithContextMutex.Lock()
	defer fake.listCachePoliciesWithContextMutex.Unlock()
	fake.ListCachePoliciesWithContextStub = stub
}

func (fake *FakeCloudfront) ListCachePoliciesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListCachePoliciesInput, []request.Option) {
	fake.listCachePoliciesWithContextMutex.RLock()
	defer fake.listCachePoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listCachePoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListCachePoliciesWithContextReturns(result1 *cloudfront.ListCachePoliciesOutput, result2 error) {
	fake.listCachePoliciesWithContextMutex.Lock()
	defer fake.listCachePoliciesWithContextMutex.Unlock()
	fake.ListCachePoliciesWithContextStub = nil
	fake.listCachePoliciesWithContextReturns = struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCachePoliciesWithContextReturnsOnCall(i int, result1 *cloudfront.ListCachePoliciesOutput, result2 error) {
	fake.listCachePoliciesWithContextMutex.Lock()
	defer fake.listCachePoliciesWithContextMutex.Unlock()
	fake.ListCachePoliciesWithContextStub = nil
	if fake.listCachePoliciesWithContextReturnsOnCall == nil {
		fake.listCachePoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCachePoliciesOutput
			result2 error
		})
	}
	fake.listCachePoliciesWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCachePoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentities(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	fake.listCloudFrontOriginAccessIdentitiesMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}{arg1})
	stub := fake.ListCloudFrontOriginAccessIdentitiesStub
	fakeReturns := fake.listCloudFrontOriginAccessIdentitiesReturns
	fake.recordInvocation("ListCloudFrontOriginAccessIdentities", []interface{}{arg1})
	fake.listCloudFrontOriginAccessIdentitiesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesArgsForCall)
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesCalls(stub func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)) {
	fake.listCloudFrontOriginAccessIdentitiesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesStub = stub
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesArgsForCall(i int) *cloudfront.ListCloudFrontOriginAccessIdentitiesInput {
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	argsForCall := fake.listCloudFrontOriginAccessIdentitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesReturns(result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.listCloudFrontOriginAccessIdentitiesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesStub = nil
	fake.listCloudFrontOriginAccessIdentitiesReturns = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesReturnsOnCall(i int, result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.listCloudFrontOriginAccessIdentitiesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
			result2 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPages(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListCloudFrontOriginAccessIdentitiesPagesStub
	fakeReturns := fake.listCloudFrontOriginAccessIdentitiesPagesReturns
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesPages", []interface{}{arg1, arg2})
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall)
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesCalls(stub func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesStub = stub
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesArgsForCall(i int) (*cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	argsForCall := fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesReturns(result1 error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesStub = nil
	fake.listCloudFrontOriginAccessIdentitiesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesReturnsOnCall(i int, result1 error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg1 context.Context, arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub
	fakeReturns := fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturns
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContextCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContextCalls(stub func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, ...request.Option) error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub = stub
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, []request.Option) {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContextReturns(result1 error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub = nil
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequest(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}{arg1})
	stub := fake.ListCloudFrontOriginAccessIdentitiesRequestStub
	fakeReturns := fake.listCloudFrontOriginAccessIdentitiesRequestReturns
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesRequest", []interface{}{arg1})
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequestCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall)
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequestCalls(stub func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)) {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesRequestStub = stub
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequestArgsForCall(i int) *cloudfront.ListCloudFrontOriginAccessIdentitiesInput {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	argsForCall := fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequestReturns(result1 *request.Request, result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesRequestStub = nil
	fake.listCloudFrontOriginAccessIdentitiesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesRequestStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContext(arg1 context.Context, arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg3 ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListCloudFrontOriginAccessIdentitiesWithContextStub
	fakeReturns := fake.listCloudFrontOriginAccessIdentitiesWithContextReturns
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContextCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContextCalls(stub func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesWithContextStub = stub
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, []request.Option) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	argsForCall := fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContextReturns(result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesWithContextStub = nil
	fake.listCloudFrontOriginAccessIdentitiesWithContextReturns = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall(i int, result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Lock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Unlock()
	fake.ListCloudFrontOriginAccessIdentitiesWithContextStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
			result2 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributions(arg1 *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	fake.listDistributionsMutex.Lock()
	ret, specificReturn := fake.listDistributionsReturnsOnCall[len(fake.listDistributionsArgsForCall)]
	fake.listDistributionsArgsForCall = append(fake.listDistributionsArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
	}{arg1})
	stub := fake.ListDistributionsStub
	fakeReturns := fake.listDistributionsReturns
	fake.recordInvocation("ListDistributions", []interface{}{arg1})
	fake.listDistributionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsCallCount() int {
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	return len(fake.listDistributionsArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsCalls(stub func(*cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error)) {
	fake.listDistributionsMutex.Lock()
	defer fake.listDistributionsMutex.Unlock()
	fake.ListDistributionsStub = stub
}

func (fake *FakeCloudfront) ListDistributionsArgsForCall(i int) *cloudfront.ListDistributionsInput {
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	argsForCall := fake.listDistributionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsReturns(result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.listDistributionsMutex.Lock()
	defer fake.listDistributionsMutex.Unlock()
	fake.ListDistributionsStub = nil
	fake.listDistributionsReturns = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsReturnsOnCall(i int, result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.listDistributionsMutex.Lock()
	defer fake.listDistributionsMutex.Unlock()
	fake.ListDistributionsStub = nil
	if fake.listDistributionsReturnsOnCall == nil {
		fake.listDistributionsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsOutput
			result2 error
		})
	}
	fake.listDistributionsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyId(arg1 *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	fake.listDistributionsByCachePolicyIdMutex.Lock()
	ret, specificReturn := fake.listDistributionsByCachePolicyIdReturnsOnCall[len(fake.listDistributionsByCachePolicyIdArgsForCall)]
	fake.listDistributionsByCachePolicyIdArgsForCall = append(fake.listDistributionsByCachePolicyIdArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByCachePolicyIdInput
	}{arg1})
	stub := fake.ListDistributionsByCachePolicyIdStub
	fakeReturns := fake.listDistributionsByCachePolicyIdReturns
	fake.recordInvocation("ListDistributionsByCachePolicyId", []interface{}{arg1})
	fake.listDistributionsByCachePolicyIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdCallCount() int {
	fake.listDistributionsByCachePolicyIdMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdMutex.RUnlock()
	return len(fake.listDistributionsByCachePolicyIdArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdCalls(stub func(*cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)) {
	fake.listDistributionsByCachePolicyIdMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdArgsForCall(i int) *cloudfront.ListDistributionsByCachePolicyIdInput {
	fake.listDistributionsByCachePolicyIdMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdMutex.RUnlock()
	argsForCall := fake.listDistributionsByCachePolicyIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdReturns(result1 *cloudfront.ListDistributionsByCachePolicyIdOutput, result2 error) {
	fake.listDistributionsByCachePolicyIdMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdStub = nil
	fake.listDistributionsByCachePolicyIdReturns = struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByCachePolicyIdOutput, result2 error) {
	fake.listDistributionsByCachePolicyIdMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdStub = nil
	if fake.listDistributionsByCachePolicyIdReturnsOnCall == nil {
		fake.listDistributionsByCachePolicyIdReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
			result2 error
		})
	}
	fake.listDistributionsByCachePolicyIdReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequest(arg1 *cloudfront.ListDistributionsByCachePolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByCachePolicyIdOutput) {
	fake.listDistributionsByCachePolicyIdRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByCachePolicyIdRequestReturnsOnCall[len(fake.listDistributionsByCachePolicyIdRequestArgsForCall)]
	fake.listDistributionsByCachePolicyIdRequestArgsForCall = append(fake.listDistributionsByCachePolicyIdRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByCachePolicyIdInput
	}{arg1})
	stub := fake.ListDistributionsByCachePolicyIdRequestStub
	fakeReturns := fake.listDistributionsByCachePolicyIdRequestReturns
	fake.recordInvocation("ListDistributionsByCachePolicyIdRequest", []interface{}{arg1})
	fake.listDistributionsByCachePolicyIdRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequestCallCount() int {
	fake.listDistributionsByCachePolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.RUnlock()
	return len(fake.listDistributionsByCachePolicyIdRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequestCalls(stub func(*cloudfront.ListDistributionsByCachePolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByCachePolicyIdOutput)) {
	fake.listDistributionsByCachePolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequestArgsForCall(i int) *cloudfront.ListDistributionsByCachePolicyIdInput {
	fake.listDistributionsByCachePolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsByCachePolicyIdRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByCachePolicyIdOutput) {
	fake.listDistributionsByCachePolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdRequestStub = nil
	fake.listDistributionsByCachePolicyIdRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByCachePolicyIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByCachePolicyIdOutput) {
	fake.listDistributionsByCachePolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdRequestStub = nil
	if fake.listDistributionsByCachePolicyIdRequestReturnsOnCall == nil {
		fake.listDistributionsByCachePolicyIdRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByCachePolicyIdOutput
		})
	}
	fake.listDistributionsByCachePolicyIdRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByCachePolicyIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsByCachePolicyIdInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	fake.listDistributionsByCachePolicyIdWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByCachePolicyIdWithContextReturnsOnCall[len(fake.listDistributionsByCachePolicyIdWithContextArgsForCall)]
	fake.listDistributionsByCachePolicyIdWithContextArgsForCall = append(fake.listDistributionsByCachePolicyIdWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByCachePolicyIdInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsByCachePolicyIdWithContextStub
	fakeReturns := fake.listDistributionsByCachePolicyIdWithContextReturns
	fake.recordInvocation("ListDistributionsByCachePolicyIdWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByCachePolicyIdWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContextCallCount() int {
	fake.listDistributionsByCachePolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.RUnlock()
	return len(fake.listDistributionsByCachePolicyIdWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)) {
	fake.listDistributionsByCachePolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, []request.Option) {
	fake.listDistributionsByCachePolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsByCachePolicyIdWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContextReturns(result1 *cloudfront.ListDistributionsByCachePolicyIdOutput, result2 error) {
	fake.listDistributionsByCachePolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdWithContextStub = nil
	fake.listDistributionsByCachePolicyIdWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByCachePolicyIdWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByCachePolicyIdOutput, result2 error) {
	fake.listDistributionsByCachePolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByCachePolicyIdWithContextStub = nil
	if fake.listDistributionsByCachePolicyIdWithContextReturnsOnCall == nil {
		fake.listDistributionsByCachePolicyIdWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
			result2 error
		})
	}
	fake.listDistributionsByCachePolicyIdWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByCachePolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroup(arg1 *cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	fake.listDistributionsByKeyGroupMutex.Lock()
	ret, specificReturn := fake.listDistributionsByKeyGroupReturnsOnCall[len(fake.listDistributionsByKeyGroupArgsForCall)]
	fake.listDistributionsByKeyGroupArgsForCall = append(fake.listDistributionsByKeyGroupArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByKeyGroupInput
	}{arg1})
	stub := fake.ListDistributionsByKeyGroupStub
	fakeReturns := fake.listDistributionsByKeyGroupReturns
	fake.recordInvocation("ListDistributionsByKeyGroup", []interface{}{arg1})
	fake.listDistributionsByKeyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupCallCount() int {
	fake.listDistributionsByKeyGroupMutex.RLock()
	defer fake.listDistributionsByKeyGroupMutex.RUnlock()
	return len(fake.listDistributionsByKeyGroupArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupCalls(stub func(*cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error)) {
	fake.listDistributionsByKeyGroupMutex.Lock()
	defer fake.listDistributionsByKeyGroupMutex.Unlock()
	fake.ListDistributionsByKeyGroupStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupArgsForCall(i int) *cloudfront.ListDistributionsByKeyGroupInput {
	fake.listDistributionsByKeyGroupMutex.RLock()
	defer fake.listDistributionsByKeyGroupMutex.RUnlock()
	argsForCall := fake.listDistributionsByKeyGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupReturns(result1 *cloudfront.ListDistributionsByKeyGroupOutput, result2 error) {
	fake.listDistributionsByKeyGroupMutex.Lock()
	defer fake.listDistributionsByKeyGroupMutex.Unlock()
	fake.ListDistributionsByKeyGroupStub = nil
	fake.listDistributionsByKeyGroupReturns = struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByKeyGroupOutput, result2 error) {
	fake.listDistributionsByKeyGroupMutex.Lock()
	defer fake.listDistributionsByKeyGroupMutex.Unlock()
	fake.ListDistributionsByKeyGroupStub = nil
	if fake.listDistributionsByKeyGroupReturnsOnCall == nil {
		fake.listDistributionsByKeyGroupReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByKeyGroupOutput
			result2 error
		})
	}
	fake.listDistributionsByKeyGroupReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequest(arg1 *cloudfront.ListDistributionsByKeyGroupInput) (*request.Request, *cloudfront.ListDistributionsByKeyGroupOutput) {
	fake.listDistributionsByKeyGroupRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByKeyGroupRequestReturnsOnCall[len(fake.listDistributionsByKeyGroupRequestArgsForCall)]
	fake.listDistributionsByKeyGroupRequestArgsForCall = append(fake.listDistributionsByKeyGroupRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByKeyGroupInput
	}{arg1})
	stub := fake.ListDistributionsByKeyGroupRequestStub
	fakeReturns := fake.listDistributionsByKeyGroupRequestReturns
	fake.recordInvocation("ListDistributionsByKeyGroupRequest", []interface{}{arg1})
	fake.listDistributionsByKeyGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequestCallCount() int {
	fake.listDistributionsByKeyGroupRequestMutex.RLock()
	defer fake.listDistributionsByKeyGroupRequestMutex.RUnlock()
	return len(fake.listDistributionsByKeyGroupRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequestCalls(stub func(*cloudfront.ListDistributionsByKeyGroupInput) (*request.Request, *cloudfront.ListDistributionsByKeyGroupOutput)) {
	fake.listDistributionsByKeyGroupRequestMutex.Lock()
	defer fake.listDistributionsByKeyGroupRequestMutex.Unlock()
	fake.ListDistributionsByKeyGroupRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequestArgsForCall(i int) *cloudfront.ListDistributionsByKeyGroupInput {
	fake.listDistributionsByKeyGroupRequestMutex.RLock()
	defer fake.listDistributionsByKeyGroupRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsByKeyGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByKeyGroupOutput) {
	fake.listDistributionsByKeyGroupRequestMutex.Lock()
	defer fake.listDistributionsByKeyGroupRequestMutex.Unlock()
	fake.ListDistributionsByKeyGroupRequestStub = nil
	fake.listDistributionsByKeyGroupRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByKeyGroupOutput) {
	fake.listDistributionsByKeyGroupRequestMutex.Lock()
	defer fake.listDistributionsByKeyGroupRequestMutex.Unlock()
	fake.ListDistributionsByKeyGroupRequestStub = nil
	if fake.listDistributionsByKeyGroupRequestReturnsOnCall == nil {
		fake.listDistributionsByKeyGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByKeyGroupOutput
		})
	}
	fake.listDistributionsByKeyGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsByKeyGroupInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	fake.listDistributionsByKeyGroupWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByKeyGroupWithContextReturnsOnCall[len(fake.listDistributionsByKeyGroupWithContextArgsForCall)]
	fake.listDistributionsByKeyGroupWithContextArgsForCall = append(fake.listDistributionsByKeyGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByKeyGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsByKeyGroupWithContextStub
	fakeReturns := fake.listDistributionsByKeyGroupWithContextReturns
	fake.recordInvocation("ListDistributionsByKeyGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByKeyGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContextCallCount() int {
	fake.listDistributionsByKeyGroupWithContextMutex.RLock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.RUnlock()
	return len(fake.listDistributionsByKeyGroupWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsByKeyGroupInput, ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error)) {
	fake.listDistributionsByKeyGroupWithContextMutex.Lock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.Unlock()
	fake.ListDistributionsByKeyGroupWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsByKeyGroupInput, []request.Option) {
	fake.listDistributionsByKeyGroupWithContextMutex.RLock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsByKeyGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContextReturns(result1 *cloudfront.ListDistributionsByKeyGroupOutput, result2 error) {
	fake.listDistributionsByKeyGroupWithContextMutex.Lock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.Unlock()
	fake.ListDistributionsByKeyGroupWithContextStub = nil
	fake.listDistributionsByKeyGroupWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByKeyGroupWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByKeyGroupOutput, result2 error) {
	fake.listDistributionsByKeyGroupWithContextMutex.Lock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.Unlock()
	fake.ListDistributionsByKeyGroupWithContextStub = nil
	if fake.listDistributionsByKeyGroupWithContextReturnsOnCall == nil {
		fake.listDistributionsByKeyGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByKeyGroupOutput
			result2 error
		})
	}
	fake.listDistributionsByKeyGroupWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyId(arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	fake.listDistributionsByOriginRequestPolicyIdMutex.Lock()
	ret, specificReturn := fake.listDistributionsByOriginRequestPolicyIdReturnsOnCall[len(fake.listDistributionsByOriginRequestPolicyIdArgsForCall)]
	fake.listDistributionsByOriginRequestPolicyIdArgsForCall = append(fake.listDistributionsByOriginRequestPolicyIdArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
	}{arg1})
	stub := fake.ListDistributionsByOriginRequestPolicyIdStub
	fakeReturns := fake.listDistributionsByOriginRequestPolicyIdReturns
	fake.recordInvocation("ListDistributionsByOriginRequestPolicyId", []interface{}{arg1})
	fake.listDistributionsByOriginRequestPolicyIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdCallCount() int {
	fake.listDistributionsByOriginRequestPolicyIdMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.RUnlock()
	return len(fake.listDistributionsByOriginRequestPolicyIdArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdCalls(stub func(*cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)) {
	fake.listDistributionsByOriginRequestPolicyIdMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdArgsForCall(i int) *cloudfront.ListDistributionsByOriginRequestPolicyIdInput {
	fake.listDistributionsByOriginRequestPolicyIdMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.RUnlock()
	argsForCall := fake.listDistributionsByOriginRequestPolicyIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdReturns(result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, result2 error) {
	fake.listDistributionsByOriginRequestPolicyIdMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdStub = nil
	fake.listDistributionsByOriginRequestPolicyIdReturns = struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, result2 error) {
	fake.listDistributionsByOriginRequestPolicyIdMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdStub = nil
	if fake.listDistributionsByOriginRequestPolicyIdReturnsOnCall == nil {
		fake.listDistributionsByOriginRequestPolicyIdReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
			result2 error
		})
	}
	fake.listDistributionsByOriginRequestPolicyIdReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequest(arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput) {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByOriginRequestPolicyIdRequestReturnsOnCall[len(fake.listDistributionsByOriginRequestPolicyIdRequestArgsForCall)]
	fake.listDistributionsByOriginRequestPolicyIdRequestArgsForCall = append(fake.listDistributionsByOriginRequestPolicyIdRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
	}{arg1})
	stub := fake.ListDistributionsByOriginRequestPolicyIdRequestStub
	fakeReturns := fake.listDistributionsByOriginRequestPolicyIdRequestReturns
	fake.recordInvocation("ListDistributionsByOriginRequestPolicyIdRequest", []interface{}{arg1})
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequestCallCount() int {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RUnlock()
	return len(fake.listDistributionsByOriginRequestPolicyIdRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequestCalls(stub func(*cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)) {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequestArgsForCall(i int) *cloudfront.ListDistributionsByOriginRequestPolicyIdInput {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsByOriginRequestPolicyIdRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput) {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdRequestStub = nil
	fake.listDistributionsByOriginRequestPolicyIdRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput) {
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdRequestStub = nil
	if fake.listDistributionsByOriginRequestPolicyIdRequestReturnsOnCall == nil {
		fake.listDistributionsByOriginRequestPolicyIdRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		})
	}
	fake.listDistributionsByOriginRequestPolicyIdRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall[len(fake.listDistributionsByOriginRequestPolicyIdWithContextArgsForCall)]
	fake.listDistributionsByOriginRequestPolicyIdWithContextArgsForCall = append(fake.listDistributionsByOriginRequestPolicyIdWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsByOriginRequestPolicyIdWithContextStub
	fakeReturns := fake.listDistributionsByOriginRequestPolicyIdWithContextReturns
	fake.recordInvocation("ListDistributionsByOriginRequestPolicyIdWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContextCallCount() int {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RUnlock()
	return len(fake.listDistributionsByOriginRequestPolicyIdWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)) {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, []request.Option) {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsByOriginRequestPolicyIdWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContextReturns(result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, result2 error) {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdWithContextStub = nil
	fake.listDistributionsByOriginRequestPolicyIdWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, result2 error) {
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Lock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.Unlock()
	fake.ListDistributionsByOriginRequestPolicyIdWithContextStub = nil
	if fake.listDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall == nil {
		fake.listDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
			result2 error
		})
	}
	fake.listDistributionsByOriginRequestPolicyIdWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfig(arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	fake.listDistributionsByRealtimeLogConfigMutex.Lock()
	ret, specificReturn := fake.listDistributionsByRealtimeLogConfigReturnsOnCall[len(fake.listDistributionsByRealtimeLogConfigArgsForCall)]
	fake.listDistributionsByRealtimeLogConfigArgsForCall = append(fake.listDistributionsByRealtimeLogConfigArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput
	}{arg1})
	stub := fake.ListDistributionsByRealtimeLogConfigStub
	fakeReturns := fake.listDistributionsByRealtimeLogConfigReturns
	fake.recordInvocation("ListDistributionsByRealtimeLogConfig", []interface{}{arg1})
	fake.listDistributionsByRealtimeLogConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigCallCount() int {
	fake.listDistributionsByRealtimeLogConfigMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.RUnlock()
	return len(fake.listDistributionsByRealtimeLogConfigArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigCalls(stub func(*cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)) {
	fake.listDistributionsByRealtimeLogConfigMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigArgsForCall(i int) *cloudfront.ListDistributionsByRealtimeLogConfigInput {
	fake.listDistributionsByRealtimeLogConfigMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.RUnlock()
	argsForCall := fake.listDistributionsByRealtimeLogConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigReturns(result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput, result2 error) {
	fake.listDistributionsByRealtimeLogConfigMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigStub = nil
	fake.listDistributionsByRealtimeLogConfigReturns = struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput, result2 error) {
	fake.listDistributionsByRealtimeLogConfigMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigStub = nil
	if fake.listDistributionsByRealtimeLogConfigReturnsOnCall == nil {
		fake.listDistributionsByRealtimeLogConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.listDistributionsByRealtimeLogConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequest(arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*request.Request, *cloudfront.ListDistributionsByRealtimeLogConfigOutput) {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByRealtimeLogConfigRequestReturnsOnCall[len(fake.listDistributionsByRealtimeLogConfigRequestArgsForCall)]
	fake.listDistributionsByRealtimeLogConfigRequestArgsForCall = append(fake.listDistributionsByRealtimeLogConfigRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput
	}{arg1})
	stub := fake.ListDistributionsByRealtimeLogConfigRequestStub
	fakeReturns := fake.listDistributionsByRealtimeLogConfigRequestReturns
	fake.recordInvocation("ListDistributionsByRealtimeLogConfigRequest", []interface{}{arg1})
	fake.listDistributionsByRealtimeLogConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequestCallCount() int {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.RUnlock()
	return len(fake.listDistributionsByRealtimeLogConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequestCalls(stub func(*cloudfront.ListDistributionsByRealtimeLogConfigInput) (*request.Request, *cloudfront.ListDistributionsByRealtimeLogConfigOutput)) {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequestArgsForCall(i int) *cloudfront.ListDistributionsByRealtimeLogConfigInput {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsByRealtimeLogConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput) {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigRequestStub = nil
	fake.listDistributionsByRealtimeLogConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput) {
	fake.listDistributionsByRealtimeLogConfigRequestMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigRequestStub = nil
	if fake.listDistributionsByRealtimeLogConfigRequestReturnsOnCall == nil {
		fake.listDistributionsByRealtimeLogConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		})
	}
	fake.listDistributionsByRealtimeLogConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsByRealtimeLogConfigInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByRealtimeLogConfigWithContextReturnsOnCall[len(fake.listDistributionsByRealtimeLogConfigWithContextArgsForCall)]
	fake.listDistributionsByRealtimeLogConfigWithContextArgsForCall = append(fake.listDistributionsByRealtimeLogConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByRealtimeLogConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsByRealtimeLogConfigWithContextStub
	fakeReturns := fake.listDistributionsByRealtimeLogConfigWithContextReturns
	fake.recordInvocation("ListDistributionsByRealtimeLogConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContextCallCount() int {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.RUnlock()
	return len(fake.listDistributionsByRealtimeLogConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)) {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, []request.Option) {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsByRealtimeLogConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContextReturns(result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput, result2 error) {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigWithContextStub = nil
	fake.listDistributionsByRealtimeLogConfigWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByRealtimeLogConfigWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput, result2 error) {
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.Lock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.Unlock()
	fake.ListDistributionsByRealtimeLogConfigWithContextStub = nil
	if fake.listDistributionsByRealtimeLogConfigWithContextReturnsOnCall == nil {
		fake.listDistributionsByRealtimeLogConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.listDistributionsByRealtimeLogConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLId(arg1 *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	fake.listDistributionsByWebACLIdMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdReturnsOnCall[len(fake.listDistributionsByWebACLIdArgsForCall)]
	fake.listDistributionsByWebACLIdArgsForCall = append(fake.listDistributionsByWebACLIdArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}{arg1})
	stub := fake.ListDistributionsByWebACLIdStub
	fakeReturns := fake.listDistributionsByWebACLIdReturns
	fake.recordInvocation("ListDistributionsByWebACLId", []interface{}{arg1})
	fake.listDistributionsByWebACLIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdCallCount() int {
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdCalls(stub func(*cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error)) {
	fake.listDistributionsByWebACLIdMutex.Lock()
	defer fake.listDistributionsByWebACLIdMutex.Unlock()
	fake.ListDistributionsByWebACLIdStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdArgsForCall(i int) *cloudfront.ListDistributionsByWebACLIdInput {
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	argsForCall := fake.listDistributionsByWebACLIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdReturns(result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.listDistributionsByWebACLIdMutex.Lock()
	defer fake.listDistributionsByWebACLIdMutex.Unlock()
	fake.ListDistributionsByWebACLIdStub = nil
	fake.listDistributionsByWebACLIdReturns = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.listDistributionsByWebACLIdMutex.Lock()
	defer fake.listDistributionsByWebACLIdMutex.Unlock()
	fake.ListDistributionsByWebACLIdStub = nil
	if fake.listDistributionsByWebACLIdReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByWebACLIdOutput
			result2 error
		})
	}
	fake.listDistributionsByWebACLIdReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequest(arg1 *cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.listDistributionsByWebACLIdRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdRequestReturnsOnCall[len(fake.listDistributionsByWebACLIdRequestArgsForCall)]
	fake.listDistributionsByWebACLIdRequestArgsForCall = append(fake.listDistributionsByWebACLIdRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}{arg1})
	stub := fake.ListDistributionsByWebACLIdRequestStub
	fakeReturns := fake.listDistributionsByWebACLIdRequestReturns
	fake.recordInvocation("ListDistributionsByWebACLIdRequest", []interface{}{arg1})
	fake.listDistributionsByWebACLIdRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequestCallCount() int {
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequestCalls(stub func(*cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput)) {
	fake.listDistributionsByWebACLIdRequestMutex.Lock()
	defer fake.listDistributionsByWebACLIdRequestMutex.Unlock()
	fake.ListDistributionsByWebACLIdRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequestArgsForCall(i int) *cloudfront.ListDistributionsByWebACLIdInput {
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsByWebACLIdRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.listDistributionsByWebACLIdRequestMutex.Lock()
	defer fake.listDistributionsByWebACLIdRequestMutex.Unlock()
	fake.ListDistributionsByWebACLIdRequestStub = nil
	fake.listDistributionsByWebACLIdRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.listDistributionsByWebACLIdRequestMutex.Lock()
	defer fake.listDistributionsByWebACLIdRequestMutex.Unlock()
	fake.ListDistributionsByWebACLIdRequestStub = nil
	if fake.listDistributionsByWebACLIdRequestReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByWebACLIdOutput
		})
	}
	fake.listDistributionsByWebACLIdRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsByWebACLIdInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	fake.listDistributionsByWebACLIdWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdWithContextReturnsOnCall[len(fake.listDistributionsByWebACLIdWithContextArgsForCall)]
	fake.listDistributionsByWebACLIdWithContextArgsForCall = append(fake.listDistributionsByWebACLIdWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsByWebACLIdInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsByWebACLIdWithContextStub
	fakeReturns := fake.listDistributionsByWebACLIdWithContextReturns
	fake.recordInvocation("ListDistributionsByWebACLIdWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByWebACLIdWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContextCallCount() int {
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error)) {
	fake.listDistributionsByWebACLIdWithContextMutex.Lock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.Unlock()
	fake.ListDistributionsByWebACLIdWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsByWebACLIdInput, []request.Option) {
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsByWebACLIdWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContextReturns(result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.listDistributionsByWebACLIdWithContextMutex.Lock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.Unlock()
	fake.ListDistributionsByWebACLIdWithContextStub = nil
	fake.listDistributionsByWebACLIdWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsByWebACLIdWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.listDistributionsByWebACLIdWithContextMutex.Lock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.Unlock()
	fake.ListDistributionsByWebACLIdWithContextStub = nil
	if fake.listDistributionsByWebACLIdWithContextReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByWebACLIdOutput
			result2 error
		})
	}
	fake.listDistributionsByWebACLIdWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsPages(arg1 *cloudfront.ListDistributionsInput, arg2 func(*cloudfront.ListDistributionsOutput, bool) bool) error {
	fake.listDistributionsPagesMutex.Lock()
	ret, specificReturn := fake.listDistributionsPagesReturnsOnCall[len(fake.listDistributionsPagesArgsForCall)]
	fake.listDistributionsPagesArgsForCall = append(fake.listDistributionsPagesArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
		arg2 func(*cloudfront.ListDistributionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListDistributionsPagesStub
	fakeReturns := fake.listDistributionsPagesReturns
	fake.recordInvocation("ListDistributionsPages", []interface{}{arg1, arg2})
	fake.listDistributionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListDistributionsPagesCallCount() int {
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	return len(fake.listDistributionsPagesArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsPagesCalls(stub func(*cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool) error) {
	fake.listDistributionsPagesMutex.Lock()
	defer fake.listDistributionsPagesMutex.Unlock()
	fake.ListDistributionsPagesStub = stub
}

func (fake *FakeCloudfront) ListDistributionsPagesArgsForCall(i int) (*cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool) {
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	argsForCall := fake.listDistributionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudfront) ListDistributionsPagesReturns(result1 error) {
	fake.listDistributionsPagesMutex.Lock()
	defer fake.listDistributionsPagesMutex.Unlock()
	fake.ListDistributionsPagesStub = nil
	fake.listDistributionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListDistributionsPagesReturnsOnCall(i int, result1 error) {
	fake.listDistributionsPagesMutex.Lock()
	defer fake.listDistributionsPagesMutex.Unlock()
	fake.ListDistributionsPagesStub = nil
	if fake.listDistributionsPagesReturnsOnCall == nil {
		fake.listDistributionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDistributionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsInput, arg3 func(*cloudfront.ListDistributionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listDistributionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsPagesWithContextReturnsOnCall[len(fake.listDistributionsPagesWithContextArgsForCall)]
	fake.listDistributionsPagesWithContextArgsForCall = append(fake.listDistributionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 func(*cloudfront.ListDistributionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListDistributionsPagesWithContextStub
	fakeReturns := fake.listDistributionsPagesWithContextReturns
	fake.recordInvocation("ListDistributionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listDistributionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContextCallCount() int {
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	return len(fake.listDistributionsPagesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool, ...request.Option) error) {
	fake.listDistributionsPagesWithContextMutex.Lock()
	defer fake.listDistributionsPagesWithContextMutex.Unlock()
	fake.ListDistributionsPagesWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool, []request.Option) {
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContextReturns(result1 error) {
	fake.listDistributionsPagesWithContextMutex.Lock()
	defer fake.listDistributionsPagesWithContextMutex.Unlock()
	fake.ListDistributionsPagesWithContextStub = nil
	fake.listDistributionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListDistributionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listDistributionsPagesWithContextMutex.Lock()
	defer fake.listDistributionsPagesWithContextMutex.Unlock()
	fake.ListDistributionsPagesWithContextStub = nil
	if fake.listDistributionsPagesWithContextReturnsOnCall == nil {
		fake.listDistributionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDistributionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListDistributionsRequest(arg1 *cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput) {
	fake.listDistributionsRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsRequestReturnsOnCall[len(fake.listDistributionsRequestArgsForCall)]
	fake.listDistributionsRequestArgsForCall = append(fake.listDistributionsRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
	}{arg1})
	stub := fake.ListDistributionsRequestStub
	fakeReturns := fake.listDistributionsRequestReturns
	fake.recordInvocation("ListDistributionsRequest", []interface{}{arg1})
	fake.listDistributionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsRequestCallCount() int {
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	return len(fake.listDistributionsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsRequestCalls(stub func(*cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput)) {
	fake.listDistributionsRequestMutex.Lock()
	defer fake.listDistributionsRequestMutex.Unlock()
	fake.ListDistributionsRequestStub = stub
}

func (fake *FakeCloudfront) ListDistributionsRequestArgsForCall(i int) *cloudfront.ListDistributionsInput {
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	argsForCall := fake.listDistributionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListDistributionsRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsOutput) {
	fake.listDistributionsRequestMutex.Lock()
	defer fake.listDistributionsRequestMutex.Unlock()
	fake.ListDistributionsRequestStub = nil
	fake.listDistributionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsOutput) {
	fake.listDistributionsRequestMutex.Lock()
	defer fake.listDistributionsRequestMutex.Unlock()
	fake.ListDistributionsRequestStub = nil
	if fake.listDistributionsRequestReturnsOnCall == nil {
		fake.listDistributionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsOutput
		})
	}
	fake.listDistributionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsWithContext(arg1 context.Context, arg2 *cloudfront.ListDistributionsInput, arg3 ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	fake.listDistributionsWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsWithContextReturnsOnCall[len(fake.listDistributionsWithContextArgsForCall)]
	fake.listDistributionsWithContextArgsForCall = append(fake.listDistributionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListDistributionsWithContextStub
	fakeReturns := fake.listDistributionsWithContextReturns
	fake.recordInvocation("ListDistributionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListDistributionsWithContextCallCount() int {
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	return len(fake.listDistributionsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListDistributionsWithContextCalls(stub func(context.Context, *cloudfront.ListDistributionsInput, ...request.Option) (*cloudfront.ListDistributionsOutput, error)) {
	fake.listDistributionsWithContextMutex.Lock()
	defer fake.listDistributionsWithContextMutex.Unlock()
	fake.ListDistributionsWithContextStub = stub
}

func (fake *FakeCloudfront) ListDistributionsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListDistributionsInput, []request.Option) {
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	argsForCall := fake.listDistributionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListDistributionsWithContextReturns(result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.listDistributionsWithContextMutex.Lock()
	defer fake.listDistributionsWithContextMutex.Unlock()
	fake.ListDistributionsWithContextStub = nil
	fake.listDistributionsWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListDistributionsWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.listDistributionsWithContextMutex.Lock()
	defer fake.listDistributionsWithContextMutex.Unlock()
	fake.ListDistributionsWithContextStub = nil
	if fake.listDistributionsWithContextReturnsOnCall == nil {
		fake.listDistributionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsOutput
			result2 error
		})
	}
	fake.listDistributionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigs(arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	fake.listFieldLevelEncryptionConfigsMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionConfigsReturnsOnCall[len(fake.listFieldLevelEncryptionConfigsArgsForCall)]
	fake.listFieldLevelEncryptionConfigsArgsForCall = append(fake.listFieldLevelEncryptionConfigsArgsForCall, struct {
		arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput
	}{arg1})
	stub := fake.ListFieldLevelEncryptionConfigsStub
	fakeReturns := fake.listFieldLevelEncryptionConfigsReturns
	fake.recordInvocation("ListFieldLevelEncryptionConfigs", []interface{}{arg1})
	fake.listFieldLevelEncryptionConfigsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsCallCount() int {
	fake.listFieldLevelEncryptionConfigsMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionConfigsArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsCalls(stub func(*cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)) {
	fake.listFieldLevelEncryptionConfigsMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsArgsForCall(i int) *cloudfront.ListFieldLevelEncryptionConfigsInput {
	fake.listFieldLevelEncryptionConfigsMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionConfigsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsReturns(result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput, result2 error) {
	fake.listFieldLevelEncryptionConfigsMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsStub = nil
	fake.listFieldLevelEncryptionConfigsReturns = struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsReturnsOnCall(i int, result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput, result2 error) {
	fake.listFieldLevelEncryptionConfigsMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsStub = nil
	if fake.listFieldLevelEncryptionConfigsReturnsOnCall == nil {
		fake.listFieldLevelEncryptionConfigsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
			result2 error
		})
	}
	fake.listFieldLevelEncryptionConfigsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequest(arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	fake.listFieldLevelEncryptionConfigsRequestMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionConfigsRequestReturnsOnCall[len(fake.listFieldLevelEncryptionConfigsRequestArgsForCall)]
	fake.listFieldLevelEncryptionConfigsRequestArgsForCall = append(fake.listFieldLevelEncryptionConfigsRequestArgsForCall, struct {
		arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput
	}{arg1})
	stub := fake.ListFieldLevelEncryptionConfigsRequestStub
	fakeReturns := fake.listFieldLevelEncryptionConfigsRequestReturns
	fake.recordInvocation("ListFieldLevelEncryptionConfigsRequest", []interface{}{arg1})
	fake.listFieldLevelEncryptionConfigsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequestCallCount() int {
	fake.listFieldLevelEncryptionConfigsRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionConfigsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequestCalls(stub func(*cloudfront.ListFieldLevelEncryptionConfigsInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionConfigsOutput)) {
	fake.listFieldLevelEncryptionConfigsRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsRequestStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequestArgsForCall(i int) *cloudfront.ListFieldLevelEncryptionConfigsInput {
	fake.listFieldLevelEncryptionConfigsRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionConfigsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequestReturns(result1 *request.Request, result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	fake.listFieldLevelEncryptionConfigsRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsRequestStub = nil
	fake.listFieldLevelEncryptionConfigsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	fake.listFieldLevelEncryptionConfigsRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsRequestStub = nil
	if fake.listFieldLevelEncryptionConfigsRequestReturnsOnCall == nil {
		fake.listFieldLevelEncryptionConfigsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		})
	}
	fake.listFieldLevelEncryptionConfigsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionConfigsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContext(arg1 context.Context, arg2 *cloudfront.ListFieldLevelEncryptionConfigsInput, arg3 ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionConfigsWithContextReturnsOnCall[len(fake.listFieldLevelEncryptionConfigsWithContextArgsForCall)]
	fake.listFieldLevelEncryptionConfigsWithContextArgsForCall = append(fake.listFieldLevelEncryptionConfigsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListFieldLevelEncryptionConfigsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListFieldLevelEncryptionConfigsWithContextStub
	fakeReturns := fake.listFieldLevelEncryptionConfigsWithContextReturns
	fake.recordInvocation("ListFieldLevelEncryptionConfigsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listFieldLevelEncryptionConfigsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContextCallCount() int {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionConfigsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContextCalls(stub func(context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)) {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsWithContextStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, []request.Option) {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionConfigsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContextReturns(result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput, result2 error) {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsWithContextStub = nil
	fake.listFieldLevelEncryptionConfigsWithContextReturns = struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionConfigsWithContextReturnsOnCall(i int, result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput, result2 error) {
	fake.listFieldLevelEncryptionConfigsWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionConfigsWithContextStub = nil
	if fake.listFieldLevelEncryptionConfigsWithContextReturnsOnCall == nil {
		fake.listFieldLevelEncryptionConfigsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
			result2 error
		})
	}
	fake.listFieldLevelEncryptionConfigsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFieldLevelEncryptionConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfiles(arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	fake.listFieldLevelEncryptionProfilesMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionProfilesReturnsOnCall[len(fake.listFieldLevelEncryptionProfilesArgsForCall)]
	fake.listFieldLevelEncryptionProfilesArgsForCall = append(fake.listFieldLevelEncryptionProfilesArgsForCall, struct {
		arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput
	}{arg1})
	stub := fake.ListFieldLevelEncryptionProfilesStub
	fakeReturns := fake.listFieldLevelEncryptionProfilesReturns
	fake.recordInvocation("ListFieldLevelEncryptionProfiles", []interface{}{arg1})
	fake.listFieldLevelEncryptionProfilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesCallCount() int {
	fake.listFieldLevelEncryptionProfilesMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionProfilesArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesCalls(stub func(*cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)) {
	fake.listFieldLevelEncryptionProfilesMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesArgsForCall(i int) *cloudfront.ListFieldLevelEncryptionProfilesInput {
	fake.listFieldLevelEncryptionProfilesMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionProfilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesReturns(result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput, result2 error) {
	fake.listFieldLevelEncryptionProfilesMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesStub = nil
	fake.listFieldLevelEncryptionProfilesReturns = struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesReturnsOnCall(i int, result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput, result2 error) {
	fake.listFieldLevelEncryptionProfilesMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesStub = nil
	if fake.listFieldLevelEncryptionProfilesReturnsOnCall == nil {
		fake.listFieldLevelEncryptionProfilesReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
			result2 error
		})
	}
	fake.listFieldLevelEncryptionProfilesReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequest(arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	fake.listFieldLevelEncryptionProfilesRequestMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionProfilesRequestReturnsOnCall[len(fake.listFieldLevelEncryptionProfilesRequestArgsForCall)]
	fake.listFieldLevelEncryptionProfilesRequestArgsForCall = append(fake.listFieldLevelEncryptionProfilesRequestArgsForCall, struct {
		arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput
	}{arg1})
	stub := fake.ListFieldLevelEncryptionProfilesRequestStub
	fakeReturns := fake.listFieldLevelEncryptionProfilesRequestReturns
	fake.recordInvocation("ListFieldLevelEncryptionProfilesRequest", []interface{}{arg1})
	fake.listFieldLevelEncryptionProfilesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequestCallCount() int {
	fake.listFieldLevelEncryptionProfilesRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionProfilesRequestArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequestCalls(stub func(*cloudfront.ListFieldLevelEncryptionProfilesInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionProfilesOutput)) {
	fake.listFieldLevelEncryptionProfilesRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesRequestStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequestArgsForCall(i int) *cloudfront.ListFieldLevelEncryptionProfilesInput {
	fake.listFieldLevelEncryptionProfilesRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionProfilesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequestReturns(result1 *request.Request, result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	fake.listFieldLevelEncryptionProfilesRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesRequestStub = nil
	fake.listFieldLevelEncryptionProfilesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	fake.listFieldLevelEncryptionProfilesRequestMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesRequestStub = nil
	if fake.listFieldLevelEncryptionProfilesRequestReturnsOnCall == nil {
		fake.listFieldLevelEncryptionProfilesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		})
	}
	fake.listFieldLevelEncryptionProfilesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListFieldLevelEncryptionProfilesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContext(arg1 context.Context, arg2 *cloudfront.ListFieldLevelEncryptionProfilesInput, arg3 ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.Lock()
	ret, specificReturn := fake.listFieldLevelEncryptionProfilesWithContextReturnsOnCall[len(fake.listFieldLevelEncryptionProfilesWithContextArgsForCall)]
	fake.listFieldLevelEncryptionProfilesWithContextArgsForCall = append(fake.listFieldLevelEncryptionProfilesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListFieldLevelEncryptionProfilesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListFieldLevelEncryptionProfilesWithContextStub
	fakeReturns := fake.listFieldLevelEncryptionProfilesWithContextReturns
	fake.recordInvocation("ListFieldLevelEncryptionProfilesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listFieldLevelEncryptionProfilesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContextCallCount() int {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.RUnlock()
	return len(fake.listFieldLevelEncryptionProfilesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContextCalls(stub func(context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)) {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesWithContextStub = stub
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, []request.Option) {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.RUnlock()
	argsForCall := fake.listFieldLevelEncryptionProfilesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContextReturns(result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput, result2 error) {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesWithContextStub = nil
	fake.listFieldLevelEncryptionProfilesWithContextReturns = struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFieldLevelEncryptionProfilesWithContextReturnsOnCall(i int, result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput, result2 error) {
	fake.listFieldLevelEncryptionProfilesWithContextMutex.Lock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.Unlock()
	fake.ListFieldLevelEncryptionProfilesWithContextStub = nil
	if fake.listFieldLevelEncryptionProfilesWithContextReturnsOnCall == nil {
		fake.listFieldLevelEncryptionProfilesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
			result2 error
		})
	}
	fake.listFieldLevelEncryptionProfilesWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFieldLevelEncryptionProfilesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctions(arg1 *cloudfront.ListFunctionsInput) (*cloudfront.ListFunctionsOutput, error) {
	fake.listFunctionsMutex.Lock()
	ret, specificReturn := fake.listFunctionsReturnsOnCall[len(fake.listFunctionsArgsForCall)]
	fake.listFunctionsArgsForCall = append(fake.listFunctionsArgsForCall, struct {
		arg1 *cloudfront.ListFunctionsInput
	}{arg1})
	stub := fake.ListFunctionsStub
	fakeReturns := fake.listFunctionsReturns
	fake.recordInvocation("ListFunctions", []interface{}{arg1})
	fake.listFunctionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFunctionsCallCount() int {
	fake.listFunctionsMutex.RLock()
	defer fake.listFunctionsMutex.RUnlock()
	return len(fake.listFunctionsArgsForCall)
}

func (fake *FakeCloudfront) ListFunctionsCalls(stub func(*cloudfront.ListFunctionsInput) (*cloudfront.ListFunctionsOutput, error)) {
	fake.listFunctionsMutex.Lock()
	defer fake.listFunctionsMutex.Unlock()
	fake.ListFunctionsStub = stub
}

func (fake *FakeCloudfront) ListFunctionsArgsForCall(i int) *cloudfront.ListFunctionsInput {
	fake.listFunctionsMutex.RLock()
	defer fake.listFunctionsMutex.RUnlock()
	argsForCall := fake.listFunctionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFunctionsReturns(result1 *cloudfront.ListFunctionsOutput, result2 error) {
	fake.listFunctionsMutex.Lock()
	defer fake.listFunctionsMutex.Unlock()
	fake.ListFunctionsStub = nil
	fake.listFunctionsReturns = struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctionsReturnsOnCall(i int, result1 *cloudfront.ListFunctionsOutput, result2 error) {
	fake.listFunctionsMutex.Lock()
	defer fake.listFunctionsMutex.Unlock()
	fake.ListFunctionsStub = nil
	if fake.listFunctionsReturnsOnCall == nil {
		fake.listFunctionsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFunctionsOutput
			result2 error
		})
	}
	fake.listFunctionsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctionsRequest(arg1 *cloudfront.ListFunctionsInput) (*request.Request, *cloudfront.ListFunctionsOutput) {
	fake.listFunctionsRequestMutex.Lock()
	ret, specificReturn := fake.listFunctionsRequestReturnsOnCall[len(fake.listFunctionsRequestArgsForCall)]
	fake.listFunctionsRequestArgsForCall = append(fake.listFunctionsRequestArgsForCall, struct {
		arg1 *cloudfront.ListFunctionsInput
	}{arg1})
	stub := fake.ListFunctionsRequestStub
	fakeReturns := fake.listFunctionsRequestReturns
	fake.recordInvocation("ListFunctionsRequest", []interface{}{arg1})
	fake.listFunctionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFunctionsRequestCallCount() int {
	fake.listFunctionsRequestMutex.RLock()
	defer fake.listFunctionsRequestMutex.RUnlock()
	return len(fake.listFunctionsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListFunctionsRequestCalls(stub func(*cloudfront.ListFunctionsInput) (*request.Request, *cloudfront.ListFunctionsOutput)) {
	fake.listFunctionsRequestMutex.Lock()
	defer fake.listFunctionsRequestMutex.Unlock()
	fake.ListFunctionsRequestStub = stub
}

func (fake *FakeCloudfront) ListFunctionsRequestArgsForCall(i int) *cloudfront.ListFunctionsInput {
	fake.listFunctionsRequestMutex.RLock()
	defer fake.listFunctionsRequestMutex.RUnlock()
	argsForCall := fake.listFunctionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListFunctionsRequestReturns(result1 *request.Request, result2 *cloudfront.ListFunctionsOutput) {
	fake.listFunctionsRequestMutex.Lock()
	defer fake.listFunctionsRequestMutex.Unlock()
	fake.ListFunctionsRequestStub = nil
	fake.listFunctionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListFunctionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListFunctionsOutput) {
	fake.listFunctionsRequestMutex.Lock()
	defer fake.listFunctionsRequestMutex.Unlock()
	fake.ListFunctionsRequestStub = nil
	if fake.listFunctionsRequestReturnsOnCall == nil {
		fake.listFunctionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListFunctionsOutput
		})
	}
	fake.listFunctionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListFunctionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctionsWithContext(arg1 context.Context, arg2 *cloudfront.ListFunctionsInput, arg3 ...request.Option) (*cloudfront.ListFunctionsOutput, error) {
	fake.listFunctionsWithContextMutex.Lock()
	ret, specificReturn := fake.listFunctionsWithContextReturnsOnCall[len(fake.listFunctionsWithContextArgsForCall)]
	fake.listFunctionsWithContextArgsForCall = append(fake.listFunctionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListFunctionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListFunctionsWithContextStub
	fakeReturns := fake.listFunctionsWithContextReturns
	fake.recordInvocation("ListFunctionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listFunctionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListFunctionsWithContextCallCount() int {
	fake.listFunctionsWithContextMutex.RLock()
	defer fake.listFunctionsWithContextMutex.RUnlock()
	return len(fake.listFunctionsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListFunctionsWithContextCalls(stub func(context.Context, *cloudfront.ListFunctionsInput, ...request.Option) (*cloudfront.ListFunctionsOutput, error)) {
	fake.listFunctionsWithContextMutex.Lock()
	defer fake.listFunctionsWithContextMutex.Unlock()
	fake.ListFunctionsWithContextStub = stub
}

func (fake *FakeCloudfront) ListFunctionsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListFunctionsInput, []request.Option) {
	fake.listFunctionsWithContextMutex.RLock()
	defer fake.listFunctionsWithContextMutex.RUnlock()
	argsForCall := fake.listFunctionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListFunctionsWithContextReturns(result1 *cloudfront.ListFunctionsOutput, result2 error) {
	fake.listFunctionsWithContextMutex.Lock()
	defer fake.listFunctionsWithContextMutex.Unlock()
	fake.ListFunctionsWithContextStub = nil
	fake.listFunctionsWithContextReturns = struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListFunctionsWithContextReturnsOnCall(i int, result1 *cloudfront.ListFunctionsOutput, result2 error) {
	fake.listFunctionsWithContextMutex.Lock()
	defer fake.listFunctionsWithContextMutex.Unlock()
	fake.ListFunctionsWithContextStub = nil
	if fake.listFunctionsWithContextReturnsOnCall == nil {
		fake.listFunctionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListFunctionsOutput
			result2 error
		})
	}
	fake.listFunctionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListFunctionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidations(arg1 *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	fake.listInvalidationsMutex.Lock()
	ret, specificReturn := fake.listInvalidationsReturnsOnCall[len(fake.listInvalidationsArgsForCall)]
	fake.listInvalidationsArgsForCall = append(fake.listInvalidationsArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
	}{arg1})
	stub := fake.ListInvalidationsStub
	fakeReturns := fake.listInvalidationsReturns
	fake.recordInvocation("ListInvalidations", []interface{}{arg1})
	fake.listInvalidationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListInvalidationsCallCount() int {
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	return len(fake.listInvalidationsArgsForCall)
}

func (fake *FakeCloudfront) ListInvalidationsCalls(stub func(*cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error)) {
	fake.listInvalidationsMutex.Lock()
	defer fake.listInvalidationsMutex.Unlock()
	fake.ListInvalidationsStub = stub
}

func (fake *FakeCloudfront) ListInvalidationsArgsForCall(i int) *cloudfront.ListInvalidationsInput {
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	argsForCall := fake.listInvalidationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListInvalidationsReturns(result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.listInvalidationsMutex.Lock()
	defer fake.listInvalidationsMutex.Unlock()
	fake.ListInvalidationsStub = nil
	fake.listInvalidationsReturns = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidationsReturnsOnCall(i int, result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.listInvalidationsMutex.Lock()
	defer fake.listInvalidationsMutex.Unlock()
	fake.ListInvalidationsStub = nil
	if fake.listInvalidationsReturnsOnCall == nil {
		fake.listInvalidationsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListInvalidationsOutput
			result2 error
		})
	}
	fake.listInvalidationsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidationsPages(arg1 *cloudfront.ListInvalidationsInput, arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool) error {
	fake.listInvalidationsPagesMutex.Lock()
	ret, specificReturn := fake.listInvalidationsPagesReturnsOnCall[len(fake.listInvalidationsPagesArgsForCall)]
	fake.listInvalidationsPagesArgsForCall = append(fake.listInvalidationsPagesArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
		arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListInvalidationsPagesStub
	fakeReturns := fake.listInvalidationsPagesReturns
	fake.recordInvocation("ListInvalidationsPages", []interface{}{arg1, arg2})
	fake.listInvalidationsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListInvalidationsPagesCallCount() int {
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	return len(fake.listInvalidationsPagesArgsForCall)
}

func (fake *FakeCloudfront) ListInvalidationsPagesCalls(stub func(*cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool) error) {
	fake.listInvalidationsPagesMutex.Lock()
	defer fake.listInvalidationsPagesMutex.Unlock()
	fake.ListInvalidationsPagesStub = stub
}

func (fake *FakeCloudfront) ListInvalidationsPagesArgsForCall(i int) (*cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool) {
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	argsForCall := fake.listInvalidationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudfront) ListInvalidationsPagesReturns(result1 error) {
	fake.listInvalidationsPagesMutex.Lock()
	defer fake.listInvalidationsPagesMutex.Unlock()
	fake.ListInvalidationsPagesStub = nil
	fake.listInvalidationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListInvalidationsPagesReturnsOnCall(i int, result1 error) {
	fake.listInvalidationsPagesMutex.Lock()
	defer fake.listInvalidationsPagesMutex.Unlock()
	fake.ListInvalidationsPagesStub = nil
	if fake.listInvalidationsPagesReturnsOnCall == nil {
		fake.listInvalidationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInvalidationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContext(arg1 context.Context, arg2 *cloudfront.ListInvalidationsInput, arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listInvalidationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listInvalidationsPagesWithContextReturnsOnCall[len(fake.listInvalidationsPagesWithContextArgsForCall)]
	fake.listInvalidationsPagesWithContextArgsForCall = append(fake.listInvalidationsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListInvalidationsPagesWithContextStub
	fakeReturns := fake.listInvalidationsPagesWithContextReturns
	fake.recordInvocation("ListInvalidationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listInvalidationsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContextCallCount() int {
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	return len(fake.listInvalidationsPagesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContextCalls(stub func(context.Context, *cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool, ...request.Option) error) {
	fake.listInvalidationsPagesWithContextMutex.Lock()
	defer fake.listInvalidationsPagesWithContextMutex.Unlock()
	fake.ListInvalidationsPagesWithContextStub = stub
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool, []request.Option) {
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listInvalidationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContextReturns(result1 error) {
	fake.listInvalidationsPagesWithContextMutex.Lock()
	defer fake.listInvalidationsPagesWithContextMutex.Unlock()
	fake.ListInvalidationsPagesWithContextStub = nil
	fake.listInvalidationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListInvalidationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listInvalidationsPagesWithContextMutex.Lock()
	defer fake.listInvalidationsPagesWithContextMutex.Unlock()
	fake.ListInvalidationsPagesWithContextStub = nil
	if fake.listInvalidationsPagesWithContextReturnsOnCall == nil {
		fake.listInvalidationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInvalidationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListInvalidationsRequest(arg1 *cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput) {
	fake.listInvalidationsRequestMutex.Lock()
	ret, specificReturn := fake.listInvalidationsRequestReturnsOnCall[len(fake.listInvalidationsRequestArgsForCall)]
	fake.listInvalidationsRequestArgsForCall = append(fake.listInvalidationsRequestArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
	}{arg1})
	stub := fake.ListInvalidationsRequestStub
	fakeReturns := fake.listInvalidationsRequestReturns
	fake.recordInvocation("ListInvalidationsRequest", []interface{}{arg1})
	fake.listInvalidationsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListInvalidationsRequestCallCount() int {
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	return len(fake.listInvalidationsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListInvalidationsRequestCalls(stub func(*cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput)) {
	fake.listInvalidationsRequestMutex.Lock()
	defer fake.listInvalidationsRequestMutex.Unlock()
	fake.ListInvalidationsRequestStub = stub
}

func (fake *FakeCloudfront) ListInvalidationsRequestArgsForCall(i int) *cloudfront.ListInvalidationsInput {
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	argsForCall := fake.listInvalidationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListInvalidationsRequestReturns(result1 *request.Request, result2 *cloudfront.ListInvalidationsOutput) {
	fake.listInvalidationsRequestMutex.Lock()
	defer fake.listInvalidationsRequestMutex.Unlock()
	fake.ListInvalidationsRequestStub = nil
	fake.listInvalidationsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListInvalidationsOutput) {
	fake.listInvalidationsRequestMutex.Lock()
	defer fake.listInvalidationsRequestMutex.Unlock()
	fake.ListInvalidationsRequestStub = nil
	if fake.listInvalidationsRequestReturnsOnCall == nil {
		fake.listInvalidationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListInvalidationsOutput
		})
	}
	fake.listInvalidationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidationsWithContext(arg1 context.Context, arg2 *cloudfront.ListInvalidationsInput, arg3 ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	fake.listInvalidationsWithContextMutex.Lock()
	ret, specificReturn := fake.listInvalidationsWithContextReturnsOnCall[len(fake.listInvalidationsWithContextArgsForCall)]
	fake.listInvalidationsWithContextArgsForCall = append(fake.listInvalidationsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListInvalidationsWithContextStub
	fakeReturns := fake.listInvalidationsWithContextReturns
	fake.recordInvocation("ListInvalidationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listInvalidationsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListInvalidationsWithContextCallCount() int {
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	return len(fake.listInvalidationsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListInvalidationsWithContextCalls(stub func(context.Context, *cloudfront.ListInvalidationsInput, ...request.Option) (*cloudfront.ListInvalidationsOutput, error)) {
	fake.listInvalidationsWithContextMutex.Lock()
	defer fake.listInvalidationsWithContextMutex.Unlock()
	fake.ListInvalidationsWithContextStub = stub
}

func (fake *FakeCloudfront) ListInvalidationsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListInvalidationsInput, []request.Option) {
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	argsForCall := fake.listInvalidationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListInvalidationsWithContextReturns(result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.listInvalidationsWithContextMutex.Lock()
	defer fake.listInvalidationsWithContextMutex.Unlock()
	fake.ListInvalidationsWithContextStub = nil
	fake.listInvalidationsWithContextReturns = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListInvalidationsWithContextReturnsOnCall(i int, result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.listInvalidationsWithContextMutex.Lock()
	defer fake.listInvalidationsWithContextMutex.Unlock()
	fake.ListInvalidationsWithContextStub = nil
	if fake.listInvalidationsWithContextReturnsOnCall == nil {
		fake.listInvalidationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListInvalidationsOutput
			result2 error
		})
	}
	fake.listInvalidationsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroups(arg1 *cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error) {
	fake.listKeyGroupsMutex.Lock()
	ret, specificReturn := fake.listKeyGroupsReturnsOnCall[len(fake.listKeyGroupsArgsForCall)]
	fake.listKeyGroupsArgsForCall = append(fake.listKeyGroupsArgsForCall, struct {
		arg1 *cloudfront.ListKeyGroupsInput
	}{arg1})
	stub := fake.ListKeyGroupsStub
	fakeReturns := fake.listKeyGroupsReturns
	fake.recordInvocation("ListKeyGroups", []interface{}{arg1})
	fake.listKeyGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListKeyGroupsCallCount() int {
	fake.listKeyGroupsMutex.RLock()
	defer fake.listKeyGroupsMutex.RUnlock()
	return len(fake.listKeyGroupsArgsForCall)
}

func (fake *FakeCloudfront) ListKeyGroupsCalls(stub func(*cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error)) {
	fake.listKeyGroupsMutex.Lock()
	defer fake.listKeyGroupsMutex.Unlock()
	fake.ListKeyGroupsStub = stub
}

func (fake *FakeCloudfront) ListKeyGroupsArgsForCall(i int) *cloudfront.ListKeyGroupsInput {
	fake.listKeyGroupsMutex.RLock()
	defer fake.listKeyGroupsMutex.RUnlock()
	argsForCall := fake.listKeyGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListKeyGroupsReturns(result1 *cloudfront.ListKeyGroupsOutput, result2 error) {
	fake.listKeyGroupsMutex.Lock()
	defer fake.listKeyGroupsMutex.Unlock()
	fake.ListKeyGroupsStub = nil
	fake.listKeyGroupsReturns = struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroupsReturnsOnCall(i int, result1 *cloudfront.ListKeyGroupsOutput, result2 error) {
	fake.listKeyGroupsMutex.Lock()
	defer fake.listKeyGroupsMutex.Unlock()
	fake.ListKeyGroupsStub = nil
	if fake.listKeyGroupsReturnsOnCall == nil {
		fake.listKeyGroupsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListKeyGroupsOutput
			result2 error
		})
	}
	fake.listKeyGroupsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroupsRequest(arg1 *cloudfront.ListKeyGroupsInput) (*request.Request, *cloudfront.ListKeyGroupsOutput) {
	fake.listKeyGroupsRequestMutex.Lock()
	ret, specificReturn := fake.listKeyGroupsRequestReturnsOnCall[len(fake.listKeyGroupsRequestArgsForCall)]
	fake.listKeyGroupsRequestArgsForCall = append(fake.listKeyGroupsRequestArgsForCall, struct {
		arg1 *cloudfront.ListKeyGroupsInput
	}{arg1})
	stub := fake.ListKeyGroupsRequestStub
	fakeReturns := fake.listKeyGroupsRequestReturns
	fake.recordInvocation("ListKeyGroupsRequest", []interface{}{arg1})
	fake.listKeyGroupsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListKeyGroupsRequestCallCount() int {
	fake.listKeyGroupsRequestMutex.RLock()
	defer fake.listKeyGroupsRequestMutex.RUnlock()
	return len(fake.listKeyGroupsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListKeyGroupsRequestCalls(stub func(*cloudfront.ListKeyGroupsInput) (*request.Request, *cloudfront.ListKeyGroupsOutput)) {
	fake.listKeyGroupsRequestMutex.Lock()
	defer fake.listKeyGroupsRequestMutex.Unlock()
	fake.ListKeyGroupsRequestStub = stub
}

func (fake *FakeCloudfront) ListKeyGroupsRequestArgsForCall(i int) *cloudfront.ListKeyGroupsInput {
	fake.listKeyGroupsRequestMutex.RLock()
	defer fake.listKeyGroupsRequestMutex.RUnlock()
	argsForCall := fake.listKeyGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListKeyGroupsRequestReturns(result1 *request.Request, result2 *cloudfront.ListKeyGroupsOutput) {
	fake.listKeyGroupsRequestMutex.Lock()
	defer fake.listKeyGroupsRequestMutex.Unlock()
	fake.ListKeyGroupsRequestStub = nil
	fake.listKeyGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListKeyGroupsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListKeyGroupsOutput) {
	fake.listKeyGroupsRequestMutex.Lock()
	defer fake.listKeyGroupsRequestMutex.Unlock()
	fake.ListKeyGroupsRequestStub = nil
	if fake.listKeyGroupsRequestReturnsOnCall == nil {
		fake.listKeyGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListKeyGroupsOutput
		})
	}
	fake.listKeyGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListKeyGroupsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroupsWithContext(arg1 context.Context, arg2 *cloudfront.ListKeyGroupsInput, arg3 ...request.Option) (*cloudfront.ListKeyGroupsOutput, error) {
	fake.listKeyGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.listKeyGroupsWithContextReturnsOnCall[len(fake.listKeyGroupsWithContextArgsForCall)]
	fake.listKeyGroupsWithContextArgsForCall = append(fake.listKeyGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListKeyGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListKeyGroupsWithContextStub
	fakeReturns := fake.listKeyGroupsWithContextReturns
	fake.recordInvocation("ListKeyGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listKeyGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListKeyGroupsWithContextCallCount() int {
	fake.listKeyGroupsWithContextMutex.RLock()
	defer fake.listKeyGroupsWithContextMutex.RUnlock()
	return len(fake.listKeyGroupsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListKeyGroupsWithContextCalls(stub func(context.Context, *cloudfront.ListKeyGroupsInput, ...request.Option) (*cloudfront.ListKeyGroupsOutput, error)) {
	fake.listKeyGroupsWithContextMutex.Lock()
	defer fake.listKeyGroupsWithContextMutex.Unlock()
	fake.ListKeyGroupsWithContextStub = stub
}

func (fake *FakeCloudfront) ListKeyGroupsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListKeyGroupsInput, []request.Option) {
	fake.listKeyGroupsWithContextMutex.RLock()
	defer fake.listKeyGroupsWithContextMutex.RUnlock()
	argsForCall := fake.listKeyGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListKeyGroupsWithContextReturns(result1 *cloudfront.ListKeyGroupsOutput, result2 error) {
	fake.listKeyGroupsWithContextMutex.Lock()
	defer fake.listKeyGroupsWithContextMutex.Unlock()
	fake.ListKeyGroupsWithContextStub = nil
	fake.listKeyGroupsWithContextReturns = struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListKeyGroupsWithContextReturnsOnCall(i int, result1 *cloudfront.ListKeyGroupsOutput, result2 error) {
	fake.listKeyGroupsWithContextMutex.Lock()
	defer fake.listKeyGroupsWithContextMutex.Unlock()
	fake.ListKeyGroupsWithContextStub = nil
	if fake.listKeyGroupsWithContextReturnsOnCall == nil {
		fake.listKeyGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListKeyGroupsOutput
			result2 error
		})
	}
	fake.listKeyGroupsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListKeyGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPolicies(arg1 *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	fake.listOriginRequestPoliciesMutex.Lock()
	ret, specificReturn := fake.listOriginRequestPoliciesReturnsOnCall[len(fake.listOriginRequestPoliciesArgsForCall)]
	fake.listOriginRequestPoliciesArgsForCall = append(fake.listOriginRequestPoliciesArgsForCall, struct {
		arg1 *cloudfront.ListOriginRequestPoliciesInput
	}{arg1})
	stub := fake.ListOriginRequestPoliciesStub
	fakeReturns := fake.listOriginRequestPoliciesReturns
	fake.recordInvocation("ListOriginRequestPolicies", []interface{}{arg1})
	fake.listOriginRequestPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesCallCount() int {
	fake.listOriginRequestPoliciesMutex.RLock()
	defer fake.listOriginRequestPoliciesMutex.RUnlock()
	return len(fake.listOriginRequestPoliciesArgsForCall)
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesCalls(stub func(*cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error)) {
	fake.listOriginRequestPoliciesMutex.Lock()
	defer fake.listOriginRequestPoliciesMutex.Unlock()
	fake.ListOriginRequestPoliciesStub = stub
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesArgsForCall(i int) *cloudfront.ListOriginRequestPoliciesInput {
	fake.listOriginRequestPoliciesMutex.RLock()
	defer fake.listOriginRequestPoliciesMutex.RUnlock()
	argsForCall := fake.listOriginRequestPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesReturns(result1 *cloudfront.ListOriginRequestPoliciesOutput, result2 error) {
	fake.listOriginRequestPoliciesMutex.Lock()
	defer fake.listOriginRequestPoliciesMutex.Unlock()
	fake.ListOriginRequestPoliciesStub = nil
	fake.listOriginRequestPoliciesReturns = struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesReturnsOnCall(i int, result1 *cloudfront.ListOriginRequestPoliciesOutput, result2 error) {
	fake.listOriginRequestPoliciesMutex.Lock()
	defer fake.listOriginRequestPoliciesMutex.Unlock()
	fake.ListOriginRequestPoliciesStub = nil
	if fake.listOriginRequestPoliciesReturnsOnCall == nil {
		fake.listOriginRequestPoliciesReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListOriginRequestPoliciesOutput
			result2 error
		})
	}
	fake.listOriginRequestPoliciesReturnsOnCall[i] = struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequest(arg1 *cloudfront.ListOriginRequestPoliciesInput) (*request.Request, *cloudfront.ListOriginRequestPoliciesOutput) {
	fake.listOriginRequestPoliciesRequestMutex.Lock()
	ret, specificReturn := fake.listOriginRequestPoliciesRequestReturnsOnCall[len(fake.listOriginRequestPoliciesRequestArgsForCall)]
	fake.listOriginRequestPoliciesRequestArgsForCall = append(fake.listOriginRequestPoliciesRequestArgsForCall, struct {
		arg1 *cloudfront.ListOriginRequestPoliciesInput
	}{arg1})
	stub := fake.ListOriginRequestPoliciesRequestStub
	fakeReturns := fake.listOriginRequestPoliciesRequestReturns
	fake.recordInvocation("ListOriginRequestPoliciesRequest", []interface{}{arg1})
	fake.listOriginRequestPoliciesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequestCallCount() int {
	fake.listOriginRequestPoliciesRequestMutex.RLock()
	defer fake.listOriginRequestPoliciesRequestMutex.RUnlock()
	return len(fake.listOriginRequestPoliciesRequestArgsForCall)
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequestCalls(stub func(*cloudfront.ListOriginRequestPoliciesInput) (*request.Request, *cloudfront.ListOriginRequestPoliciesOutput)) {
	fake.listOriginRequestPoliciesRequestMutex.Lock()
	defer fake.listOriginRequestPoliciesRequestMutex.Unlock()
	fake.ListOriginRequestPoliciesRequestStub = stub
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequestArgsForCall(i int) *cloudfront.ListOriginRequestPoliciesInput {
	fake.listOriginRequestPoliciesRequestMutex.RLock()
	defer fake.listOriginRequestPoliciesRequestMutex.RUnlock()
	argsForCall := fake.listOriginRequestPoliciesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequestReturns(result1 *request.Request, result2 *cloudfront.ListOriginRequestPoliciesOutput) {
	fake.listOriginRequestPoliciesRequestMutex.Lock()
	defer fake.listOriginRequestPoliciesRequestMutex.Unlock()
	fake.ListOriginRequestPoliciesRequestStub = nil
	fake.listOriginRequestPoliciesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListOriginRequestPoliciesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListOriginRequestPoliciesOutput) {
	fake.listOriginRequestPoliciesRequestMutex.Lock()
	defer fake.listOriginRequestPoliciesRequestMutex.Unlock()
	fake.ListOriginRequestPoliciesRequestStub = nil
	if fake.listOriginRequestPoliciesRequestReturnsOnCall == nil {
		fake.listOriginRequestPoliciesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListOriginRequestPoliciesOutput
		})
	}
	fake.listOriginRequestPoliciesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListOriginRequestPoliciesOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContext(arg1 context.Context, arg2 *cloudfront.ListOriginRequestPoliciesInput, arg3 ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	fake.listOriginRequestPoliciesWithContextMutex.Lock()
	ret, specificReturn := fake.listOriginRequestPoliciesWithContextReturnsOnCall[len(fake.listOriginRequestPoliciesWithContextArgsForCall)]
	fake.listOriginRequestPoliciesWithContextArgsForCall = append(fake.listOriginRequestPoliciesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListOriginRequestPoliciesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListOriginRequestPoliciesWithContextStub
	fakeReturns := fake.listOriginRequestPoliciesWithContextReturns
	fake.recordInvocation("ListOriginRequestPoliciesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listOriginRequestPoliciesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContextCallCount() int {
	fake.listOriginRequestPoliciesWithContextMutex.RLock()
	defer fake.listOriginRequestPoliciesWithContextMutex.RUnlock()
	return len(fake.listOriginRequestPoliciesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContextCalls(stub func(context.Context, *cloudfront.ListOriginRequestPoliciesInput, ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error)) {
	fake.listOriginRequestPoliciesWithContextMutex.Lock()
	defer fake.listOriginRequestPoliciesWithContextMutex.Unlock()
	fake.ListOriginRequestPoliciesWithContextStub = stub
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListOriginRequestPoliciesInput, []request.Option) {
	fake.listOriginRequestPoliciesWithContextMutex.RLock()
	defer fake.listOriginRequestPoliciesWithContextMutex.RUnlock()
	argsForCall := fake.listOriginRequestPoliciesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContextReturns(result1 *cloudfront.ListOriginRequestPoliciesOutput, result2 error) {
	fake.listOriginRequestPoliciesWithContextMutex.Lock()
	defer fake.listOriginRequestPoliciesWithContextMutex.Unlock()
	fake.ListOriginRequestPoliciesWithContextStub = nil
	fake.listOriginRequestPoliciesWithContextReturns = struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListOriginRequestPoliciesWithContextReturnsOnCall(i int, result1 *cloudfront.ListOriginRequestPoliciesOutput, result2 error) {
	fake.listOriginRequestPoliciesWithContextMutex.Lock()
	defer fake.listOriginRequestPoliciesWithContextMutex.Unlock()
	fake.ListOriginRequestPoliciesWithContextStub = nil
	if fake.listOriginRequestPoliciesWithContextReturnsOnCall == nil {
		fake.listOriginRequestPoliciesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListOriginRequestPoliciesOutput
			result2 error
		})
	}
	fake.listOriginRequestPoliciesWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListOriginRequestPoliciesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeys(arg1 *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	fake.listPublicKeysMutex.Lock()
	ret, specificReturn := fake.listPublicKeysReturnsOnCall[len(fake.listPublicKeysArgsForCall)]
	fake.listPublicKeysArgsForCall = append(fake.listPublicKeysArgsForCall, struct {
		arg1 *cloudfront.ListPublicKeysInput
	}{arg1})
	stub := fake.ListPublicKeysStub
	fakeReturns := fake.listPublicKeysReturns
	fake.recordInvocation("ListPublicKeys", []interface{}{arg1})
	fake.listPublicKeysMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListPublicKeysCallCount() int {
	fake.listPublicKeysMutex.RLock()
	defer fake.listPublicKeysMutex.RUnlock()
	return len(fake.listPublicKeysArgsForCall)
}

func (fake *FakeCloudfront) ListPublicKeysCalls(stub func(*cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error)) {
	fake.listPublicKeysMutex.Lock()
	defer fake.listPublicKeysMutex.Unlock()
	fake.ListPublicKeysStub = stub
}

func (fake *FakeCloudfront) ListPublicKeysArgsForCall(i int) *cloudfront.ListPublicKeysInput {
	fake.listPublicKeysMutex.RLock()
	defer fake.listPublicKeysMutex.RUnlock()
	argsForCall := fake.listPublicKeysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListPublicKeysReturns(result1 *cloudfront.ListPublicKeysOutput, result2 error) {
	fake.listPublicKeysMutex.Lock()
	defer fake.listPublicKeysMutex.Unlock()
	fake.ListPublicKeysStub = nil
	fake.listPublicKeysReturns = struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeysReturnsOnCall(i int, result1 *cloudfront.ListPublicKeysOutput, result2 error) {
	fake.listPublicKeysMutex.Lock()
	defer fake.listPublicKeysMutex.Unlock()
	fake.ListPublicKeysStub = nil
	if fake.listPublicKeysReturnsOnCall == nil {
		fake.listPublicKeysReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListPublicKeysOutput
			result2 error
		})
	}
	fake.listPublicKeysReturnsOnCall[i] = struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeysRequest(arg1 *cloudfront.ListPublicKeysInput) (*request.Request, *cloudfront.ListPublicKeysOutput) {
	fake.listPublicKeysRequestMutex.Lock()
	ret, specificReturn := fake.listPublicKeysRequestReturnsOnCall[len(fake.listPublicKeysRequestArgsForCall)]
	fake.listPublicKeysRequestArgsForCall = append(fake.listPublicKeysRequestArgsForCall, struct {
		arg1 *cloudfront.ListPublicKeysInput
	}{arg1})
	stub := fake.ListPublicKeysRequestStub
	fakeReturns := fake.listPublicKeysRequestReturns
	fake.recordInvocation("ListPublicKeysRequest", []interface{}{arg1})
	fake.listPublicKeysRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListPublicKeysRequestCallCount() int {
	fake.listPublicKeysRequestMutex.RLock()
	defer fake.listPublicKeysRequestMutex.RUnlock()
	return len(fake.listPublicKeysRequestArgsForCall)
}

func (fake *FakeCloudfront) ListPublicKeysRequestCalls(stub func(*cloudfront.ListPublicKeysInput) (*request.Request, *cloudfront.ListPublicKeysOutput)) {
	fake.listPublicKeysRequestMutex.Lock()
	defer fake.listPublicKeysRequestMutex.Unlock()
	fake.ListPublicKeysRequestStub = stub
}

func (fake *FakeCloudfront) ListPublicKeysRequestArgsForCall(i int) *cloudfront.ListPublicKeysInput {
	fake.listPublicKeysRequestMutex.RLock()
	defer fake.listPublicKeysRequestMutex.RUnlock()
	argsForCall := fake.listPublicKeysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListPublicKeysRequestReturns(result1 *request.Request, result2 *cloudfront.ListPublicKeysOutput) {
	fake.listPublicKeysRequestMutex.Lock()
	defer fake.listPublicKeysRequestMutex.Unlock()
	fake.ListPublicKeysRequestStub = nil
	fake.listPublicKeysRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListPublicKeysOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeysRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListPublicKeysOutput) {
	fake.listPublicKeysRequestMutex.Lock()
	defer fake.listPublicKeysRequestMutex.Unlock()
	fake.ListPublicKeysRequestStub = nil
	if fake.listPublicKeysRequestReturnsOnCall == nil {
		fake.listPublicKeysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListPublicKeysOutput
		})
	}
	fake.listPublicKeysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListPublicKeysOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeysWithContext(arg1 context.Context, arg2 *cloudfront.ListPublicKeysInput, arg3 ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {
	fake.listPublicKeysWithContextMutex.Lock()
	ret, specificReturn := fake.listPublicKeysWithContextReturnsOnCall[len(fake.listPublicKeysWithContextArgsForCall)]
	fake.listPublicKeysWithContextArgsForCall = append(fake.listPublicKeysWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListPublicKeysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListPublicKeysWithContextStub
	fakeReturns := fake.listPublicKeysWithContextReturns
	fake.recordInvocation("ListPublicKeysWithContext", []interface{}{arg1, arg2, arg3})
	fake.listPublicKeysWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListPublicKeysWithContextCallCount() int {
	fake.listPublicKeysWithContextMutex.RLock()
	defer fake.listPublicKeysWithContextMutex.RUnlock()
	return len(fake.listPublicKeysWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListPublicKeysWithContextCalls(stub func(context.Context, *cloudfront.ListPublicKeysInput, ...request.Option) (*cloudfront.ListPublicKeysOutput, error)) {
	fake.listPublicKeysWithContextMutex.Lock()
	defer fake.listPublicKeysWithContextMutex.Unlock()
	fake.ListPublicKeysWithContextStub = stub
}

func (fake *FakeCloudfront) ListPublicKeysWithContextArgsForCall(i int) (context.Context, *cloudfront.ListPublicKeysInput, []request.Option) {
	fake.listPublicKeysWithContextMutex.RLock()
	defer fake.listPublicKeysWithContextMutex.RUnlock()
	argsForCall := fake.listPublicKeysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListPublicKeysWithContextReturns(result1 *cloudfront.ListPublicKeysOutput, result2 error) {
	fake.listPublicKeysWithContextMutex.Lock()
	defer fake.listPublicKeysWithContextMutex.Unlock()
	fake.ListPublicKeysWithContextStub = nil
	fake.listPublicKeysWithContextReturns = struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListPublicKeysWithContextReturnsOnCall(i int, result1 *cloudfront.ListPublicKeysOutput, result2 error) {
	fake.listPublicKeysWithContextMutex.Lock()
	defer fake.listPublicKeysWithContextMutex.Unlock()
	fake.ListPublicKeysWithContextStub = nil
	if fake.listPublicKeysWithContextReturnsOnCall == nil {
		fake.listPublicKeysWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListPublicKeysOutput
			result2 error
		})
	}
	fake.listPublicKeysWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListPublicKeysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigs(arg1 *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	fake.listRealtimeLogConfigsMutex.Lock()
	ret, specificReturn := fake.listRealtimeLogConfigsReturnsOnCall[len(fake.listRealtimeLogConfigsArgsForCall)]
	fake.listRealtimeLogConfigsArgsForCall = append(fake.listRealtimeLogConfigsArgsForCall, struct {
		arg1 *cloudfront.ListRealtimeLogConfigsInput
	}{arg1})
	stub := fake.ListRealtimeLogConfigsStub
	fakeReturns := fake.listRealtimeLogConfigsReturns
	fake.recordInvocation("ListRealtimeLogConfigs", []interface{}{arg1})
	fake.listRealtimeLogConfigsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsCallCount() int {
	fake.listRealtimeLogConfigsMutex.RLock()
	defer fake.listRealtimeLogConfigsMutex.RUnlock()
	return len(fake.listRealtimeLogConfigsArgsForCall)
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsCalls(stub func(*cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error)) {
	fake.listRealtimeLogConfigsMutex.Lock()
	defer fake.listRealtimeLogConfigsMutex.Unlock()
	fake.ListRealtimeLogConfigsStub = stub
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsArgsForCall(i int) *cloudfront.ListRealtimeLogConfigsInput {
	fake.listRealtimeLogConfigsMutex.RLock()
	defer fake.listRealtimeLogConfigsMutex.RUnlock()
	argsForCall := fake.listRealtimeLogConfigsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsReturns(result1 *cloudfront.ListRealtimeLogConfigsOutput, result2 error) {
	fake.listRealtimeLogConfigsMutex.Lock()
	defer fake.listRealtimeLogConfigsMutex.Unlock()
	fake.ListRealtimeLogConfigsStub = nil
	fake.listRealtimeLogConfigsReturns = struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsReturnsOnCall(i int, result1 *cloudfront.ListRealtimeLogConfigsOutput, result2 error) {
	fake.listRealtimeLogConfigsMutex.Lock()
	defer fake.listRealtimeLogConfigsMutex.Unlock()
	fake.ListRealtimeLogConfigsStub = nil
	if fake.listRealtimeLogConfigsReturnsOnCall == nil {
		fake.listRealtimeLogConfigsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListRealtimeLogConfigsOutput
			result2 error
		})
	}
	fake.listRealtimeLogConfigsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequest(arg1 *cloudfront.ListRealtimeLogConfigsInput) (*request.Request, *cloudfront.ListRealtimeLogConfigsOutput) {
	fake.listRealtimeLogConfigsRequestMutex.Lock()
	ret, specificReturn := fake.listRealtimeLogConfigsRequestReturnsOnCall[len(fake.listRealtimeLogConfigsRequestArgsForCall)]
	fake.listRealtimeLogConfigsRequestArgsForCall = append(fake.listRealtimeLogConfigsRequestArgsForCall, struct {
		arg1 *cloudfront.ListRealtimeLogConfigsInput
	}{arg1})
	stub := fake.ListRealtimeLogConfigsRequestStub
	fakeReturns := fake.listRealtimeLogConfigsRequestReturns
	fake.recordInvocation("ListRealtimeLogConfigsRequest", []interface{}{arg1})
	fake.listRealtimeLogConfigsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequestCallCount() int {
	fake.listRealtimeLogConfigsRequestMutex.RLock()
	defer fake.listRealtimeLogConfigsRequestMutex.RUnlock()
	return len(fake.listRealtimeLogConfigsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequestCalls(stub func(*cloudfront.ListRealtimeLogConfigsInput) (*request.Request, *cloudfront.ListRealtimeLogConfigsOutput)) {
	fake.listRealtimeLogConfigsRequestMutex.Lock()
	defer fake.listRealtimeLogConfigsRequestMutex.Unlock()
	fake.ListRealtimeLogConfigsRequestStub = stub
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequestArgsForCall(i int) *cloudfront.ListRealtimeLogConfigsInput {
	fake.listRealtimeLogConfigsRequestMutex.RLock()
	defer fake.listRealtimeLogConfigsRequestMutex.RUnlock()
	argsForCall := fake.listRealtimeLogConfigsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequestReturns(result1 *request.Request, result2 *cloudfront.ListRealtimeLogConfigsOutput) {
	fake.listRealtimeLogConfigsRequestMutex.Lock()
	defer fake.listRealtimeLogConfigsRequestMutex.Unlock()
	fake.ListRealtimeLogConfigsRequestStub = nil
	fake.listRealtimeLogConfigsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListRealtimeLogConfigsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListRealtimeLogConfigsOutput) {
	fake.listRealtimeLogConfigsRequestMutex.Lock()
	defer fake.listRealtimeLogConfigsRequestMutex.Unlock()
	fake.ListRealtimeLogConfigsRequestStub = nil
	if fake.listRealtimeLogConfigsRequestReturnsOnCall == nil {
		fake.listRealtimeLogConfigsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListRealtimeLogConfigsOutput
		})
	}
	fake.listRealtimeLogConfigsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListRealtimeLogConfigsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContext(arg1 context.Context, arg2 *cloudfront.ListRealtimeLogConfigsInput, arg3 ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	fake.listRealtimeLogConfigsWithContextMutex.Lock()
	ret, specificReturn := fake.listRealtimeLogConfigsWithContextReturnsOnCall[len(fake.listRealtimeLogConfigsWithContextArgsForCall)]
	fake.listRealtimeLogConfigsWithContextArgsForCall = append(fake.listRealtimeLogConfigsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListRealtimeLogConfigsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListRealtimeLogConfigsWithContextStub
	fakeReturns := fake.listRealtimeLogConfigsWithContextReturns
	fake.recordInvocation("ListRealtimeLogConfigsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listRealtimeLogConfigsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContextCallCount() int {
	fake.listRealtimeLogConfigsWithContextMutex.RLock()
	defer fake.listRealtimeLogConfigsWithContextMutex.RUnlock()
	return len(fake.listRealtimeLogConfigsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContextCalls(stub func(context.Context, *cloudfront.ListRealtimeLogConfigsInput, ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error)) {
	fake.listRealtimeLogConfigsWithContextMutex.Lock()
	defer fake.listRealtimeLogConfigsWithContextMutex.Unlock()
	fake.ListRealtimeLogConfigsWithContextStub = stub
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListRealtimeLogConfigsInput, []request.Option) {
	fake.listRealtimeLogConfigsWithContextMutex.RLock()
	defer fake.listRealtimeLogConfigsWithContextMutex.RUnlock()
	argsForCall := fake.listRealtimeLogConfigsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContextReturns(result1 *cloudfront.ListRealtimeLogConfigsOutput, result2 error) {
	fake.listRealtimeLogConfigsWithContextMutex.Lock()
	defer fake.listRealtimeLogConfigsWithContextMutex.Unlock()
	fake.ListRealtimeLogConfigsWithContextStub = nil
	fake.listRealtimeLogConfigsWithContextReturns = struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListRealtimeLogConfigsWithContextReturnsOnCall(i int, result1 *cloudfront.ListRealtimeLogConfigsOutput, result2 error) {
	fake.listRealtimeLogConfigsWithContextMutex.Lock()
	defer fake.listRealtimeLogConfigsWithContextMutex.Unlock()
	fake.ListRealtimeLogConfigsWithContextStub = nil
	if fake.listRealtimeLogConfigsWithContextReturnsOnCall == nil {
		fake.listRealtimeLogConfigsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListRealtimeLogConfigsOutput
			result2 error
		})
	}
	fake.listRealtimeLogConfigsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListRealtimeLogConfigsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributions(arg1 *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	fake.listStreamingDistributionsMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsReturnsOnCall[len(fake.listStreamingDistributionsArgsForCall)]
	fake.listStreamingDistributionsArgsForCall = append(fake.listStreamingDistributionsArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}{arg1})
	stub := fake.ListStreamingDistributionsStub
	fakeReturns := fake.listStreamingDistributionsReturns
	fake.recordInvocation("ListStreamingDistributions", []interface{}{arg1})
	fake.listStreamingDistributionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListStreamingDistributionsCallCount() int {
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	return len(fake.listStreamingDistributionsArgsForCall)
}

func (fake *FakeCloudfront) ListStreamingDistributionsCalls(stub func(*cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error)) {
	fake.listStreamingDistributionsMutex.Lock()
	defer fake.listStreamingDistributionsMutex.Unlock()
	fake.ListStreamingDistributionsStub = stub
}

func (fake *FakeCloudfront) ListStreamingDistributionsArgsForCall(i int) *cloudfront.ListStreamingDistributionsInput {
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	argsForCall := fake.listStreamingDistributionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListStreamingDistributionsReturns(result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.listStreamingDistributionsMutex.Lock()
	defer fake.listStreamingDistributionsMutex.Unlock()
	fake.ListStreamingDistributionsStub = nil
	fake.listStreamingDistributionsReturns = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributionsReturnsOnCall(i int, result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.listStreamingDistributionsMutex.Lock()
	defer fake.listStreamingDistributionsMutex.Unlock()
	fake.ListStreamingDistributionsStub = nil
	if fake.listStreamingDistributionsReturnsOnCall == nil {
		fake.listStreamingDistributionsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListStreamingDistributionsOutput
			result2 error
		})
	}
	fake.listStreamingDistributionsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributionsPages(arg1 *cloudfront.ListStreamingDistributionsInput, arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error {
	fake.listStreamingDistributionsPagesMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsPagesReturnsOnCall[len(fake.listStreamingDistributionsPagesArgsForCall)]
	fake.listStreamingDistributionsPagesArgsForCall = append(fake.listStreamingDistributionsPagesArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
		arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.ListStreamingDistributionsPagesStub
	fakeReturns := fake.listStreamingDistributionsPagesReturns
	fake.recordInvocation("ListStreamingDistributionsPages", []interface{}{arg1, arg2})
	fake.listStreamingDistributionsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesCallCount() int {
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	return len(fake.listStreamingDistributionsPagesArgsForCall)
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesCalls(stub func(*cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error) {
	fake.listStreamingDistributionsPagesMutex.Lock()
	defer fake.listStreamingDistributionsPagesMutex.Unlock()
	fake.ListStreamingDistributionsPagesStub = stub
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesArgsForCall(i int) (*cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) {
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	argsForCall := fake.listStreamingDistributionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesReturns(result1 error) {
	fake.listStreamingDistributionsPagesMutex.Lock()
	defer fake.listStreamingDistributionsPagesMutex.Unlock()
	fake.ListStreamingDistributionsPagesStub = nil
	fake.listStreamingDistributionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesReturnsOnCall(i int, result1 error) {
	fake.listStreamingDistributionsPagesMutex.Lock()
	defer fake.listStreamingDistributionsPagesMutex.Unlock()
	fake.ListStreamingDistributionsPagesStub = nil
	if fake.listStreamingDistributionsPagesReturnsOnCall == nil {
		fake.listStreamingDistributionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStreamingDistributionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContext(arg1 context.Context, arg2 *cloudfront.ListStreamingDistributionsInput, arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listStreamingDistributionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsPagesWithContextReturnsOnCall[len(fake.listStreamingDistributionsPagesWithContextArgsForCall)]
	fake.listStreamingDistributionsPagesWithContextArgsForCall = append(fake.listStreamingDistributionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListStreamingDistributionsPagesWithContextStub
	fakeReturns := fake.listStreamingDistributionsPagesWithContextReturns
	fake.recordInvocation("ListStreamingDistributionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listStreamingDistributionsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContextCallCount() int {
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	return len(fake.listStreamingDistributionsPagesWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContextCalls(stub func(context.Context, *cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, ...request.Option) error) {
	fake.listStreamingDistributionsPagesWithContextMutex.Lock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.Unlock()
	fake.ListStreamingDistributionsPagesWithContextStub = stub
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContextArgsForCall(i int) (context.Context, *cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, []request.Option) {
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listStreamingDistributionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContextReturns(result1 error) {
	fake.listStreamingDistributionsPagesWithContextMutex.Lock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.Unlock()
	fake.ListStreamingDistributionsPagesWithContextStub = nil
	fake.listStreamingDistributionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListStreamingDistributionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listStreamingDistributionsPagesWithContextMutex.Lock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.Unlock()
	fake.ListStreamingDistributionsPagesWithContextStub = nil
	if fake.listStreamingDistributionsPagesWithContextReturnsOnCall == nil {
		fake.listStreamingDistributionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStreamingDistributionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequest(arg1 *cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput) {
	fake.listStreamingDistributionsRequestMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsRequestReturnsOnCall[len(fake.listStreamingDistributionsRequestArgsForCall)]
	fake.listStreamingDistributionsRequestArgsForCall = append(fake.listStreamingDistributionsRequestArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}{arg1})
	stub := fake.ListStreamingDistributionsRequestStub
	fakeReturns := fake.listStreamingDistributionsRequestReturns
	fake.recordInvocation("ListStreamingDistributionsRequest", []interface{}{arg1})
	fake.listStreamingDistributionsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequestCallCount() int {
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	return len(fake.listStreamingDistributionsRequestArgsForCall)
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequestCalls(stub func(*cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput)) {
	fake.listStreamingDistributionsRequestMutex.Lock()
	defer fake.listStreamingDistributionsRequestMutex.Unlock()
	fake.ListStreamingDistributionsRequestStub = stub
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequestArgsForCall(i int) *cloudfront.ListStreamingDistributionsInput {
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	argsForCall := fake.listStreamingDistributionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequestReturns(result1 *request.Request, result2 *cloudfront.ListStreamingDistributionsOutput) {
	fake.listStreamingDistributionsRequestMutex.Lock()
	defer fake.listStreamingDistributionsRequestMutex.Unlock()
	fake.ListStreamingDistributionsRequestStub = nil
	fake.listStreamingDistributionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListStreamingDistributionsOutput) {
	fake.listStreamingDistributionsRequestMutex.Lock()
	defer fake.listStreamingDistributionsRequestMutex.Unlock()
	fake.ListStreamingDistributionsRequestStub = nil
	if fake.listStreamingDistributionsRequestReturnsOnCall == nil {
		fake.listStreamingDistributionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListStreamingDistributionsOutput
		})
	}
	fake.listStreamingDistributionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContext(arg1 context.Context, arg2 *cloudfront.ListStreamingDistributionsInput, arg3 ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	fake.listStreamingDistributionsWithContextMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsWithContextReturnsOnCall[len(fake.listStreamingDistributionsWithContextArgsForCall)]
	fake.listStreamingDistributionsWithContextArgsForCall = append(fake.listStreamingDistributionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListStreamingDistributionsWithContextStub
	fakeReturns := fake.listStreamingDistributionsWithContextReturns
	fake.recordInvocation("ListStreamingDistributionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStreamingDistributionsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContextCallCount() int {
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	return len(fake.listStreamingDistributionsWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContextCalls(stub func(context.Context, *cloudfront.ListStreamingDistributionsInput, ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error)) {
	fake.listStreamingDistributionsWithContextMutex.Lock()
	defer fake.listStreamingDistributionsWithContextMutex.Unlock()
	fake.ListStreamingDistributionsWithContextStub = stub
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContextArgsForCall(i int) (context.Context, *cloudfront.ListStreamingDistributionsInput, []request.Option) {
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	argsForCall := fake.listStreamingDistributionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContextReturns(result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.listStreamingDistributionsWithContextMutex.Lock()
	defer fake.listStreamingDistributionsWithContextMutex.Unlock()
	fake.ListStreamingDistributionsWithContextStub = nil
	fake.listStreamingDistributionsWithContextReturns = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListStreamingDistributionsWithContextReturnsOnCall(i int, result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.listStreamingDistributionsWithContextMutex.Lock()
	defer fake.listStreamingDistributionsWithContextMutex.Unlock()
	fake.ListStreamingDistributionsWithContextStub = nil
	if fake.listStreamingDistributionsWithContextReturnsOnCall == nil {
		fake.listStreamingDistributionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListStreamingDistributionsOutput
			result2 error
		})
	}
	fake.listStreamingDistributionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResource(arg1 *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceStub
	fakeReturns := fake.listTagsForResourceReturns
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeCloudfront) ListTagsForResourceCalls(stub func(*cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeCloudfront) ListTagsForResourceArgsForCall(i int) *cloudfront.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListTagsForResourceReturns(result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResourceReturnsOnCall(i int, result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResourceRequest(arg1 *cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}{arg1})
	stub := fake.ListTagsForResourceRequestStub
	fakeReturns := fake.listTagsForResourceRequestReturns
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeCloudfront) ListTagsForResourceRequestCalls(stub func(*cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeCloudfront) ListTagsForResourceRequestArgsForCall(i int) *cloudfront.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *cloudfront.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResourceWithContext(arg1 context.Context, arg2 *cloudfront.ListTagsForResourceInput, arg3 ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeCloudfront) ListTagsForResourceWithContextCalls(stub func(context.Context, *cloudfront.ListTagsForResourceInput, ...request.Option) (*cloudfront.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeCloudfront) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *cloudfront.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) ListTagsForResourceWithContextReturns(result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunction(arg1 *cloudfront.PublishFunctionInput) (*cloudfront.PublishFunctionOutput, error) {
	fake.publishFunctionMutex.Lock()
	ret, specificReturn := fake.publishFunctionReturnsOnCall[len(fake.publishFunctionArgsForCall)]
	fake.publishFunctionArgsForCall = append(fake.publishFunctionArgsForCall, struct {
		arg1 *cloudfront.PublishFunctionInput
	}{arg1})
	stub := fake.PublishFunctionStub
	fakeReturns := fake.publishFunctionReturns
	fake.recordInvocation("PublishFunction", []interface{}{arg1})
	fake.publishFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) PublishFunctionCallCount() int {
	fake.publishFunctionMutex.RLock()
	defer fake.publishFunctionMutex.RUnlock()
	return len(fake.publishFunctionArgsForCall)
}

func (fake *FakeCloudfront) PublishFunctionCalls(stub func(*cloudfront.PublishFunctionInput) (*cloudfront.PublishFunctionOutput, error)) {
	fake.publishFunctionMutex.Lock()
	defer fake.publishFunctionMutex.Unlock()
	fake.PublishFunctionStub = stub
}

func (fake *FakeCloudfront) PublishFunctionArgsForCall(i int) *cloudfront.PublishFunctionInput {
	fake.publishFunctionMutex.RLock()
	defer fake.publishFunctionMutex.RUnlock()
	argsForCall := fake.publishFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) PublishFunctionReturns(result1 *cloudfront.PublishFunctionOutput, result2 error) {
	fake.publishFunctionMutex.Lock()
	defer fake.publishFunctionMutex.Unlock()
	fake.PublishFunctionStub = nil
	fake.publishFunctionReturns = struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunctionReturnsOnCall(i int, result1 *cloudfront.PublishFunctionOutput, result2 error) {
	fake.publishFunctionMutex.Lock()
	defer fake.publishFunctionMutex.Unlock()
	fake.PublishFunctionStub = nil
	if fake.publishFunctionReturnsOnCall == nil {
		fake.publishFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.PublishFunctionOutput
			result2 error
		})
	}
	fake.publishFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunctionRequest(arg1 *cloudfront.PublishFunctionInput) (*request.Request, *cloudfront.PublishFunctionOutput) {
	fake.publishFunctionRequestMutex.Lock()
	ret, specificReturn := fake.publishFunctionRequestReturnsOnCall[len(fake.publishFunctionRequestArgsForCall)]
	fake.publishFunctionRequestArgsForCall = append(fake.publishFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.PublishFunctionInput
	}{arg1})
	stub := fake.PublishFunctionRequestStub
	fakeReturns := fake.publishFunctionRequestReturns
	fake.recordInvocation("PublishFunctionRequest", []interface{}{arg1})
	fake.publishFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) PublishFunctionRequestCallCount() int {
	fake.publishFunctionRequestMutex.RLock()
	defer fake.publishFunctionRequestMutex.RUnlock()
	return len(fake.publishFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) PublishFunctionRequestCalls(stub func(*cloudfront.PublishFunctionInput) (*request.Request, *cloudfront.PublishFunctionOutput)) {
	fake.publishFunctionRequestMutex.Lock()
	defer fake.publishFunctionRequestMutex.Unlock()
	fake.PublishFunctionRequestStub = stub
}

func (fake *FakeCloudfront) PublishFunctionRequestArgsForCall(i int) *cloudfront.PublishFunctionInput {
	fake.publishFunctionRequestMutex.RLock()
	defer fake.publishFunctionRequestMutex.RUnlock()
	argsForCall := fake.publishFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) PublishFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.PublishFunctionOutput) {
	fake.publishFunctionRequestMutex.Lock()
	defer fake.publishFunctionRequestMutex.Unlock()
	fake.PublishFunctionRequestStub = nil
	fake.publishFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.PublishFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.PublishFunctionOutput) {
	fake.publishFunctionRequestMutex.Lock()
	defer fake.publishFunctionRequestMutex.Unlock()
	fake.PublishFunctionRequestStub = nil
	if fake.publishFunctionRequestReturnsOnCall == nil {
		fake.publishFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.PublishFunctionOutput
		})
	}
	fake.publishFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.PublishFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunctionWithContext(arg1 context.Context, arg2 *cloudfront.PublishFunctionInput, arg3 ...request.Option) (*cloudfront.PublishFunctionOutput, error) {
	fake.publishFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.publishFunctionWithContextReturnsOnCall[len(fake.publishFunctionWithContextArgsForCall)]
	fake.publishFunctionWithContextArgsForCall = append(fake.publishFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.PublishFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.PublishFunctionWithContextStub
	fakeReturns := fake.publishFunctionWithContextReturns
	fake.recordInvocation("PublishFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.publishFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) PublishFunctionWithContextCallCount() int {
	fake.publishFunctionWithContextMutex.RLock()
	defer fake.publishFunctionWithContextMutex.RUnlock()
	return len(fake.publishFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) PublishFunctionWithContextCalls(stub func(context.Context, *cloudfront.PublishFunctionInput, ...request.Option) (*cloudfront.PublishFunctionOutput, error)) {
	fake.publishFunctionWithContextMutex.Lock()
	defer fake.publishFunctionWithContextMutex.Unlock()
	fake.PublishFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) PublishFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.PublishFunctionInput, []request.Option) {
	fake.publishFunctionWithContextMutex.RLock()
	defer fake.publishFunctionWithContextMutex.RUnlock()
	argsForCall := fake.publishFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) PublishFunctionWithContextReturns(result1 *cloudfront.PublishFunctionOutput, result2 error) {
	fake.publishFunctionWithContextMutex.Lock()
	defer fake.publishFunctionWithContextMutex.Unlock()
	fake.PublishFunctionWithContextStub = nil
	fake.publishFunctionWithContextReturns = struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) PublishFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.PublishFunctionOutput, result2 error) {
	fake.publishFunctionWithContextMutex.Lock()
	defer fake.publishFunctionWithContextMutex.Unlock()
	fake.PublishFunctionWithContextStub = nil
	if fake.publishFunctionWithContextReturnsOnCall == nil {
		fake.publishFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.PublishFunctionOutput
			result2 error
		})
	}
	fake.publishFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.PublishFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResource(arg1 *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *cloudfront.TagResourceInput
	}{arg1})
	stub := fake.TagResourceStub
	fakeReturns := fake.tagResourceReturns
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeCloudfront) TagResourceCalls(stub func(*cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error)) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = stub
}

func (fake *FakeCloudfront) TagResourceArgsForCall(i int) *cloudfront.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	argsForCall := fake.tagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) TagResourceReturns(result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResourceReturnsOnCall(i int, result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResourceRequest(arg1 *cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *cloudfront.TagResourceInput
	}{arg1})
	stub := fake.TagResourceRequestStub
	fakeReturns := fake.tagResourceRequestReturns
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeCloudfront) TagResourceRequestCalls(stub func(*cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput)) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = stub
}

func (fake *FakeCloudfront) TagResourceRequestArgsForCall(i int) *cloudfront.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	argsForCall := fake.tagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) TagResourceRequestReturns(result1 *request.Request, result2 *cloudfront.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResourceWithContext(arg1 context.Context, arg2 *cloudfront.TagResourceInput, arg3 ...request.Option) (*cloudfront.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TagResourceWithContextStub
	fakeReturns := fake.tagResourceWithContextReturns
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeCloudfront) TagResourceWithContextCalls(stub func(context.Context, *cloudfront.TagResourceInput, ...request.Option) (*cloudfront.TagResourceOutput, error)) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = stub
}

func (fake *FakeCloudfront) TagResourceWithContextArgsForCall(i int) (context.Context, *cloudfront.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	argsForCall := fake.tagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) TagResourceWithContextReturns(result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TagResourceWithContextReturnsOnCall(i int, result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunction(arg1 *cloudfront.TestFunctionInput) (*cloudfront.TestFunctionOutput, error) {
	fake.testFunctionMutex.Lock()
	ret, specificReturn := fake.testFunctionReturnsOnCall[len(fake.testFunctionArgsForCall)]
	fake.testFunctionArgsForCall = append(fake.testFunctionArgsForCall, struct {
		arg1 *cloudfront.TestFunctionInput
	}{arg1})
	stub := fake.TestFunctionStub
	fakeReturns := fake.testFunctionReturns
	fake.recordInvocation("TestFunction", []interface{}{arg1})
	fake.testFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TestFunctionCallCount() int {
	fake.testFunctionMutex.RLock()
	defer fake.testFunctionMutex.RUnlock()
	return len(fake.testFunctionArgsForCall)
}

func (fake *FakeCloudfront) TestFunctionCalls(stub func(*cloudfront.TestFunctionInput) (*cloudfront.TestFunctionOutput, error)) {
	fake.testFunctionMutex.Lock()
	defer fake.testFunctionMutex.Unlock()
	fake.TestFunctionStub = stub
}

func (fake *FakeCloudfront) TestFunctionArgsForCall(i int) *cloudfront.TestFunctionInput {
	fake.testFunctionMutex.RLock()
	defer fake.testFunctionMutex.RUnlock()
	argsForCall := fake.testFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) TestFunctionReturns(result1 *cloudfront.TestFunctionOutput, result2 error) {
	fake.testFunctionMutex.Lock()
	defer fake.testFunctionMutex.Unlock()
	fake.TestFunctionStub = nil
	fake.testFunctionReturns = struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunctionReturnsOnCall(i int, result1 *cloudfront.TestFunctionOutput, result2 error) {
	fake.testFunctionMutex.Lock()
	defer fake.testFunctionMutex.Unlock()
	fake.TestFunctionStub = nil
	if fake.testFunctionReturnsOnCall == nil {
		fake.testFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TestFunctionOutput
			result2 error
		})
	}
	fake.testFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunctionRequest(arg1 *cloudfront.TestFunctionInput) (*request.Request, *cloudfront.TestFunctionOutput) {
	fake.testFunctionRequestMutex.Lock()
	ret, specificReturn := fake.testFunctionRequestReturnsOnCall[len(fake.testFunctionRequestArgsForCall)]
	fake.testFunctionRequestArgsForCall = append(fake.testFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.TestFunctionInput
	}{arg1})
	stub := fake.TestFunctionRequestStub
	fakeReturns := fake.testFunctionRequestReturns
	fake.recordInvocation("TestFunctionRequest", []interface{}{arg1})
	fake.testFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TestFunctionRequestCallCount() int {
	fake.testFunctionRequestMutex.RLock()
	defer fake.testFunctionRequestMutex.RUnlock()
	return len(fake.testFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) TestFunctionRequestCalls(stub func(*cloudfront.TestFunctionInput) (*request.Request, *cloudfront.TestFunctionOutput)) {
	fake.testFunctionRequestMutex.Lock()
	defer fake.testFunctionRequestMutex.Unlock()
	fake.TestFunctionRequestStub = stub
}

func (fake *FakeCloudfront) TestFunctionRequestArgsForCall(i int) *cloudfront.TestFunctionInput {
	fake.testFunctionRequestMutex.RLock()
	defer fake.testFunctionRequestMutex.RUnlock()
	argsForCall := fake.testFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) TestFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.TestFunctionOutput) {
	fake.testFunctionRequestMutex.Lock()
	defer fake.testFunctionRequestMutex.Unlock()
	fake.TestFunctionRequestStub = nil
	fake.testFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.TestFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.TestFunctionOutput) {
	fake.testFunctionRequestMutex.Lock()
	defer fake.testFunctionRequestMutex.Unlock()
	fake.TestFunctionRequestStub = nil
	if fake.testFunctionRequestReturnsOnCall == nil {
		fake.testFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.TestFunctionOutput
		})
	}
	fake.testFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.TestFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunctionWithContext(arg1 context.Context, arg2 *cloudfront.TestFunctionInput, arg3 ...request.Option) (*cloudfront.TestFunctionOutput, error) {
	fake.testFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.testFunctionWithContextReturnsOnCall[len(fake.testFunctionWithContextArgsForCall)]
	fake.testFunctionWithContextArgsForCall = append(fake.testFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.TestFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TestFunctionWithContextStub
	fakeReturns := fake.testFunctionWithContextReturns
	fake.recordInvocation("TestFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.testFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) TestFunctionWithContextCallCount() int {
	fake.testFunctionWithContextMutex.RLock()
	defer fake.testFunctionWithContextMutex.RUnlock()
	return len(fake.testFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) TestFunctionWithContextCalls(stub func(context.Context, *cloudfront.TestFunctionInput, ...request.Option) (*cloudfront.TestFunctionOutput, error)) {
	fake.testFunctionWithContextMutex.Lock()
	defer fake.testFunctionWithContextMutex.Unlock()
	fake.TestFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) TestFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.TestFunctionInput, []request.Option) {
	fake.testFunctionWithContextMutex.RLock()
	defer fake.testFunctionWithContextMutex.RUnlock()
	argsForCall := fake.testFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) TestFunctionWithContextReturns(result1 *cloudfront.TestFunctionOutput, result2 error) {
	fake.testFunctionWithContextMutex.Lock()
	defer fake.testFunctionWithContextMutex.Unlock()
	fake.TestFunctionWithContextStub = nil
	fake.testFunctionWithContextReturns = struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) TestFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.TestFunctionOutput, result2 error) {
	fake.testFunctionWithContextMutex.Lock()
	defer fake.testFunctionWithContextMutex.Unlock()
	fake.TestFunctionWithContextStub = nil
	if fake.testFunctionWithContextReturnsOnCall == nil {
		fake.testFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TestFunctionOutput
			result2 error
		})
	}
	fake.testFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.TestFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResource(arg1 *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *cloudfront.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceStub
	fakeReturns := fake.untagResourceReturns
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeCloudfront) UntagResourceCalls(stub func(*cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error)) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = stub
}

func (fake *FakeCloudfront) UntagResourceArgsForCall(i int) *cloudfront.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	argsForCall := fake.untagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UntagResourceReturns(result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResourceReturnsOnCall(i int, result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResourceRequest(arg1 *cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *cloudfront.UntagResourceInput
	}{arg1})
	stub := fake.UntagResourceRequestStub
	fakeReturns := fake.untagResourceRequestReturns
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeCloudfront) UntagResourceRequestCalls(stub func(*cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput)) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = stub
}

func (fake *FakeCloudfront) UntagResourceRequestArgsForCall(i int) *cloudfront.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	argsForCall := fake.untagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UntagResourceRequestReturns(result1 *request.Request, result2 *cloudfront.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResourceWithContext(arg1 context.Context, arg2 *cloudfront.UntagResourceInput, arg3 ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UntagResourceWithContextStub
	fakeReturns := fake.untagResourceWithContextReturns
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeCloudfront) UntagResourceWithContextCalls(stub func(context.Context, *cloudfront.UntagResourceInput, ...request.Option) (*cloudfront.UntagResourceOutput, error)) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = stub
}

func (fake *FakeCloudfront) UntagResourceWithContextArgsForCall(i int) (context.Context, *cloudfront.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	argsForCall := fake.untagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UntagResourceWithContextReturns(result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UntagResourceWithContextReturnsOnCall(i int, result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicy(arg1 *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	fake.updateCachePolicyMutex.Lock()
	ret, specificReturn := fake.updateCachePolicyReturnsOnCall[len(fake.updateCachePolicyArgsForCall)]
	fake.updateCachePolicyArgsForCall = append(fake.updateCachePolicyArgsForCall, struct {
		arg1 *cloudfront.UpdateCachePolicyInput
	}{arg1})
	stub := fake.UpdateCachePolicyStub
	fakeReturns := fake.updateCachePolicyReturns
	fake.recordInvocation("UpdateCachePolicy", []interface{}{arg1})
	fake.updateCachePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCachePolicyCallCount() int {
	fake.updateCachePolicyMutex.RLock()
	defer fake.updateCachePolicyMutex.RUnlock()
	return len(fake.updateCachePolicyArgsForCall)
}

func (fake *FakeCloudfront) UpdateCachePolicyCalls(stub func(*cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error)) {
	fake.updateCachePolicyMutex.Lock()
	defer fake.updateCachePolicyMutex.Unlock()
	fake.UpdateCachePolicyStub = stub
}

func (fake *FakeCloudfront) UpdateCachePolicyArgsForCall(i int) *cloudfront.UpdateCachePolicyInput {
	fake.updateCachePolicyMutex.RLock()
	defer fake.updateCachePolicyMutex.RUnlock()
	argsForCall := fake.updateCachePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateCachePolicyReturns(result1 *cloudfront.UpdateCachePolicyOutput, result2 error) {
	fake.updateCachePolicyMutex.Lock()
	defer fake.updateCachePolicyMutex.Unlock()
	fake.UpdateCachePolicyStub = nil
	fake.updateCachePolicyReturns = struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicyReturnsOnCall(i int, result1 *cloudfront.UpdateCachePolicyOutput, result2 error) {
	fake.updateCachePolicyMutex.Lock()
	defer fake.updateCachePolicyMutex.Unlock()
	fake.UpdateCachePolicyStub = nil
	if fake.updateCachePolicyReturnsOnCall == nil {
		fake.updateCachePolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCachePolicyOutput
			result2 error
		})
	}
	fake.updateCachePolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicyRequest(arg1 *cloudfront.UpdateCachePolicyInput) (*request.Request, *cloudfront.UpdateCachePolicyOutput) {
	fake.updateCachePolicyRequestMutex.Lock()
	ret, specificReturn := fake.updateCachePolicyRequestReturnsOnCall[len(fake.updateCachePolicyRequestArgsForCall)]
	fake.updateCachePolicyRequestArgsForCall = append(fake.updateCachePolicyRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateCachePolicyInput
	}{arg1})
	stub := fake.UpdateCachePolicyRequestStub
	fakeReturns := fake.updateCachePolicyRequestReturns
	fake.recordInvocation("UpdateCachePolicyRequest", []interface{}{arg1})
	fake.updateCachePolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCachePolicyRequestCallCount() int {
	fake.updateCachePolicyRequestMutex.RLock()
	defer fake.updateCachePolicyRequestMutex.RUnlock()
	return len(fake.updateCachePolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateCachePolicyRequestCalls(stub func(*cloudfront.UpdateCachePolicyInput) (*request.Request, *cloudfront.UpdateCachePolicyOutput)) {
	fake.updateCachePolicyRequestMutex.Lock()
	defer fake.updateCachePolicyRequestMutex.Unlock()
	fake.UpdateCachePolicyRequestStub = stub
}

func (fake *FakeCloudfront) UpdateCachePolicyRequestArgsForCall(i int) *cloudfront.UpdateCachePolicyInput {
	fake.updateCachePolicyRequestMutex.RLock()
	defer fake.updateCachePolicyRequestMutex.RUnlock()
	argsForCall := fake.updateCachePolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateCachePolicyRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateCachePolicyOutput) {
	fake.updateCachePolicyRequestMutex.Lock()
	defer fake.updateCachePolicyRequestMutex.Unlock()
	fake.UpdateCachePolicyRequestStub = nil
	fake.updateCachePolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateCachePolicyOutput) {
	fake.updateCachePolicyRequestMutex.Lock()
	defer fake.updateCachePolicyRequestMutex.Unlock()
	fake.UpdateCachePolicyRequestStub = nil
	if fake.updateCachePolicyRequestReturnsOnCall == nil {
		fake.updateCachePolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateCachePolicyOutput
		})
	}
	fake.updateCachePolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCachePolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContext(arg1 context.Context, arg2 *cloudfront.UpdateCachePolicyInput, arg3 ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error) {
	fake.updateCachePolicyWithContextMutex.Lock()
	ret, specificReturn := fake.updateCachePolicyWithContextReturnsOnCall[len(fake.updateCachePolicyWithContextArgsForCall)]
	fake.updateCachePolicyWithContextArgsForCall = append(fake.updateCachePolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateCachePolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateCachePolicyWithContextStub
	fakeReturns := fake.updateCachePolicyWithContextReturns
	fake.recordInvocation("UpdateCachePolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateCachePolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContextCallCount() int {
	fake.updateCachePolicyWithContextMutex.RLock()
	defer fake.updateCachePolicyWithContextMutex.RUnlock()
	return len(fake.updateCachePolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContextCalls(stub func(context.Context, *cloudfront.UpdateCachePolicyInput, ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error)) {
	fake.updateCachePolicyWithContextMutex.Lock()
	defer fake.updateCachePolicyWithContextMutex.Unlock()
	fake.UpdateCachePolicyWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateCachePolicyInput, []request.Option) {
	fake.updateCachePolicyWithContextMutex.RLock()
	defer fake.updateCachePolicyWithContextMutex.RUnlock()
	argsForCall := fake.updateCachePolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContextReturns(result1 *cloudfront.UpdateCachePolicyOutput, result2 error) {
	fake.updateCachePolicyWithContextMutex.Lock()
	defer fake.updateCachePolicyWithContextMutex.Unlock()
	fake.UpdateCachePolicyWithContextStub = nil
	fake.updateCachePolicyWithContextReturns = struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCachePolicyWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateCachePolicyOutput, result2 error) {
	fake.updateCachePolicyWithContextMutex.Lock()
	defer fake.updateCachePolicyWithContextMutex.Unlock()
	fake.UpdateCachePolicyWithContextStub = nil
	if fake.updateCachePolicyWithContextReturnsOnCall == nil {
		fake.updateCachePolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCachePolicyOutput
			result2 error
		})
	}
	fake.updateCachePolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCachePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentity(arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	fake.updateCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.UpdateCloudFrontOriginAccessIdentityStub
	fakeReturns := fake.updateCloudFrontOriginAccessIdentityReturns
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.updateCloudFrontOriginAccessIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityCalls(stub func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)) {
	fake.updateCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityStub = stub
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.UpdateCloudFrontOriginAccessIdentityInput {
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	argsForCall := fake.updateCloudFrontOriginAccessIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.updateCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityStub = nil
	fake.updateCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.updateCloudFrontOriginAccessIdentityMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityStub = nil
	if fake.updateCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.updateCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}{arg1})
	stub := fake.UpdateCloudFrontOriginAccessIdentityRequestStub
	fakeReturns := fake.updateCloudFrontOriginAccessIdentityRequestReturns
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequestCalls(stub func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)) {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityRequestStub = stub
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.UpdateCloudFrontOriginAccessIdentityInput {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	argsForCall := fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityRequestStub = nil
	fake.updateCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContext(arg1 context.Context, arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateCloudFrontOriginAccessIdentityWithContextStub
	fakeReturns := fake.updateCloudFrontOriginAccessIdentityWithContextReturns
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContextCalls(stub func(context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	argsForCall := fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.updateCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	fake.UpdateCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistribution(arg1 *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	fake.updateDistributionMutex.Lock()
	ret, specificReturn := fake.updateDistributionReturnsOnCall[len(fake.updateDistributionArgsForCall)]
	fake.updateDistributionArgsForCall = append(fake.updateDistributionArgsForCall, struct {
		arg1 *cloudfront.UpdateDistributionInput
	}{arg1})
	stub := fake.UpdateDistributionStub
	fakeReturns := fake.updateDistributionReturns
	fake.recordInvocation("UpdateDistribution", []interface{}{arg1})
	fake.updateDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateDistributionCallCount() int {
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	return len(fake.updateDistributionArgsForCall)
}

func (fake *FakeCloudfront) UpdateDistributionCalls(stub func(*cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error)) {
	fake.updateDistributionMutex.Lock()
	defer fake.updateDistributionMutex.Unlock()
	fake.UpdateDistributionStub = stub
}

func (fake *FakeCloudfront) UpdateDistributionArgsForCall(i int) *cloudfront.UpdateDistributionInput {
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	argsForCall := fake.updateDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateDistributionReturns(result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.updateDistributionMutex.Lock()
	defer fake.updateDistributionMutex.Unlock()
	fake.UpdateDistributionStub = nil
	fake.updateDistributionReturns = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistributionReturnsOnCall(i int, result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.updateDistributionMutex.Lock()
	defer fake.updateDistributionMutex.Unlock()
	fake.UpdateDistributionStub = nil
	if fake.updateDistributionReturnsOnCall == nil {
		fake.updateDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateDistributionOutput
			result2 error
		})
	}
	fake.updateDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistributionRequest(arg1 *cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput) {
	fake.updateDistributionRequestMutex.Lock()
	ret, specificReturn := fake.updateDistributionRequestReturnsOnCall[len(fake.updateDistributionRequestArgsForCall)]
	fake.updateDistributionRequestArgsForCall = append(fake.updateDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateDistributionInput
	}{arg1})
	stub := fake.UpdateDistributionRequestStub
	fakeReturns := fake.updateDistributionRequestReturns
	fake.recordInvocation("UpdateDistributionRequest", []interface{}{arg1})
	fake.updateDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateDistributionRequestCallCount() int {
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	return len(fake.updateDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateDistributionRequestCalls(stub func(*cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput)) {
	fake.updateDistributionRequestMutex.Lock()
	defer fake.updateDistributionRequestMutex.Unlock()
	fake.UpdateDistributionRequestStub = stub
}

func (fake *FakeCloudfront) UpdateDistributionRequestArgsForCall(i int) *cloudfront.UpdateDistributionInput {
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	argsForCall := fake.updateDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateDistributionOutput) {
	fake.updateDistributionRequestMutex.Lock()
	defer fake.updateDistributionRequestMutex.Unlock()
	fake.UpdateDistributionRequestStub = nil
	fake.updateDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateDistributionOutput) {
	fake.updateDistributionRequestMutex.Lock()
	defer fake.updateDistributionRequestMutex.Unlock()
	fake.UpdateDistributionRequestStub = nil
	if fake.updateDistributionRequestReturnsOnCall == nil {
		fake.updateDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateDistributionOutput
		})
	}
	fake.updateDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistributionWithContext(arg1 context.Context, arg2 *cloudfront.UpdateDistributionInput, arg3 ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	fake.updateDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.updateDistributionWithContextReturnsOnCall[len(fake.updateDistributionWithContextArgsForCall)]
	fake.updateDistributionWithContextArgsForCall = append(fake.updateDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateDistributionWithContextStub
	fakeReturns := fake.updateDistributionWithContextReturns
	fake.recordInvocation("UpdateDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateDistributionWithContextCallCount() int {
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	return len(fake.updateDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateDistributionWithContextCalls(stub func(context.Context, *cloudfront.UpdateDistributionInput, ...request.Option) (*cloudfront.UpdateDistributionOutput, error)) {
	fake.updateDistributionWithContextMutex.Lock()
	defer fake.updateDistributionWithContextMutex.Unlock()
	fake.UpdateDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateDistributionInput, []request.Option) {
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	argsForCall := fake.updateDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateDistributionWithContextReturns(result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.updateDistributionWithContextMutex.Lock()
	defer fake.updateDistributionWithContextMutex.Unlock()
	fake.UpdateDistributionWithContextStub = nil
	fake.updateDistributionWithContextReturns = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.updateDistributionWithContextMutex.Lock()
	defer fake.updateDistributionWithContextMutex.Unlock()
	fake.UpdateDistributionWithContextStub = nil
	if fake.updateDistributionWithContextReturnsOnCall == nil {
		fake.updateDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateDistributionOutput
			result2 error
		})
	}
	fake.updateDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfig(arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	fake.updateFieldLevelEncryptionConfigMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionConfigReturnsOnCall[len(fake.updateFieldLevelEncryptionConfigArgsForCall)]
	fake.updateFieldLevelEncryptionConfigArgsForCall = append(fake.updateFieldLevelEncryptionConfigArgsForCall, struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.UpdateFieldLevelEncryptionConfigStub
	fakeReturns := fake.updateFieldLevelEncryptionConfigReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionConfig", []interface{}{arg1})
	fake.updateFieldLevelEncryptionConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigCallCount() int {
	fake.updateFieldLevelEncryptionConfigMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionConfigArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigCalls(stub func(*cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)) {
	fake.updateFieldLevelEncryptionConfigMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigArgsForCall(i int) *cloudfront.UpdateFieldLevelEncryptionConfigInput {
	fake.updateFieldLevelEncryptionConfigMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigReturns(result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.updateFieldLevelEncryptionConfigMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigStub = nil
	fake.updateFieldLevelEncryptionConfigReturns = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigReturnsOnCall(i int, result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.updateFieldLevelEncryptionConfigMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigStub = nil
	if fake.updateFieldLevelEncryptionConfigReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.updateFieldLevelEncryptionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequest(arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	fake.updateFieldLevelEncryptionConfigRequestMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionConfigRequestReturnsOnCall[len(fake.updateFieldLevelEncryptionConfigRequestArgsForCall)]
	fake.updateFieldLevelEncryptionConfigRequestArgsForCall = append(fake.updateFieldLevelEncryptionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput
	}{arg1})
	stub := fake.UpdateFieldLevelEncryptionConfigRequestStub
	fakeReturns := fake.updateFieldLevelEncryptionConfigRequestReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionConfigRequest", []interface{}{arg1})
	fake.updateFieldLevelEncryptionConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequestCallCount() int {
	fake.updateFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequestCalls(stub func(*cloudfront.UpdateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionConfigOutput)) {
	fake.updateFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigRequestStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequestArgsForCall(i int) *cloudfront.UpdateFieldLevelEncryptionConfigInput {
	fake.updateFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	fake.updateFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigRequestStub = nil
	fake.updateFieldLevelEncryptionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	fake.updateFieldLevelEncryptionConfigRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigRequestStub = nil
	if fake.updateFieldLevelEncryptionConfigRequestReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		})
	}
	fake.updateFieldLevelEncryptionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContext(arg1 context.Context, arg2 *cloudfront.UpdateFieldLevelEncryptionConfigInput, arg3 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionConfigWithContextReturnsOnCall[len(fake.updateFieldLevelEncryptionConfigWithContextArgsForCall)]
	fake.updateFieldLevelEncryptionConfigWithContextArgsForCall = append(fake.updateFieldLevelEncryptionConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFieldLevelEncryptionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateFieldLevelEncryptionConfigWithContextStub
	fakeReturns := fake.updateFieldLevelEncryptionConfigWithContextReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateFieldLevelEncryptionConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContextCallCount() int {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContextCalls(stub func(context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)) {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, []request.Option) {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContextReturns(result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigWithContextStub = nil
	fake.updateFieldLevelEncryptionConfigWithContextReturns = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput, result2 error) {
	fake.updateFieldLevelEncryptionConfigWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionConfigWithContextStub = nil
	if fake.updateFieldLevelEncryptionConfigWithContextReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
			result2 error
		})
	}
	fake.updateFieldLevelEncryptionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfile(arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	fake.updateFieldLevelEncryptionProfileMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionProfileReturnsOnCall[len(fake.updateFieldLevelEncryptionProfileArgsForCall)]
	fake.updateFieldLevelEncryptionProfileArgsForCall = append(fake.updateFieldLevelEncryptionProfileArgsForCall, struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.UpdateFieldLevelEncryptionProfileStub
	fakeReturns := fake.updateFieldLevelEncryptionProfileReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionProfile", []interface{}{arg1})
	fake.updateFieldLevelEncryptionProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileCallCount() int {
	fake.updateFieldLevelEncryptionProfileMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionProfileArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileCalls(stub func(*cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)) {
	fake.updateFieldLevelEncryptionProfileMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileArgsForCall(i int) *cloudfront.UpdateFieldLevelEncryptionProfileInput {
	fake.updateFieldLevelEncryptionProfileMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileReturns(result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.updateFieldLevelEncryptionProfileMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileStub = nil
	fake.updateFieldLevelEncryptionProfileReturns = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileReturnsOnCall(i int, result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.updateFieldLevelEncryptionProfileMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileStub = nil
	if fake.updateFieldLevelEncryptionProfileReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionProfileReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.updateFieldLevelEncryptionProfileReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequest(arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	fake.updateFieldLevelEncryptionProfileRequestMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionProfileRequestReturnsOnCall[len(fake.updateFieldLevelEncryptionProfileRequestArgsForCall)]
	fake.updateFieldLevelEncryptionProfileRequestArgsForCall = append(fake.updateFieldLevelEncryptionProfileRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput
	}{arg1})
	stub := fake.UpdateFieldLevelEncryptionProfileRequestStub
	fakeReturns := fake.updateFieldLevelEncryptionProfileRequestReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionProfileRequest", []interface{}{arg1})
	fake.updateFieldLevelEncryptionProfileRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequestCallCount() int {
	fake.updateFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionProfileRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequestCalls(stub func(*cloudfront.UpdateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionProfileOutput)) {
	fake.updateFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileRequestStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequestArgsForCall(i int) *cloudfront.UpdateFieldLevelEncryptionProfileInput {
	fake.updateFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	fake.updateFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileRequestStub = nil
	fake.updateFieldLevelEncryptionProfileRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	fake.updateFieldLevelEncryptionProfileRequestMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileRequestStub = nil
	if fake.updateFieldLevelEncryptionProfileRequestReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		})
	}
	fake.updateFieldLevelEncryptionProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContext(arg1 context.Context, arg2 *cloudfront.UpdateFieldLevelEncryptionProfileInput, arg3 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.Lock()
	ret, specificReturn := fake.updateFieldLevelEncryptionProfileWithContextReturnsOnCall[len(fake.updateFieldLevelEncryptionProfileWithContextArgsForCall)]
	fake.updateFieldLevelEncryptionProfileWithContextArgsForCall = append(fake.updateFieldLevelEncryptionProfileWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFieldLevelEncryptionProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateFieldLevelEncryptionProfileWithContextStub
	fakeReturns := fake.updateFieldLevelEncryptionProfileWithContextReturns
	fake.recordInvocation("UpdateFieldLevelEncryptionProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateFieldLevelEncryptionProfileWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContextCallCount() int {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	return len(fake.updateFieldLevelEncryptionProfileWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContextCalls(stub func(context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)) {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, []request.Option) {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	argsForCall := fake.updateFieldLevelEncryptionProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContextReturns(result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileWithContextStub = nil
	fake.updateFieldLevelEncryptionProfileWithContextReturns = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFieldLevelEncryptionProfileWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput, result2 error) {
	fake.updateFieldLevelEncryptionProfileWithContextMutex.Lock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.Unlock()
	fake.UpdateFieldLevelEncryptionProfileWithContextStub = nil
	if fake.updateFieldLevelEncryptionProfileWithContextReturnsOnCall == nil {
		fake.updateFieldLevelEncryptionProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
			result2 error
		})
	}
	fake.updateFieldLevelEncryptionProfileWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunction(arg1 *cloudfront.UpdateFunctionInput) (*cloudfront.UpdateFunctionOutput, error) {
	fake.updateFunctionMutex.Lock()
	ret, specificReturn := fake.updateFunctionReturnsOnCall[len(fake.updateFunctionArgsForCall)]
	fake.updateFunctionArgsForCall = append(fake.updateFunctionArgsForCall, struct {
		arg1 *cloudfront.UpdateFunctionInput
	}{arg1})
	stub := fake.UpdateFunctionStub
	fakeReturns := fake.updateFunctionReturns
	fake.recordInvocation("UpdateFunction", []interface{}{arg1})
	fake.updateFunctionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFunctionCallCount() int {
	fake.updateFunctionMutex.RLock()
	defer fake.updateFunctionMutex.RUnlock()
	return len(fake.updateFunctionArgsForCall)
}

func (fake *FakeCloudfront) UpdateFunctionCalls(stub func(*cloudfront.UpdateFunctionInput) (*cloudfront.UpdateFunctionOutput, error)) {
	fake.updateFunctionMutex.Lock()
	defer fake.updateFunctionMutex.Unlock()
	fake.UpdateFunctionStub = stub
}

func (fake *FakeCloudfront) UpdateFunctionArgsForCall(i int) *cloudfront.UpdateFunctionInput {
	fake.updateFunctionMutex.RLock()
	defer fake.updateFunctionMutex.RUnlock()
	argsForCall := fake.updateFunctionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFunctionReturns(result1 *cloudfront.UpdateFunctionOutput, result2 error) {
	fake.updateFunctionMutex.Lock()
	defer fake.updateFunctionMutex.Unlock()
	fake.UpdateFunctionStub = nil
	fake.updateFunctionReturns = struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunctionReturnsOnCall(i int, result1 *cloudfront.UpdateFunctionOutput, result2 error) {
	fake.updateFunctionMutex.Lock()
	defer fake.updateFunctionMutex.Unlock()
	fake.UpdateFunctionStub = nil
	if fake.updateFunctionReturnsOnCall == nil {
		fake.updateFunctionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFunctionOutput
			result2 error
		})
	}
	fake.updateFunctionReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunctionRequest(arg1 *cloudfront.UpdateFunctionInput) (*request.Request, *cloudfront.UpdateFunctionOutput) {
	fake.updateFunctionRequestMutex.Lock()
	ret, specificReturn := fake.updateFunctionRequestReturnsOnCall[len(fake.updateFunctionRequestArgsForCall)]
	fake.updateFunctionRequestArgsForCall = append(fake.updateFunctionRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateFunctionInput
	}{arg1})
	stub := fake.UpdateFunctionRequestStub
	fakeReturns := fake.updateFunctionRequestReturns
	fake.recordInvocation("UpdateFunctionRequest", []interface{}{arg1})
	fake.updateFunctionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFunctionRequestCallCount() int {
	fake.updateFunctionRequestMutex.RLock()
	defer fake.updateFunctionRequestMutex.RUnlock()
	return len(fake.updateFunctionRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateFunctionRequestCalls(stub func(*cloudfront.UpdateFunctionInput) (*request.Request, *cloudfront.UpdateFunctionOutput)) {
	fake.updateFunctionRequestMutex.Lock()
	defer fake.updateFunctionRequestMutex.Unlock()
	fake.UpdateFunctionRequestStub = stub
}

func (fake *FakeCloudfront) UpdateFunctionRequestArgsForCall(i int) *cloudfront.UpdateFunctionInput {
	fake.updateFunctionRequestMutex.RLock()
	defer fake.updateFunctionRequestMutex.RUnlock()
	argsForCall := fake.updateFunctionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateFunctionRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateFunctionOutput) {
	fake.updateFunctionRequestMutex.Lock()
	defer fake.updateFunctionRequestMutex.Unlock()
	fake.UpdateFunctionRequestStub = nil
	fake.updateFunctionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunctionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateFunctionOutput) {
	fake.updateFunctionRequestMutex.Lock()
	defer fake.updateFunctionRequestMutex.Unlock()
	fake.UpdateFunctionRequestStub = nil
	if fake.updateFunctionRequestReturnsOnCall == nil {
		fake.updateFunctionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateFunctionOutput
		})
	}
	fake.updateFunctionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateFunctionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunctionWithContext(arg1 context.Context, arg2 *cloudfront.UpdateFunctionInput, arg3 ...request.Option) (*cloudfront.UpdateFunctionOutput, error) {
	fake.updateFunctionWithContextMutex.Lock()
	ret, specificReturn := fake.updateFunctionWithContextReturnsOnCall[len(fake.updateFunctionWithContextArgsForCall)]
	fake.updateFunctionWithContextArgsForCall = append(fake.updateFunctionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateFunctionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateFunctionWithContextStub
	fakeReturns := fake.updateFunctionWithContextReturns
	fake.recordInvocation("UpdateFunctionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateFunctionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateFunctionWithContextCallCount() int {
	fake.updateFunctionWithContextMutex.RLock()
	defer fake.updateFunctionWithContextMutex.RUnlock()
	return len(fake.updateFunctionWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateFunctionWithContextCalls(stub func(context.Context, *cloudfront.UpdateFunctionInput, ...request.Option) (*cloudfront.UpdateFunctionOutput, error)) {
	fake.updateFunctionWithContextMutex.Lock()
	defer fake.updateFunctionWithContextMutex.Unlock()
	fake.UpdateFunctionWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateFunctionWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateFunctionInput, []request.Option) {
	fake.updateFunctionWithContextMutex.RLock()
	defer fake.updateFunctionWithContextMutex.RUnlock()
	argsForCall := fake.updateFunctionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateFunctionWithContextReturns(result1 *cloudfront.UpdateFunctionOutput, result2 error) {
	fake.updateFunctionWithContextMutex.Lock()
	defer fake.updateFunctionWithContextMutex.Unlock()
	fake.UpdateFunctionWithContextStub = nil
	fake.updateFunctionWithContextReturns = struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateFunctionWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateFunctionOutput, result2 error) {
	fake.updateFunctionWithContextMutex.Lock()
	defer fake.updateFunctionWithContextMutex.Unlock()
	fake.UpdateFunctionWithContextStub = nil
	if fake.updateFunctionWithContextReturnsOnCall == nil {
		fake.updateFunctionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateFunctionOutput
			result2 error
		})
	}
	fake.updateFunctionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateFunctionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroup(arg1 *cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error) {
	fake.updateKeyGroupMutex.Lock()
	ret, specificReturn := fake.updateKeyGroupReturnsOnCall[len(fake.updateKeyGroupArgsForCall)]
	fake.updateKeyGroupArgsForCall = append(fake.updateKeyGroupArgsForCall, struct {
		arg1 *cloudfront.UpdateKeyGroupInput
	}{arg1})
	stub := fake.UpdateKeyGroupStub
	fakeReturns := fake.updateKeyGroupReturns
	fake.recordInvocation("UpdateKeyGroup", []interface{}{arg1})
	fake.updateKeyGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateKeyGroupCallCount() int {
	fake.updateKeyGroupMutex.RLock()
	defer fake.updateKeyGroupMutex.RUnlock()
	return len(fake.updateKeyGroupArgsForCall)
}

func (fake *FakeCloudfront) UpdateKeyGroupCalls(stub func(*cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error)) {
	fake.updateKeyGroupMutex.Lock()
	defer fake.updateKeyGroupMutex.Unlock()
	fake.UpdateKeyGroupStub = stub
}

func (fake *FakeCloudfront) UpdateKeyGroupArgsForCall(i int) *cloudfront.UpdateKeyGroupInput {
	fake.updateKeyGroupMutex.RLock()
	defer fake.updateKeyGroupMutex.RUnlock()
	argsForCall := fake.updateKeyGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateKeyGroupReturns(result1 *cloudfront.UpdateKeyGroupOutput, result2 error) {
	fake.updateKeyGroupMutex.Lock()
	defer fake.updateKeyGroupMutex.Unlock()
	fake.UpdateKeyGroupStub = nil
	fake.updateKeyGroupReturns = struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroupReturnsOnCall(i int, result1 *cloudfront.UpdateKeyGroupOutput, result2 error) {
	fake.updateKeyGroupMutex.Lock()
	defer fake.updateKeyGroupMutex.Unlock()
	fake.UpdateKeyGroupStub = nil
	if fake.updateKeyGroupReturnsOnCall == nil {
		fake.updateKeyGroupReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateKeyGroupOutput
			result2 error
		})
	}
	fake.updateKeyGroupReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroupRequest(arg1 *cloudfront.UpdateKeyGroupInput) (*request.Request, *cloudfront.UpdateKeyGroupOutput) {
	fake.updateKeyGroupRequestMutex.Lock()
	ret, specificReturn := fake.updateKeyGroupRequestReturnsOnCall[len(fake.updateKeyGroupRequestArgsForCall)]
	fake.updateKeyGroupRequestArgsForCall = append(fake.updateKeyGroupRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateKeyGroupInput
	}{arg1})
	stub := fake.UpdateKeyGroupRequestStub
	fakeReturns := fake.updateKeyGroupRequestReturns
	fake.recordInvocation("UpdateKeyGroupRequest", []interface{}{arg1})
	fake.updateKeyGroupRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateKeyGroupRequestCallCount() int {
	fake.updateKeyGroupRequestMutex.RLock()
	defer fake.updateKeyGroupRequestMutex.RUnlock()
	return len(fake.updateKeyGroupRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateKeyGroupRequestCalls(stub func(*cloudfront.UpdateKeyGroupInput) (*request.Request, *cloudfront.UpdateKeyGroupOutput)) {
	fake.updateKeyGroupRequestMutex.Lock()
	defer fake.updateKeyGroupRequestMutex.Unlock()
	fake.UpdateKeyGroupRequestStub = stub
}

func (fake *FakeCloudfront) UpdateKeyGroupRequestArgsForCall(i int) *cloudfront.UpdateKeyGroupInput {
	fake.updateKeyGroupRequestMutex.RLock()
	defer fake.updateKeyGroupRequestMutex.RUnlock()
	argsForCall := fake.updateKeyGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateKeyGroupRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateKeyGroupOutput) {
	fake.updateKeyGroupRequestMutex.Lock()
	defer fake.updateKeyGroupRequestMutex.Unlock()
	fake.UpdateKeyGroupRequestStub = nil
	fake.updateKeyGroupRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateKeyGroupOutput) {
	fake.updateKeyGroupRequestMutex.Lock()
	defer fake.updateKeyGroupRequestMutex.Unlock()
	fake.UpdateKeyGroupRequestStub = nil
	if fake.updateKeyGroupRequestReturnsOnCall == nil {
		fake.updateKeyGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateKeyGroupOutput
		})
	}
	fake.updateKeyGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateKeyGroupOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContext(arg1 context.Context, arg2 *cloudfront.UpdateKeyGroupInput, arg3 ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error) {
	fake.updateKeyGroupWithContextMutex.Lock()
	ret, specificReturn := fake.updateKeyGroupWithContextReturnsOnCall[len(fake.updateKeyGroupWithContextArgsForCall)]
	fake.updateKeyGroupWithContextArgsForCall = append(fake.updateKeyGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateKeyGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateKeyGroupWithContextStub
	fakeReturns := fake.updateKeyGroupWithContextReturns
	fake.recordInvocation("UpdateKeyGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateKeyGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContextCallCount() int {
	fake.updateKeyGroupWithContextMutex.RLock()
	defer fake.updateKeyGroupWithContextMutex.RUnlock()
	return len(fake.updateKeyGroupWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContextCalls(stub func(context.Context, *cloudfront.UpdateKeyGroupInput, ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error)) {
	fake.updateKeyGroupWithContextMutex.Lock()
	defer fake.updateKeyGroupWithContextMutex.Unlock()
	fake.UpdateKeyGroupWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateKeyGroupInput, []request.Option) {
	fake.updateKeyGroupWithContextMutex.RLock()
	defer fake.updateKeyGroupWithContextMutex.RUnlock()
	argsForCall := fake.updateKeyGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContextReturns(result1 *cloudfront.UpdateKeyGroupOutput, result2 error) {
	fake.updateKeyGroupWithContextMutex.Lock()
	defer fake.updateKeyGroupWithContextMutex.Unlock()
	fake.UpdateKeyGroupWithContextStub = nil
	fake.updateKeyGroupWithContextReturns = struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateKeyGroupWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateKeyGroupOutput, result2 error) {
	fake.updateKeyGroupWithContextMutex.Lock()
	defer fake.updateKeyGroupWithContextMutex.Unlock()
	fake.UpdateKeyGroupWithContextStub = nil
	if fake.updateKeyGroupWithContextReturnsOnCall == nil {
		fake.updateKeyGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateKeyGroupOutput
			result2 error
		})
	}
	fake.updateKeyGroupWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateKeyGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicy(arg1 *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	fake.updateOriginRequestPolicyMutex.Lock()
	ret, specificReturn := fake.updateOriginRequestPolicyReturnsOnCall[len(fake.updateOriginRequestPolicyArgsForCall)]
	fake.updateOriginRequestPolicyArgsForCall = append(fake.updateOriginRequestPolicyArgsForCall, struct {
		arg1 *cloudfront.UpdateOriginRequestPolicyInput
	}{arg1})
	stub := fake.UpdateOriginRequestPolicyStub
	fakeReturns := fake.updateOriginRequestPolicyReturns
	fake.recordInvocation("UpdateOriginRequestPolicy", []interface{}{arg1})
	fake.updateOriginRequestPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyCallCount() int {
	fake.updateOriginRequestPolicyMutex.RLock()
	defer fake.updateOriginRequestPolicyMutex.RUnlock()
	return len(fake.updateOriginRequestPolicyArgsForCall)
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyCalls(stub func(*cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error)) {
	fake.updateOriginRequestPolicyMutex.Lock()
	defer fake.updateOriginRequestPolicyMutex.Unlock()
	fake.UpdateOriginRequestPolicyStub = stub
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyArgsForCall(i int) *cloudfront.UpdateOriginRequestPolicyInput {
	fake.updateOriginRequestPolicyMutex.RLock()
	defer fake.updateOriginRequestPolicyMutex.RUnlock()
	argsForCall := fake.updateOriginRequestPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyReturns(result1 *cloudfront.UpdateOriginRequestPolicyOutput, result2 error) {
	fake.updateOriginRequestPolicyMutex.Lock()
	defer fake.updateOriginRequestPolicyMutex.Unlock()
	fake.UpdateOriginRequestPolicyStub = nil
	fake.updateOriginRequestPolicyReturns = struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyReturnsOnCall(i int, result1 *cloudfront.UpdateOriginRequestPolicyOutput, result2 error) {
	fake.updateOriginRequestPolicyMutex.Lock()
	defer fake.updateOriginRequestPolicyMutex.Unlock()
	fake.UpdateOriginRequestPolicyStub = nil
	if fake.updateOriginRequestPolicyReturnsOnCall == nil {
		fake.updateOriginRequestPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.updateOriginRequestPolicyReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequest(arg1 *cloudfront.UpdateOriginRequestPolicyInput) (*request.Request, *cloudfront.UpdateOriginRequestPolicyOutput) {
	fake.updateOriginRequestPolicyRequestMutex.Lock()
	ret, specificReturn := fake.updateOriginRequestPolicyRequestReturnsOnCall[len(fake.updateOriginRequestPolicyRequestArgsForCall)]
	fake.updateOriginRequestPolicyRequestArgsForCall = append(fake.updateOriginRequestPolicyRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateOriginRequestPolicyInput
	}{arg1})
	stub := fake.UpdateOriginRequestPolicyRequestStub
	fakeReturns := fake.updateOriginRequestPolicyRequestReturns
	fake.recordInvocation("UpdateOriginRequestPolicyRequest", []interface{}{arg1})
	fake.updateOriginRequestPolicyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequestCallCount() int {
	fake.updateOriginRequestPolicyRequestMutex.RLock()
	defer fake.updateOriginRequestPolicyRequestMutex.RUnlock()
	return len(fake.updateOriginRequestPolicyRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequestCalls(stub func(*cloudfront.UpdateOriginRequestPolicyInput) (*request.Request, *cloudfront.UpdateOriginRequestPolicyOutput)) {
	fake.updateOriginRequestPolicyRequestMutex.Lock()
	defer fake.updateOriginRequestPolicyRequestMutex.Unlock()
	fake.UpdateOriginRequestPolicyRequestStub = stub
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequestArgsForCall(i int) *cloudfront.UpdateOriginRequestPolicyInput {
	fake.updateOriginRequestPolicyRequestMutex.RLock()
	defer fake.updateOriginRequestPolicyRequestMutex.RUnlock()
	argsForCall := fake.updateOriginRequestPolicyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateOriginRequestPolicyOutput) {
	fake.updateOriginRequestPolicyRequestMutex.Lock()
	defer fake.updateOriginRequestPolicyRequestMutex.Unlock()
	fake.UpdateOriginRequestPolicyRequestStub = nil
	fake.updateOriginRequestPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateOriginRequestPolicyOutput) {
	fake.updateOriginRequestPolicyRequestMutex.Lock()
	defer fake.updateOriginRequestPolicyRequestMutex.Unlock()
	fake.UpdateOriginRequestPolicyRequestStub = nil
	if fake.updateOriginRequestPolicyRequestReturnsOnCall == nil {
		fake.updateOriginRequestPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateOriginRequestPolicyOutput
		})
	}
	fake.updateOriginRequestPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateOriginRequestPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContext(arg1 context.Context, arg2 *cloudfront.UpdateOriginRequestPolicyInput, arg3 ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	fake.updateOriginRequestPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.updateOriginRequestPolicyWithContextReturnsOnCall[len(fake.updateOriginRequestPolicyWithContextArgsForCall)]
	fake.updateOriginRequestPolicyWithContextArgsForCall = append(fake.updateOriginRequestPolicyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateOriginRequestPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateOriginRequestPolicyWithContextStub
	fakeReturns := fake.updateOriginRequestPolicyWithContextReturns
	fake.recordInvocation("UpdateOriginRequestPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateOriginRequestPolicyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContextCallCount() int {
	fake.updateOriginRequestPolicyWithContextMutex.RLock()
	defer fake.updateOriginRequestPolicyWithContextMutex.RUnlock()
	return len(fake.updateOriginRequestPolicyWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContextCalls(stub func(context.Context, *cloudfront.UpdateOriginRequestPolicyInput, ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error)) {
	fake.updateOriginRequestPolicyWithContextMutex.Lock()
	defer fake.updateOriginRequestPolicyWithContextMutex.Unlock()
	fake.UpdateOriginRequestPolicyWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateOriginRequestPolicyInput, []request.Option) {
	fake.updateOriginRequestPolicyWithContextMutex.RLock()
	defer fake.updateOriginRequestPolicyWithContextMutex.RUnlock()
	argsForCall := fake.updateOriginRequestPolicyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContextReturns(result1 *cloudfront.UpdateOriginRequestPolicyOutput, result2 error) {
	fake.updateOriginRequestPolicyWithContextMutex.Lock()
	defer fake.updateOriginRequestPolicyWithContextMutex.Unlock()
	fake.UpdateOriginRequestPolicyWithContextStub = nil
	fake.updateOriginRequestPolicyWithContextReturns = struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateOriginRequestPolicyWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateOriginRequestPolicyOutput, result2 error) {
	fake.updateOriginRequestPolicyWithContextMutex.Lock()
	defer fake.updateOriginRequestPolicyWithContextMutex.Unlock()
	fake.UpdateOriginRequestPolicyWithContextStub = nil
	if fake.updateOriginRequestPolicyWithContextReturnsOnCall == nil {
		fake.updateOriginRequestPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateOriginRequestPolicyOutput
			result2 error
		})
	}
	fake.updateOriginRequestPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateOriginRequestPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKey(arg1 *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	fake.updatePublicKeyMutex.Lock()
	ret, specificReturn := fake.updatePublicKeyReturnsOnCall[len(fake.updatePublicKeyArgsForCall)]
	fake.updatePublicKeyArgsForCall = append(fake.updatePublicKeyArgsForCall, struct {
		arg1 *cloudfront.UpdatePublicKeyInput
	}{arg1})
	stub := fake.UpdatePublicKeyStub
	fakeReturns := fake.updatePublicKeyReturns
	fake.recordInvocation("UpdatePublicKey", []interface{}{arg1})
	fake.updatePublicKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdatePublicKeyCallCount() int {
	fake.updatePublicKeyMutex.RLock()
	defer fake.updatePublicKeyMutex.RUnlock()
	return len(fake.updatePublicKeyArgsForCall)
}

func (fake *FakeCloudfront) UpdatePublicKeyCalls(stub func(*cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error)) {
	fake.updatePublicKeyMutex.Lock()
	defer fake.updatePublicKeyMutex.Unlock()
	fake.UpdatePublicKeyStub = stub
}

func (fake *FakeCloudfront) UpdatePublicKeyArgsForCall(i int) *cloudfront.UpdatePublicKeyInput {
	fake.updatePublicKeyMutex.RLock()
	defer fake.updatePublicKeyMutex.RUnlock()
	argsForCall := fake.updatePublicKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdatePublicKeyReturns(result1 *cloudfront.UpdatePublicKeyOutput, result2 error) {
	fake.updatePublicKeyMutex.Lock()
	defer fake.updatePublicKeyMutex.Unlock()
	fake.UpdatePublicKeyStub = nil
	fake.updatePublicKeyReturns = struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKeyReturnsOnCall(i int, result1 *cloudfront.UpdatePublicKeyOutput, result2 error) {
	fake.updatePublicKeyMutex.Lock()
	defer fake.updatePublicKeyMutex.Unlock()
	fake.UpdatePublicKeyStub = nil
	if fake.updatePublicKeyReturnsOnCall == nil {
		fake.updatePublicKeyReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdatePublicKeyOutput
			result2 error
		})
	}
	fake.updatePublicKeyReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKeyRequest(arg1 *cloudfront.UpdatePublicKeyInput) (*request.Request, *cloudfront.UpdatePublicKeyOutput) {
	fake.updatePublicKeyRequestMutex.Lock()
	ret, specificReturn := fake.updatePublicKeyRequestReturnsOnCall[len(fake.updatePublicKeyRequestArgsForCall)]
	fake.updatePublicKeyRequestArgsForCall = append(fake.updatePublicKeyRequestArgsForCall, struct {
		arg1 *cloudfront.UpdatePublicKeyInput
	}{arg1})
	stub := fake.UpdatePublicKeyRequestStub
	fakeReturns := fake.updatePublicKeyRequestReturns
	fake.recordInvocation("UpdatePublicKeyRequest", []interface{}{arg1})
	fake.updatePublicKeyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdatePublicKeyRequestCallCount() int {
	fake.updatePublicKeyRequestMutex.RLock()
	defer fake.updatePublicKeyRequestMutex.RUnlock()
	return len(fake.updatePublicKeyRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdatePublicKeyRequestCalls(stub func(*cloudfront.UpdatePublicKeyInput) (*request.Request, *cloudfront.UpdatePublicKeyOutput)) {
	fake.updatePublicKeyRequestMutex.Lock()
	defer fake.updatePublicKeyRequestMutex.Unlock()
	fake.UpdatePublicKeyRequestStub = stub
}

func (fake *FakeCloudfront) UpdatePublicKeyRequestArgsForCall(i int) *cloudfront.UpdatePublicKeyInput {
	fake.updatePublicKeyRequestMutex.RLock()
	defer fake.updatePublicKeyRequestMutex.RUnlock()
	argsForCall := fake.updatePublicKeyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdatePublicKeyRequestReturns(result1 *request.Request, result2 *cloudfront.UpdatePublicKeyOutput) {
	fake.updatePublicKeyRequestMutex.Lock()
	defer fake.updatePublicKeyRequestMutex.Unlock()
	fake.UpdatePublicKeyRequestStub = nil
	fake.updatePublicKeyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdatePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKeyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdatePublicKeyOutput) {
	fake.updatePublicKeyRequestMutex.Lock()
	defer fake.updatePublicKeyRequestMutex.Unlock()
	fake.UpdatePublicKeyRequestStub = nil
	if fake.updatePublicKeyRequestReturnsOnCall == nil {
		fake.updatePublicKeyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdatePublicKeyOutput
		})
	}
	fake.updatePublicKeyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdatePublicKeyOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContext(arg1 context.Context, arg2 *cloudfront.UpdatePublicKeyInput, arg3 ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {
	fake.updatePublicKeyWithContextMutex.Lock()
	ret, specificReturn := fake.updatePublicKeyWithContextReturnsOnCall[len(fake.updatePublicKeyWithContextArgsForCall)]
	fake.updatePublicKeyWithContextArgsForCall = append(fake.updatePublicKeyWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdatePublicKeyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdatePublicKeyWithContextStub
	fakeReturns := fake.updatePublicKeyWithContextReturns
	fake.recordInvocation("UpdatePublicKeyWithContext", []interface{}{arg1, arg2, arg3})
	fake.updatePublicKeyWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContextCallCount() int {
	fake.updatePublicKeyWithContextMutex.RLock()
	defer fake.updatePublicKeyWithContextMutex.RUnlock()
	return len(fake.updatePublicKeyWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContextCalls(stub func(context.Context, *cloudfront.UpdatePublicKeyInput, ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error)) {
	fake.updatePublicKeyWithContextMutex.Lock()
	defer fake.updatePublicKeyWithContextMutex.Unlock()
	fake.UpdatePublicKeyWithContextStub = stub
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdatePublicKeyInput, []request.Option) {
	fake.updatePublicKeyWithContextMutex.RLock()
	defer fake.updatePublicKeyWithContextMutex.RUnlock()
	argsForCall := fake.updatePublicKeyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContextReturns(result1 *cloudfront.UpdatePublicKeyOutput, result2 error) {
	fake.updatePublicKeyWithContextMutex.Lock()
	defer fake.updatePublicKeyWithContextMutex.Unlock()
	fake.UpdatePublicKeyWithContextStub = nil
	fake.updatePublicKeyWithContextReturns = struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdatePublicKeyWithContextReturnsOnCall(i int, result1 *cloudfront.UpdatePublicKeyOutput, result2 error) {
	fake.updatePublicKeyWithContextMutex.Lock()
	defer fake.updatePublicKeyWithContextMutex.Unlock()
	fake.UpdatePublicKeyWithContextStub = nil
	if fake.updatePublicKeyWithContextReturnsOnCall == nil {
		fake.updatePublicKeyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdatePublicKeyOutput
			result2 error
		})
	}
	fake.updatePublicKeyWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdatePublicKeyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfig(arg1 *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	fake.updateRealtimeLogConfigMutex.Lock()
	ret, specificReturn := fake.updateRealtimeLogConfigReturnsOnCall[len(fake.updateRealtimeLogConfigArgsForCall)]
	fake.updateRealtimeLogConfigArgsForCall = append(fake.updateRealtimeLogConfigArgsForCall, struct {
		arg1 *cloudfront.UpdateRealtimeLogConfigInput
	}{arg1})
	stub := fake.UpdateRealtimeLogConfigStub
	fakeReturns := fake.updateRealtimeLogConfigReturns
	fake.recordInvocation("UpdateRealtimeLogConfig", []interface{}{arg1})
	fake.updateRealtimeLogConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigCallCount() int {
	fake.updateRealtimeLogConfigMutex.RLock()
	defer fake.updateRealtimeLogConfigMutex.RUnlock()
	return len(fake.updateRealtimeLogConfigArgsForCall)
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigCalls(stub func(*cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error)) {
	fake.updateRealtimeLogConfigMutex.Lock()
	defer fake.updateRealtimeLogConfigMutex.Unlock()
	fake.UpdateRealtimeLogConfigStub = stub
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigArgsForCall(i int) *cloudfront.UpdateRealtimeLogConfigInput {
	fake.updateRealtimeLogConfigMutex.RLock()
	defer fake.updateRealtimeLogConfigMutex.RUnlock()
	argsForCall := fake.updateRealtimeLogConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigReturns(result1 *cloudfront.UpdateRealtimeLogConfigOutput, result2 error) {
	fake.updateRealtimeLogConfigMutex.Lock()
	defer fake.updateRealtimeLogConfigMutex.Unlock()
	fake.UpdateRealtimeLogConfigStub = nil
	fake.updateRealtimeLogConfigReturns = struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigReturnsOnCall(i int, result1 *cloudfront.UpdateRealtimeLogConfigOutput, result2 error) {
	fake.updateRealtimeLogConfigMutex.Lock()
	defer fake.updateRealtimeLogConfigMutex.Unlock()
	fake.UpdateRealtimeLogConfigStub = nil
	if fake.updateRealtimeLogConfigReturnsOnCall == nil {
		fake.updateRealtimeLogConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.updateRealtimeLogConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequest(arg1 *cloudfront.UpdateRealtimeLogConfigInput) (*request.Request, *cloudfront.UpdateRealtimeLogConfigOutput) {
	fake.updateRealtimeLogConfigRequestMutex.Lock()
	ret, specificReturn := fake.updateRealtimeLogConfigRequestReturnsOnCall[len(fake.updateRealtimeLogConfigRequestArgsForCall)]
	fake.updateRealtimeLogConfigRequestArgsForCall = append(fake.updateRealtimeLogConfigRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateRealtimeLogConfigInput
	}{arg1})
	stub := fake.UpdateRealtimeLogConfigRequestStub
	fakeReturns := fake.updateRealtimeLogConfigRequestReturns
	fake.recordInvocation("UpdateRealtimeLogConfigRequest", []interface{}{arg1})
	fake.updateRealtimeLogConfigRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequestCallCount() int {
	fake.updateRealtimeLogConfigRequestMutex.RLock()
	defer fake.updateRealtimeLogConfigRequestMutex.RUnlock()
	return len(fake.updateRealtimeLogConfigRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequestCalls(stub func(*cloudfront.UpdateRealtimeLogConfigInput) (*request.Request, *cloudfront.UpdateRealtimeLogConfigOutput)) {
	fake.updateRealtimeLogConfigRequestMutex.Lock()
	defer fake.updateRealtimeLogConfigRequestMutex.Unlock()
	fake.UpdateRealtimeLogConfigRequestStub = stub
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequestArgsForCall(i int) *cloudfront.UpdateRealtimeLogConfigInput {
	fake.updateRealtimeLogConfigRequestMutex.RLock()
	defer fake.updateRealtimeLogConfigRequestMutex.RUnlock()
	argsForCall := fake.updateRealtimeLogConfigRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateRealtimeLogConfigOutput) {
	fake.updateRealtimeLogConfigRequestMutex.Lock()
	defer fake.updateRealtimeLogConfigRequestMutex.Unlock()
	fake.UpdateRealtimeLogConfigRequestStub = nil
	fake.updateRealtimeLogConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateRealtimeLogConfigOutput) {
	fake.updateRealtimeLogConfigRequestMutex.Lock()
	defer fake.updateRealtimeLogConfigRequestMutex.Unlock()
	fake.UpdateRealtimeLogConfigRequestStub = nil
	if fake.updateRealtimeLogConfigRequestReturnsOnCall == nil {
		fake.updateRealtimeLogConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateRealtimeLogConfigOutput
		})
	}
	fake.updateRealtimeLogConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateRealtimeLogConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContext(arg1 context.Context, arg2 *cloudfront.UpdateRealtimeLogConfigInput, arg3 ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	fake.updateRealtimeLogConfigWithContextMutex.Lock()
	ret, specificReturn := fake.updateRealtimeLogConfigWithContextReturnsOnCall[len(fake.updateRealtimeLogConfigWithContextArgsForCall)]
	fake.updateRealtimeLogConfigWithContextArgsForCall = append(fake.updateRealtimeLogConfigWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateRealtimeLogConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateRealtimeLogConfigWithContextStub
	fakeReturns := fake.updateRealtimeLogConfigWithContextReturns
	fake.recordInvocation("UpdateRealtimeLogConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateRealtimeLogConfigWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContextCallCount() int {
	fake.updateRealtimeLogConfigWithContextMutex.RLock()
	defer fake.updateRealtimeLogConfigWithContextMutex.RUnlock()
	return len(fake.updateRealtimeLogConfigWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContextCalls(stub func(context.Context, *cloudfront.UpdateRealtimeLogConfigInput, ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error)) {
	fake.updateRealtimeLogConfigWithContextMutex.Lock()
	defer fake.updateRealtimeLogConfigWithContextMutex.Unlock()
	fake.UpdateRealtimeLogConfigWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateRealtimeLogConfigInput, []request.Option) {
	fake.updateRealtimeLogConfigWithContextMutex.RLock()
	defer fake.updateRealtimeLogConfigWithContextMutex.RUnlock()
	argsForCall := fake.updateRealtimeLogConfigWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContextReturns(result1 *cloudfront.UpdateRealtimeLogConfigOutput, result2 error) {
	fake.updateRealtimeLogConfigWithContextMutex.Lock()
	defer fake.updateRealtimeLogConfigWithContextMutex.Unlock()
	fake.UpdateRealtimeLogConfigWithContextStub = nil
	fake.updateRealtimeLogConfigWithContextReturns = struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateRealtimeLogConfigWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateRealtimeLogConfigOutput, result2 error) {
	fake.updateRealtimeLogConfigWithContextMutex.Lock()
	defer fake.updateRealtimeLogConfigWithContextMutex.Unlock()
	fake.UpdateRealtimeLogConfigWithContextStub = nil
	if fake.updateRealtimeLogConfigWithContextReturnsOnCall == nil {
		fake.updateRealtimeLogConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateRealtimeLogConfigOutput
			result2 error
		})
	}
	fake.updateRealtimeLogConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateRealtimeLogConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistribution(arg1 *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	fake.updateStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionReturnsOnCall[len(fake.updateStreamingDistributionArgsForCall)]
	fake.updateStreamingDistributionArgsForCall = append(fake.updateStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}{arg1})
	stub := fake.UpdateStreamingDistributionStub
	fakeReturns := fake.updateStreamingDistributionReturns
	fake.recordInvocation("UpdateStreamingDistribution", []interface{}{arg1})
	fake.updateStreamingDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateStreamingDistributionCallCount() int {
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	return len(fake.updateStreamingDistributionArgsForCall)
}

func (fake *FakeCloudfront) UpdateStreamingDistributionCalls(stub func(*cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error)) {
	fake.updateStreamingDistributionMutex.Lock()
	defer fake.updateStreamingDistributionMutex.Unlock()
	fake.UpdateStreamingDistributionStub = stub
}

func (fake *FakeCloudfront) UpdateStreamingDistributionArgsForCall(i int) *cloudfront.UpdateStreamingDistributionInput {
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	argsForCall := fake.updateStreamingDistributionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateStreamingDistributionReturns(result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.updateStreamingDistributionMutex.Lock()
	defer fake.updateStreamingDistributionMutex.Unlock()
	fake.UpdateStreamingDistributionStub = nil
	fake.updateStreamingDistributionReturns = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.updateStreamingDistributionMutex.Lock()
	defer fake.updateStreamingDistributionMutex.Unlock()
	fake.UpdateStreamingDistributionStub = nil
	if fake.updateStreamingDistributionReturnsOnCall == nil {
		fake.updateStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateStreamingDistributionOutput
			result2 error
		})
	}
	fake.updateStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequest(arg1 *cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput) {
	fake.updateStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionRequestReturnsOnCall[len(fake.updateStreamingDistributionRequestArgsForCall)]
	fake.updateStreamingDistributionRequestArgsForCall = append(fake.updateStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}{arg1})
	stub := fake.UpdateStreamingDistributionRequestStub
	fakeReturns := fake.updateStreamingDistributionRequestReturns
	fake.recordInvocation("UpdateStreamingDistributionRequest", []interface{}{arg1})
	fake.updateStreamingDistributionRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequestCallCount() int {
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	return len(fake.updateStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequestCalls(stub func(*cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput)) {
	fake.updateStreamingDistributionRequestMutex.Lock()
	defer fake.updateStreamingDistributionRequestMutex.Unlock()
	fake.UpdateStreamingDistributionRequestStub = stub
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequestArgsForCall(i int) *cloudfront.UpdateStreamingDistributionInput {
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	argsForCall := fake.updateStreamingDistributionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateStreamingDistributionOutput) {
	fake.updateStreamingDistributionRequestMutex.Lock()
	defer fake.updateStreamingDistributionRequestMutex.Unlock()
	fake.UpdateStreamingDistributionRequestStub = nil
	fake.updateStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateStreamingDistributionOutput) {
	fake.updateStreamingDistributionRequestMutex.Lock()
	defer fake.updateStreamingDistributionRequestMutex.Unlock()
	fake.UpdateStreamingDistributionRequestStub = nil
	if fake.updateStreamingDistributionRequestReturnsOnCall == nil {
		fake.updateStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateStreamingDistributionOutput
		})
	}
	fake.updateStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContext(arg1 context.Context, arg2 *cloudfront.UpdateStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	fake.updateStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionWithContextReturnsOnCall[len(fake.updateStreamingDistributionWithContextArgsForCall)]
	fake.updateStreamingDistributionWithContextArgsForCall = append(fake.updateStreamingDistributionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.UpdateStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.UpdateStreamingDistributionWithContextStub
	fakeReturns := fake.updateStreamingDistributionWithContextReturns
	fake.recordInvocation("UpdateStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStreamingDistributionWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContextCallCount() int {
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.updateStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContextCalls(stub func(context.Context, *cloudfront.UpdateStreamingDistributionInput, ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error)) {
	fake.updateStreamingDistributionWithContextMutex.Lock()
	defer fake.updateStreamingDistributionWithContextMutex.Unlock()
	fake.UpdateStreamingDistributionWithContextStub = stub
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContextArgsForCall(i int) (context.Context, *cloudfront.UpdateStreamingDistributionInput, []request.Option) {
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	argsForCall := fake.updateStreamingDistributionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContextReturns(result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.updateStreamingDistributionWithContextMutex.Lock()
	defer fake.updateStreamingDistributionWithContextMutex.Unlock()
	fake.UpdateStreamingDistributionWithContextStub = nil
	fake.updateStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) UpdateStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.updateStreamingDistributionWithContextMutex.Lock()
	defer fake.updateStreamingDistributionWithContextMutex.Unlock()
	fake.UpdateStreamingDistributionWithContextStub = nil
	if fake.updateStreamingDistributionWithContextReturnsOnCall == nil {
		fake.updateStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateStreamingDistributionOutput
			result2 error
		})
	}
	fake.updateStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployed(arg1 *cloudfront.GetDistributionInput) error {
	fake.waitUntilDistributionDeployedMutex.Lock()
	ret, specificReturn := fake.waitUntilDistributionDeployedReturnsOnCall[len(fake.waitUntilDistributionDeployedArgsForCall)]
	fake.waitUntilDistributionDeployedArgsForCall = append(fake.waitUntilDistributionDeployedArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	stub := fake.WaitUntilDistributionDeployedStub
	fakeReturns := fake.waitUntilDistributionDeployedReturns
	fake.recordInvocation("WaitUntilDistributionDeployed", []interface{}{arg1})
	fake.waitUntilDistributionDeployedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedCallCount() int {
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	return len(fake.waitUntilDistributionDeployedArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedCalls(stub func(*cloudfront.GetDistributionInput) error) {
	fake.waitUntilDistributionDeployedMutex.Lock()
	defer fake.waitUntilDistributionDeployedMutex.Unlock()
	fake.WaitUntilDistributionDeployedStub = stub
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	argsForCall := fake.waitUntilDistributionDeployedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedReturns(result1 error) {
	fake.waitUntilDistributionDeployedMutex.Lock()
	defer fake.waitUntilDistributionDeployedMutex.Unlock()
	fake.WaitUntilDistributionDeployedStub = nil
	fake.waitUntilDistributionDeployedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedReturnsOnCall(i int, result1 error) {
	fake.waitUntilDistributionDeployedMutex.Lock()
	defer fake.waitUntilDistributionDeployedMutex.Unlock()
	fake.WaitUntilDistributionDeployedStub = nil
	if fake.waitUntilDistributionDeployedReturnsOnCall == nil {
		fake.waitUntilDistributionDeployedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDistributionDeployedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContext(arg1 context.Context, arg2 *cloudfront.GetDistributionInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDistributionDeployedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDistributionDeployedWithContextReturnsOnCall[len(fake.waitUntilDistributionDeployedWithContextArgsForCall)]
	fake.waitUntilDistributionDeployedWithContextArgsForCall = append(fake.waitUntilDistributionDeployedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilDistributionDeployedWithContextStub
	fakeReturns := fake.waitUntilDistributionDeployedWithContextReturns
	fake.recordInvocation("WaitUntilDistributionDeployedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDistributionDeployedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContextCallCount() int {
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	return len(fake.waitUntilDistributionDeployedWithContextArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContextCalls(stub func(context.Context, *cloudfront.GetDistributionInput, ...request.WaiterOption) error) {
	fake.waitUntilDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilDistributionDeployedWithContextStub = stub
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContextArgsForCall(i int) (context.Context, *cloudfront.GetDistributionInput, []request.WaiterOption) {
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilDistributionDeployedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContextReturns(result1 error) {
	fake.waitUntilDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilDistributionDeployedWithContextStub = nil
	fake.waitUntilDistributionDeployedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilDistributionDeployedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilDistributionDeployedWithContextStub = nil
	if fake.waitUntilDistributionDeployedWithContextReturnsOnCall == nil {
		fake.waitUntilDistributionDeployedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDistributionDeployedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompleted(arg1 *cloudfront.GetInvalidationInput) error {
	fake.waitUntilInvalidationCompletedMutex.Lock()
	ret, specificReturn := fake.waitUntilInvalidationCompletedReturnsOnCall[len(fake.waitUntilInvalidationCompletedArgsForCall)]
	fake.waitUntilInvalidationCompletedArgsForCall = append(fake.waitUntilInvalidationCompletedArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	stub := fake.WaitUntilInvalidationCompletedStub
	fakeReturns := fake.waitUntilInvalidationCompletedReturns
	fake.recordInvocation("WaitUntilInvalidationCompleted", []interface{}{arg1})
	fake.waitUntilInvalidationCompletedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedCallCount() int {
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	return len(fake.waitUntilInvalidationCompletedArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedCalls(stub func(*cloudfront.GetInvalidationInput) error) {
	fake.waitUntilInvalidationCompletedMutex.Lock()
	defer fake.waitUntilInvalidationCompletedMutex.Unlock()
	fake.WaitUntilInvalidationCompletedStub = stub
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	argsForCall := fake.waitUntilInvalidationCompletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedReturns(result1 error) {
	fake.waitUntilInvalidationCompletedMutex.Lock()
	defer fake.waitUntilInvalidationCompletedMutex.Unlock()
	fake.WaitUntilInvalidationCompletedStub = nil
	fake.waitUntilInvalidationCompletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilInvalidationCompletedMutex.Lock()
	defer fake.waitUntilInvalidationCompletedMutex.Unlock()
	fake.WaitUntilInvalidationCompletedStub = nil
	if fake.waitUntilInvalidationCompletedReturnsOnCall == nil {
		fake.waitUntilInvalidationCompletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInvalidationCompletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContext(arg1 context.Context, arg2 *cloudfront.GetInvalidationInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInvalidationCompletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInvalidationCompletedWithContextReturnsOnCall[len(fake.waitUntilInvalidationCompletedWithContextArgsForCall)]
	fake.waitUntilInvalidationCompletedWithContextArgsForCall = append(fake.waitUntilInvalidationCompletedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilInvalidationCompletedWithContextStub
	fakeReturns := fake.waitUntilInvalidationCompletedWithContextReturns
	fake.recordInvocation("WaitUntilInvalidationCompletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInvalidationCompletedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContextCallCount() int {
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	return len(fake.waitUntilInvalidationCompletedWithContextArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContextCalls(stub func(context.Context, *cloudfront.GetInvalidationInput, ...request.WaiterOption) error) {
	fake.waitUntilInvalidationCompletedWithContextMutex.Lock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.Unlock()
	fake.WaitUntilInvalidationCompletedWithContextStub = stub
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContextArgsForCall(i int) (context.Context, *cloudfront.GetInvalidationInput, []request.WaiterOption) {
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInvalidationCompletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContextReturns(result1 error) {
	fake.waitUntilInvalidationCompletedWithContextMutex.Lock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.Unlock()
	fake.WaitUntilInvalidationCompletedWithContextStub = nil
	fake.waitUntilInvalidationCompletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilInvalidationCompletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInvalidationCompletedWithContextMutex.Lock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.Unlock()
	fake.WaitUntilInvalidationCompletedWithContextStub = nil
	if fake.waitUntilInvalidationCompletedWithContextReturnsOnCall == nil {
		fake.waitUntilInvalidationCompletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInvalidationCompletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployed(arg1 *cloudfront.GetStreamingDistributionInput) error {
	fake.waitUntilStreamingDistributionDeployedMutex.Lock()
	ret, specificReturn := fake.waitUntilStreamingDistributionDeployedReturnsOnCall[len(fake.waitUntilStreamingDistributionDeployedArgsForCall)]
	fake.waitUntilStreamingDistributionDeployedArgsForCall = append(fake.waitUntilStreamingDistributionDeployedArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	stub := fake.WaitUntilStreamingDistributionDeployedStub
	fakeReturns := fake.waitUntilStreamingDistributionDeployedReturns
	fake.recordInvocation("WaitUntilStreamingDistributionDeployed", []interface{}{arg1})
	fake.waitUntilStreamingDistributionDeployedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedCallCount() int {
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	return len(fake.waitUntilStreamingDistributionDeployedArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedCalls(stub func(*cloudfront.GetStreamingDistributionInput) error) {
	fake.waitUntilStreamingDistributionDeployedMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedStub = stub
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	argsForCall := fake.waitUntilStreamingDistributionDeployedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedReturns(result1 error) {
	fake.waitUntilStreamingDistributionDeployedMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedStub = nil
	fake.waitUntilStreamingDistributionDeployedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedReturnsOnCall(i int, result1 error) {
	fake.waitUntilStreamingDistributionDeployedMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedStub = nil
	if fake.waitUntilStreamingDistributionDeployedReturnsOnCall == nil {
		fake.waitUntilStreamingDistributionDeployedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStreamingDistributionDeployedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContext(arg1 context.Context, arg2 *cloudfront.GetStreamingDistributionInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall[len(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall)]
	fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall = append(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	stub := fake.WaitUntilStreamingDistributionDeployedWithContextStub
	fakeReturns := fake.waitUntilStreamingDistributionDeployedWithContextReturns
	fake.recordInvocation("WaitUntilStreamingDistributionDeployedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContextCallCount() int {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	return len(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall)
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContextCalls(stub func(context.Context, *cloudfront.GetStreamingDistributionInput, ...request.WaiterOption) error) {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedWithContextStub = stub
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContextArgsForCall(i int) (context.Context, *cloudfront.GetStreamingDistributionInput, []request.WaiterOption) {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContextReturns(result1 error) {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedWithContextStub = nil
	fake.waitUntilStreamingDistributionDeployedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) WaitUntilStreamingDistributionDeployedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Lock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.Unlock()
	fake.WaitUntilStreamingDistributionDeployedWithContextStub = nil
	if fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall == nil {
		fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudfront) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCachePolicyMutex.RLock()
	defer fake.createCachePolicyMutex.RUnlock()
	fake.createCachePolicyRequestMutex.RLock()
	defer fake.createCachePolicyRequestMutex.RUnlock()
	fake.createCachePolicyWithContextMutex.RLock()
	defer fake.createCachePolicyWithContextMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	fake.createFieldLevelEncryptionConfigMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigMutex.RUnlock()
	fake.createFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigRequestMutex.RUnlock()
	fake.createFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	fake.createFieldLevelEncryptionProfileMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileMutex.RUnlock()
	fake.createFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileRequestMutex.RUnlock()
	fake.createFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.createFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	fake.createFunctionMutex.RLock()
	defer fake.createFunctionMutex.RUnlock()
	fake.createFunctionRequestMutex.RLock()
	defer fake.createFunctionRequestMutex.RUnlock()
	fake.createFunctionWithContextMutex.RLock()
	defer fake.createFunctionWithContextMutex.RUnlock()
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	fake.createKeyGroupMutex.RLock()
	defer fake.createKeyGroupMutex.RUnlock()
	fake.createKeyGroupRequestMutex.RLock()
	defer fake.createKeyGroupRequestMutex.RUnlock()
	fake.createKeyGroupWithContextMutex.RLock()
	defer fake.createKeyGroupWithContextMutex.RUnlock()
	fake.createMonitoringSubscriptionMutex.RLock()
	defer fake.createMonitoringSubscriptionMutex.RUnlock()
	fake.createMonitoringSubscriptionRequestMutex.RLock()
	defer fake.createMonitoringSubscriptionRequestMutex.RUnlock()
	fake.createMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.createMonitoringSubscriptionWithContextMutex.RUnlock()
	fake.createOriginRequestPolicyMutex.RLock()
	defer fake.createOriginRequestPolicyMutex.RUnlock()
	fake.createOriginRequestPolicyRequestMutex.RLock()
	defer fake.createOriginRequestPolicyRequestMutex.RUnlock()
	fake.createOriginRequestPolicyWithContextMutex.RLock()
	defer fake.createOriginRequestPolicyWithContextMutex.RUnlock()
	fake.createPublicKeyMutex.RLock()
	defer fake.createPublicKeyMutex.RUnlock()
	fake.createPublicKeyRequestMutex.RLock()
	defer fake.createPublicKeyRequestMutex.RUnlock()
	fake.createPublicKeyWithContextMutex.RLock()
	defer fake.createPublicKeyWithContextMutex.RUnlock()
	fake.createRealtimeLogConfigMutex.RLock()
	defer fake.createRealtimeLogConfigMutex.RUnlock()
	fake.createRealtimeLogConfigRequestMutex.RLock()
	defer fake.createRealtimeLogConfigRequestMutex.RUnlock()
	fake.createRealtimeLogConfigWithContextMutex.RLock()
	defer fake.createRealtimeLogConfigWithContextMutex.RUnlock()
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	fake.deleteCachePolicyMutex.RLock()
	defer fake.deleteCachePolicyMutex.RUnlock()
	fake.deleteCachePolicyRequestMutex.RLock()
	defer fake.deleteCachePolicyRequestMutex.RUnlock()
	fake.deleteCachePolicyWithContextMutex.RLock()
	defer fake.deleteCachePolicyWithContextMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	fake.deleteFieldLevelEncryptionConfigMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigMutex.RUnlock()
	fake.deleteFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigRequestMutex.RUnlock()
	fake.deleteFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	fake.deleteFieldLevelEncryptionProfileMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileMutex.RUnlock()
	fake.deleteFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileRequestMutex.RUnlock()
	fake.deleteFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.deleteFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	fake.deleteFunctionMutex.RLock()
	defer fake.deleteFunctionMutex.RUnlock()
	fake.deleteFunctionRequestMutex.RLock()
	defer fake.deleteFunctionRequestMutex.RUnlock()
	fake.deleteFunctionWithContextMutex.RLock()
	defer fake.deleteFunctionWithContextMutex.RUnlock()
	fake.deleteKeyGroupMutex.RLock()
	defer fake.deleteKeyGroupMutex.RUnlock()
	fake.deleteKeyGroupRequestMutex.RLock()
	defer fake.deleteKeyGroupRequestMutex.RUnlock()
	fake.deleteKeyGroupWithContextMutex.RLock()
	defer fake.deleteKeyGroupWithContextMutex.RUnlock()
	fake.deleteMonitoringSubscriptionMutex.RLock()
	defer fake.deleteMonitoringSubscriptionMutex.RUnlock()
	fake.deleteMonitoringSubscriptionRequestMutex.RLock()
	defer fake.deleteMonitoringSubscriptionRequestMutex.RUnlock()
	fake.deleteMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.deleteMonitoringSubscriptionWithContextMutex.RUnlock()
	fake.deleteOriginRequestPolicyMutex.RLock()
	defer fake.deleteOriginRequestPolicyMutex.RUnlock()
	fake.deleteOriginRequestPolicyRequestMutex.RLock()
	defer fake.deleteOriginRequestPolicyRequestMutex.RUnlock()
	fake.deleteOriginRequestPolicyWithContextMutex.RLock()
	defer fake.deleteOriginRequestPolicyWithContextMutex.RUnlock()
	fake.deletePublicKeyMutex.RLock()
	defer fake.deletePublicKeyMutex.RUnlock()
	fake.deletePublicKeyRequestMutex.RLock()
	defer fake.deletePublicKeyRequestMutex.RUnlock()
	fake.deletePublicKeyWithContextMutex.RLock()
	defer fake.deletePublicKeyWithContextMutex.RUnlock()
	fake.deleteRealtimeLogConfigMutex.RLock()
	defer fake.deleteRealtimeLogConfigMutex.RUnlock()
	fake.deleteRealtimeLogConfigRequestMutex.RLock()
	defer fake.deleteRealtimeLogConfigRequestMutex.RUnlock()
	fake.deleteRealtimeLogConfigWithContextMutex.RLock()
	defer fake.deleteRealtimeLogConfigWithContextMutex.RUnlock()
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	fake.describeFunctionMutex.RLock()
	defer fake.describeFunctionMutex.RUnlock()
	fake.describeFunctionRequestMutex.RLock()
	defer fake.describeFunctionRequestMutex.RUnlock()
	fake.describeFunctionWithContextMutex.RLock()
	defer fake.describeFunctionWithContextMutex.RUnlock()
	fake.getCachePolicyMutex.RLock()
	defer fake.getCachePolicyMutex.RUnlock()
	fake.getCachePolicyConfigMutex.RLock()
	defer fake.getCachePolicyConfigMutex.RUnlock()
	fake.getCachePolicyConfigRequestMutex.RLock()
	defer fake.getCachePolicyConfigRequestMutex.RUnlock()
	fake.getCachePolicyConfigWithContextMutex.RLock()
	defer fake.getCachePolicyConfigWithContextMutex.RUnlock()
	fake.getCachePolicyRequestMutex.RLock()
	defer fake.getCachePolicyRequestMutex.RUnlock()
	fake.getCachePolicyWithContextMutex.RLock()
	defer fake.getCachePolicyWithContextMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	fake.getFieldLevelEncryptionMutex.RLock()
	defer fake.getFieldLevelEncryptionMutex.RUnlock()
	fake.getFieldLevelEncryptionConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigMutex.RUnlock()
	fake.getFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigRequestMutex.RUnlock()
	fake.getFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileConfigMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileConfigRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigRequestMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileConfigWithContextMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileRequestMutex.RUnlock()
	fake.getFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	fake.getFieldLevelEncryptionRequestMutex.RLock()
	defer fake.getFieldLevelEncryptionRequestMutex.RUnlock()
	fake.getFieldLevelEncryptionWithContextMutex.RLock()
	defer fake.getFieldLevelEncryptionWithContextMutex.RUnlock()
	fake.getFunctionMutex.RLock()
	defer fake.getFunctionMutex.RUnlock()
	fake.getFunctionRequestMutex.RLock()
	defer fake.getFunctionRequestMutex.RUnlock()
	fake.getFunctionWithContextMutex.RLock()
	defer fake.getFunctionWithContextMutex.RUnlock()
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	fake.getKeyGroupMutex.RLock()
	defer fake.getKeyGroupMutex.RUnlock()
	fake.getKeyGroupConfigMutex.RLock()
	defer fake.getKeyGroupConfigMutex.RUnlock()
	fake.getKeyGroupConfigRequestMutex.RLock()
	defer fake.getKeyGroupConfigRequestMutex.RUnlock()
	fake.getKeyGroupConfigWithContextMutex.RLock()
	defer fake.getKeyGroupConfigWithContextMutex.RUnlock()
	fake.getKeyGroupRequestMutex.RLock()
	defer fake.getKeyGroupRequestMutex.RUnlock()
	fake.getKeyGroupWithContextMutex.RLock()
	defer fake.getKeyGroupWithContextMutex.RUnlock()
	fake.getMonitoringSubscriptionMutex.RLock()
	defer fake.getMonitoringSubscriptionMutex.RUnlock()
	fake.getMonitoringSubscriptionRequestMutex.RLock()
	defer fake.getMonitoringSubscriptionRequestMutex.RUnlock()
	fake.getMonitoringSubscriptionWithContextMutex.RLock()
	defer fake.getMonitoringSubscriptionWithContextMutex.RUnlock()
	fake.getOriginRequestPolicyMutex.RLock()
	defer fake.getOriginRequestPolicyMutex.RUnlock()
	fake.getOriginRequestPolicyConfigMutex.RLock()
	defer fake.getOriginRequestPolicyConfigMutex.RUnlock()
	fake.getOriginRequestPolicyConfigRequestMutex.RLock()
	defer fake.getOriginRequestPolicyConfigRequestMutex.RUnlock()
	fake.getOriginRequestPolicyConfigWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyConfigWithContextMutex.RUnlock()
	fake.getOriginRequestPolicyRequestMutex.RLock()
	defer fake.getOriginRequestPolicyRequestMutex.RUnlock()
	fake.getOriginRequestPolicyWithContextMutex.RLock()
	defer fake.getOriginRequestPolicyWithContextMutex.RUnlock()
	fake.getPublicKeyMutex.RLock()
	defer fake.getPublicKeyMutex.RUnlock()
	fake.getPublicKeyConfigMutex.RLock()
	defer fake.getPublicKeyConfigMutex.RUnlock()
	fake.getPublicKeyConfigRequestMutex.RLock()
	defer fake.getPublicKeyConfigRequestMutex.RUnlock()
	fake.getPublicKeyConfigWithContextMutex.RLock()
	defer fake.getPublicKeyConfigWithContextMutex.RUnlock()
	fake.getPublicKeyRequestMutex.RLock()
	defer fake.getPublicKeyRequestMutex.RUnlock()
	fake.getPublicKeyWithContextMutex.RLock()
	defer fake.getPublicKeyWithContextMutex.RUnlock()
	fake.getRealtimeLogConfigMutex.RLock()
	defer fake.getRealtimeLogConfigMutex.RUnlock()
	fake.getRealtimeLogConfigRequestMutex.RLock()
	defer fake.getRealtimeLogConfigRequestMutex.RUnlock()
	fake.getRealtimeLogConfigWithContextMutex.RLock()
	defer fake.getRealtimeLogConfigWithContextMutex.RUnlock()
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	fake.listCachePoliciesMutex.RLock()
	defer fake.listCachePoliciesMutex.RUnlock()
	fake.listCachePoliciesRequestMutex.RLock()
	defer fake.listCachePoliciesRequestMutex.RUnlock()
	fake.listCachePoliciesWithContextMutex.RLock()
	defer fake.listCachePoliciesWithContextMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	fake.listDistributionsByCachePolicyIdMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdMutex.RUnlock()
	fake.listDistributionsByCachePolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdRequestMutex.RUnlock()
	fake.listDistributionsByCachePolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByCachePolicyIdWithContextMutex.RUnlock()
	fake.listDistributionsByKeyGroupMutex.RLock()
	defer fake.listDistributionsByKeyGroupMutex.RUnlock()
	fake.listDistributionsByKeyGroupRequestMutex.RLock()
	defer fake.listDistributionsByKeyGroupRequestMutex.RUnlock()
	fake.listDistributionsByKeyGroupWithContextMutex.RLock()
	defer fake.listDistributionsByKeyGroupWithContextMutex.RUnlock()
	fake.listDistributionsByOriginRequestPolicyIdMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdMutex.RUnlock()
	fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdRequestMutex.RUnlock()
	fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RLock()
	defer fake.listDistributionsByOriginRequestPolicyIdWithContextMutex.RUnlock()
	fake.listDistributionsByRealtimeLogConfigMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigMutex.RUnlock()
	fake.listDistributionsByRealtimeLogConfigRequestMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigRequestMutex.RUnlock()
	fake.listDistributionsByRealtimeLogConfigWithContextMutex.RLock()
	defer fake.listDistributionsByRealtimeLogConfigWithContextMutex.RUnlock()
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	fake.listFieldLevelEncryptionConfigsMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsMutex.RUnlock()
	fake.listFieldLevelEncryptionConfigsRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsRequestMutex.RUnlock()
	fake.listFieldLevelEncryptionConfigsWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionConfigsWithContextMutex.RUnlock()
	fake.listFieldLevelEncryptionProfilesMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesMutex.RUnlock()
	fake.listFieldLevelEncryptionProfilesRequestMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesRequestMutex.RUnlock()
	fake.listFieldLevelEncryptionProfilesWithContextMutex.RLock()
	defer fake.listFieldLevelEncryptionProfilesWithContextMutex.RUnlock()
	fake.listFunctionsMutex.RLock()
	defer fake.listFunctionsMutex.RUnlock()
	fake.listFunctionsRequestMutex.RLock()
	defer fake.listFunctionsRequestMutex.RUnlock()
	fake.listFunctionsWithContextMutex.RLock()
	defer fake.listFunctionsWithContextMutex.RUnlock()
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	fake.listKeyGroupsMutex.RLock()
	defer fake.listKeyGroupsMutex.RUnlock()
	fake.listKeyGroupsRequestMutex.RLock()
	defer fake.listKeyGroupsRequestMutex.RUnlock()
	fake.listKeyGroupsWithContextMutex.RLock()
	defer fake.listKeyGroupsWithContextMutex.RUnlock()
	fake.listOriginRequestPoliciesMutex.RLock()
	defer fake.listOriginRequestPoliciesMutex.RUnlock()
	fake.listOriginRequestPoliciesRequestMutex.RLock()
	defer fake.listOriginRequestPoliciesRequestMutex.RUnlock()
	fake.listOriginRequestPoliciesWithContextMutex.RLock()
	defer fake.listOriginRequestPoliciesWithContextMutex.RUnlock()
	fake.listPublicKeysMutex.RLock()
	defer fake.listPublicKeysMutex.RUnlock()
	fake.listPublicKeysRequestMutex.RLock()
	defer fake.listPublicKeysRequestMutex.RUnlock()
	fake.listPublicKeysWithContextMutex.RLock()
	defer fake.listPublicKeysWithContextMutex.RUnlock()
	fake.listRealtimeLogConfigsMutex.RLock()
	defer fake.listRealtimeLogConfigsMutex.RUnlock()
	fake.listRealtimeLogConfigsRequestMutex.RLock()
	defer fake.listRealtimeLogConfigsRequestMutex.RUnlock()
	fake.listRealtimeLogConfigsWithContextMutex.RLock()
	defer fake.listRealtimeLogConfigsWithContextMutex.RUnlock()
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.publishFunctionMutex.RLock()
	defer fake.publishFunctionMutex.RUnlock()
	fake.publishFunctionRequestMutex.RLock()
	defer fake.publishFunctionRequestMutex.RUnlock()
	fake.publishFunctionWithContextMutex.RLock()
	defer fake.publishFunctionWithContextMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.testFunctionMutex.RLock()
	defer fake.testFunctionMutex.RUnlock()
	fake.testFunctionRequestMutex.RLock()
	defer fake.testFunctionRequestMutex.RUnlock()
	fake.testFunctionWithContextMutex.RLock()
	defer fake.testFunctionWithContextMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	fake.updateCachePolicyMutex.RLock()
	defer fake.updateCachePolicyMutex.RUnlock()
	fake.updateCachePolicyRequestMutex.RLock()
	defer fake.updateCachePolicyRequestMutex.RUnlock()
	fake.updateCachePolicyWithContextMutex.RLock()
	defer fake.updateCachePolicyWithContextMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	fake.updateFieldLevelEncryptionConfigMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigMutex.RUnlock()
	fake.updateFieldLevelEncryptionConfigRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigRequestMutex.RUnlock()
	fake.updateFieldLevelEncryptionConfigWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionConfigWithContextMutex.RUnlock()
	fake.updateFieldLevelEncryptionProfileMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileMutex.RUnlock()
	fake.updateFieldLevelEncryptionProfileRequestMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileRequestMutex.RUnlock()
	fake.updateFieldLevelEncryptionProfileWithContextMutex.RLock()
	defer fake.updateFieldLevelEncryptionProfileWithContextMutex.RUnlock()
	fake.updateFunctionMutex.RLock()
	defer fake.updateFunctionMutex.RUnlock()
	fake.updateFunctionRequestMutex.RLock()
	defer fake.updateFunctionRequestMutex.RUnlock()
	fake.updateFunctionWithContextMutex.RLock()
	defer fake.updateFunctionWithContextMutex.RUnlock()
	fake.updateKeyGroupMutex.RLock()
	defer fake.updateKeyGroupMutex.RUnlock()
	fake.updateKeyGroupRequestMutex.RLock()
	defer fake.updateKeyGroupRequestMutex.RUnlock()
	fake.updateKeyGroupWithContextMutex.RLock()
	defer fake.updateKeyGroupWithContextMutex.RUnlock()
	fake.updateOriginRequestPolicyMutex.RLock()
	defer fake.updateOriginRequestPolicyMutex.RUnlock()
	fake.updateOriginRequestPolicyRequestMutex.RLock()
	defer fake.updateOriginRequestPolicyRequestMutex.RUnlock()
	fake.updateOriginRequestPolicyWithContextMutex.RLock()
	defer fake.updateOriginRequestPolicyWithContextMutex.RUnlock()
	fake.updatePublicKeyMutex.RLock()
	defer fake.updatePublicKeyMutex.RUnlock()
	fake.updatePublicKeyRequestMutex.RLock()
	defer fake.updatePublicKeyRequestMutex.RUnlock()
	fake.updatePublicKeyWithContextMutex.RLock()
	defer fake.updatePublicKeyWithContextMutex.RUnlock()
	fake.updateRealtimeLogConfigMutex.RLock()
	defer fake.updateRealtimeLogConfigMutex.RUnlock()
	fake.updateRealtimeLogConfigRequestMutex.RLock()
	defer fake.updateRealtimeLogConfigRequestMutex.RUnlock()
	fake.updateRealtimeLogConfigWithContextMutex.RLock()
	defer fake.updateRealtimeLogConfigWithContextMutex.RUnlock()
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudfront) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudfrontiface.CloudFrontAPI = new(FakeCloudfront)
