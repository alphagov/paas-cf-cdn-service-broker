// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-cdn-broker/utils"
)

type FakeCertificateManager struct {
	DeleteCertificateStub        func(string) error
	deleteCertificateMutex       sync.RWMutex
	deleteCertificateArgsForCall []struct {
		arg1 string
	}
	deleteCertificateReturns struct {
		result1 error
	}
	deleteCertificateReturnsOnCall map[int]struct {
		result1 error
	}
	GetDomainValidationChallengesStub        func(string) ([]utils.DomainValidationChallenge, error)
	getDomainValidationChallengesMutex       sync.RWMutex
	getDomainValidationChallengesArgsForCall []struct {
		arg1 string
	}
	getDomainValidationChallengesReturns struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}
	getDomainValidationChallengesReturnsOnCall map[int]struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}
	IsCertificateIssuedStub        func(string) (bool, error)
	isCertificateIssuedMutex       sync.RWMutex
	isCertificateIssuedArgsForCall []struct {
		arg1 string
	}
	isCertificateIssuedReturns struct {
		result1 bool
		result2 error
	}
	isCertificateIssuedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListIssuedCertificatesStub        func() ([]utils.CertificateDetails, error)
	listIssuedCertificatesMutex       sync.RWMutex
	listIssuedCertificatesArgsForCall []struct {
	}
	listIssuedCertificatesReturns struct {
		result1 []utils.CertificateDetails
		result2 error
	}
	listIssuedCertificatesReturnsOnCall map[int]struct {
		result1 []utils.CertificateDetails
		result2 error
	}
	RequestCertificateStub        func([]string, string) (*string, error)
	requestCertificateMutex       sync.RWMutex
	requestCertificateArgsForCall []struct {
		arg1 []string
		arg2 string
	}
	requestCertificateReturns struct {
		result1 *string
		result2 error
	}
	requestCertificateReturnsOnCall map[int]struct {
		result1 *string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCertificateManager) DeleteCertificate(arg1 string) error {
	fake.deleteCertificateMutex.Lock()
	ret, specificReturn := fake.deleteCertificateReturnsOnCall[len(fake.deleteCertificateArgsForCall)]
	fake.deleteCertificateArgsForCall = append(fake.deleteCertificateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteCertificateStub
	fakeReturns := fake.deleteCertificateReturns
	fake.recordInvocation("DeleteCertificate", []interface{}{arg1})
	fake.deleteCertificateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCertificateManager) DeleteCertificateCallCount() int {
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	return len(fake.deleteCertificateArgsForCall)
}

func (fake *FakeCertificateManager) DeleteCertificateCalls(stub func(string) error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = stub
}

func (fake *FakeCertificateManager) DeleteCertificateArgsForCall(i int) string {
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	argsForCall := fake.deleteCertificateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCertificateManager) DeleteCertificateReturns(result1 error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = nil
	fake.deleteCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCertificateManager) DeleteCertificateReturnsOnCall(i int, result1 error) {
	fake.deleteCertificateMutex.Lock()
	defer fake.deleteCertificateMutex.Unlock()
	fake.DeleteCertificateStub = nil
	if fake.deleteCertificateReturnsOnCall == nil {
		fake.deleteCertificateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCertificateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCertificateManager) GetDomainValidationChallenges(arg1 string) ([]utils.DomainValidationChallenge, error) {
	fake.getDomainValidationChallengesMutex.Lock()
	ret, specificReturn := fake.getDomainValidationChallengesReturnsOnCall[len(fake.getDomainValidationChallengesArgsForCall)]
	fake.getDomainValidationChallengesArgsForCall = append(fake.getDomainValidationChallengesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetDomainValidationChallengesStub
	fakeReturns := fake.getDomainValidationChallengesReturns
	fake.recordInvocation("GetDomainValidationChallenges", []interface{}{arg1})
	fake.getDomainValidationChallengesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertificateManager) GetDomainValidationChallengesCallCount() int {
	fake.getDomainValidationChallengesMutex.RLock()
	defer fake.getDomainValidationChallengesMutex.RUnlock()
	return len(fake.getDomainValidationChallengesArgsForCall)
}

func (fake *FakeCertificateManager) GetDomainValidationChallengesCalls(stub func(string) ([]utils.DomainValidationChallenge, error)) {
	fake.getDomainValidationChallengesMutex.Lock()
	defer fake.getDomainValidationChallengesMutex.Unlock()
	fake.GetDomainValidationChallengesStub = stub
}

func (fake *FakeCertificateManager) GetDomainValidationChallengesArgsForCall(i int) string {
	fake.getDomainValidationChallengesMutex.RLock()
	defer fake.getDomainValidationChallengesMutex.RUnlock()
	argsForCall := fake.getDomainValidationChallengesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCertificateManager) GetDomainValidationChallengesReturns(result1 []utils.DomainValidationChallenge, result2 error) {
	fake.getDomainValidationChallengesMutex.Lock()
	defer fake.getDomainValidationChallengesMutex.Unlock()
	fake.GetDomainValidationChallengesStub = nil
	fake.getDomainValidationChallengesReturns = struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) GetDomainValidationChallengesReturnsOnCall(i int, result1 []utils.DomainValidationChallenge, result2 error) {
	fake.getDomainValidationChallengesMutex.Lock()
	defer fake.getDomainValidationChallengesMutex.Unlock()
	fake.GetDomainValidationChallengesStub = nil
	if fake.getDomainValidationChallengesReturnsOnCall == nil {
		fake.getDomainValidationChallengesReturnsOnCall = make(map[int]struct {
			result1 []utils.DomainValidationChallenge
			result2 error
		})
	}
	fake.getDomainValidationChallengesReturnsOnCall[i] = struct {
		result1 []utils.DomainValidationChallenge
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) IsCertificateIssued(arg1 string) (bool, error) {
	fake.isCertificateIssuedMutex.Lock()
	ret, specificReturn := fake.isCertificateIssuedReturnsOnCall[len(fake.isCertificateIssuedArgsForCall)]
	fake.isCertificateIssuedArgsForCall = append(fake.isCertificateIssuedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsCertificateIssuedStub
	fakeReturns := fake.isCertificateIssuedReturns
	fake.recordInvocation("IsCertificateIssued", []interface{}{arg1})
	fake.isCertificateIssuedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertificateManager) IsCertificateIssuedCallCount() int {
	fake.isCertificateIssuedMutex.RLock()
	defer fake.isCertificateIssuedMutex.RUnlock()
	return len(fake.isCertificateIssuedArgsForCall)
}

func (fake *FakeCertificateManager) IsCertificateIssuedCalls(stub func(string) (bool, error)) {
	fake.isCertificateIssuedMutex.Lock()
	defer fake.isCertificateIssuedMutex.Unlock()
	fake.IsCertificateIssuedStub = stub
}

func (fake *FakeCertificateManager) IsCertificateIssuedArgsForCall(i int) string {
	fake.isCertificateIssuedMutex.RLock()
	defer fake.isCertificateIssuedMutex.RUnlock()
	argsForCall := fake.isCertificateIssuedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCertificateManager) IsCertificateIssuedReturns(result1 bool, result2 error) {
	fake.isCertificateIssuedMutex.Lock()
	defer fake.isCertificateIssuedMutex.Unlock()
	fake.IsCertificateIssuedStub = nil
	fake.isCertificateIssuedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) IsCertificateIssuedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isCertificateIssuedMutex.Lock()
	defer fake.isCertificateIssuedMutex.Unlock()
	fake.IsCertificateIssuedStub = nil
	if fake.isCertificateIssuedReturnsOnCall == nil {
		fake.isCertificateIssuedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isCertificateIssuedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) ListIssuedCertificates() ([]utils.CertificateDetails, error) {
	fake.listIssuedCertificatesMutex.Lock()
	ret, specificReturn := fake.listIssuedCertificatesReturnsOnCall[len(fake.listIssuedCertificatesArgsForCall)]
	fake.listIssuedCertificatesArgsForCall = append(fake.listIssuedCertificatesArgsForCall, struct {
	}{})
	stub := fake.ListIssuedCertificatesStub
	fakeReturns := fake.listIssuedCertificatesReturns
	fake.recordInvocation("ListIssuedCertificates", []interface{}{})
	fake.listIssuedCertificatesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertificateManager) ListIssuedCertificatesCallCount() int {
	fake.listIssuedCertificatesMutex.RLock()
	defer fake.listIssuedCertificatesMutex.RUnlock()
	return len(fake.listIssuedCertificatesArgsForCall)
}

func (fake *FakeCertificateManager) ListIssuedCertificatesCalls(stub func() ([]utils.CertificateDetails, error)) {
	fake.listIssuedCertificatesMutex.Lock()
	defer fake.listIssuedCertificatesMutex.Unlock()
	fake.ListIssuedCertificatesStub = stub
}

func (fake *FakeCertificateManager) ListIssuedCertificatesReturns(result1 []utils.CertificateDetails, result2 error) {
	fake.listIssuedCertificatesMutex.Lock()
	defer fake.listIssuedCertificatesMutex.Unlock()
	fake.ListIssuedCertificatesStub = nil
	fake.listIssuedCertificatesReturns = struct {
		result1 []utils.CertificateDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) ListIssuedCertificatesReturnsOnCall(i int, result1 []utils.CertificateDetails, result2 error) {
	fake.listIssuedCertificatesMutex.Lock()
	defer fake.listIssuedCertificatesMutex.Unlock()
	fake.ListIssuedCertificatesStub = nil
	if fake.listIssuedCertificatesReturnsOnCall == nil {
		fake.listIssuedCertificatesReturnsOnCall = make(map[int]struct {
			result1 []utils.CertificateDetails
			result2 error
		})
	}
	fake.listIssuedCertificatesReturnsOnCall[i] = struct {
		result1 []utils.CertificateDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) RequestCertificate(arg1 []string, arg2 string) (*string, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.requestCertificateMutex.Lock()
	ret, specificReturn := fake.requestCertificateReturnsOnCall[len(fake.requestCertificateArgsForCall)]
	fake.requestCertificateArgsForCall = append(fake.requestCertificateArgsForCall, struct {
		arg1 []string
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.RequestCertificateStub
	fakeReturns := fake.requestCertificateReturns
	fake.recordInvocation("RequestCertificate", []interface{}{arg1Copy, arg2})
	fake.requestCertificateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertificateManager) RequestCertificateCallCount() int {
	fake.requestCertificateMutex.RLock()
	defer fake.requestCertificateMutex.RUnlock()
	return len(fake.requestCertificateArgsForCall)
}

func (fake *FakeCertificateManager) RequestCertificateCalls(stub func([]string, string) (*string, error)) {
	fake.requestCertificateMutex.Lock()
	defer fake.requestCertificateMutex.Unlock()
	fake.RequestCertificateStub = stub
}

func (fake *FakeCertificateManager) RequestCertificateArgsForCall(i int) ([]string, string) {
	fake.requestCertificateMutex.RLock()
	defer fake.requestCertificateMutex.RUnlock()
	argsForCall := fake.requestCertificateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCertificateManager) RequestCertificateReturns(result1 *string, result2 error) {
	fake.requestCertificateMutex.Lock()
	defer fake.requestCertificateMutex.Unlock()
	fake.RequestCertificateStub = nil
	fake.requestCertificateReturns = struct {
		result1 *string
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) RequestCertificateReturnsOnCall(i int, result1 *string, result2 error) {
	fake.requestCertificateMutex.Lock()
	defer fake.requestCertificateMutex.Unlock()
	fake.RequestCertificateStub = nil
	if fake.requestCertificateReturnsOnCall == nil {
		fake.requestCertificateReturnsOnCall = make(map[int]struct {
			result1 *string
			result2 error
		})
	}
	fake.requestCertificateReturnsOnCall[i] = struct {
		result1 *string
		result2 error
	}{result1, result2}
}

func (fake *FakeCertificateManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteCertificateMutex.RLock()
	defer fake.deleteCertificateMutex.RUnlock()
	fake.getDomainValidationChallengesMutex.RLock()
	defer fake.getDomainValidationChallengesMutex.RUnlock()
	fake.isCertificateIssuedMutex.RLock()
	defer fake.isCertificateIssuedMutex.RUnlock()
	fake.listIssuedCertificatesMutex.RLock()
	defer fake.listIssuedCertificatesMutex.RUnlock()
	fake.requestCertificateMutex.RLock()
	defer fake.requestCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCertificateManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.CertificateManagerInterface = new(FakeCertificateManager)
